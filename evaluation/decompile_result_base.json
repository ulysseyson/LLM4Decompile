["int func0(float param_1, long param_2, int param_3) {\n  int local_10 = 0;\n  while (param_3 > local_10) {\n    int local_c = local_10;\n    if (param_3 <= local_10) {\n      return 0;\n    }\n    while (local_c < param_3) {\n      if ((float)(*(float *)(param_2 + local_10 * 4) - *(float *)(param_2 + local_c * 4)) < param_1) {\n        return 1;\n      }\n      local_c++;\n    }\n    local_10++;\n  }\n  return 0;\n}", "int func0(float param_1, long param_2, int param_3) {\n  if (param_3 < 1) {\n    return 0;\n  }\n  for (int i = 1; i <= param_3; i++) {\n    for (int j = 0; j < param_3; j++) {\n      if (((*(float *)(param_2 + -4 + i * 4) - *(float *)(param_2 + j * 4)) & 0x00000080) < param_1) {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}", "int func0(float param_1, long param_2, int param_3) {\n  int i;\n  int j;\n  int result = 0;\n  \n  if (param_3 > 0) {\n    for (i = 1; i < param_3; i++) {\n      for (j = 0; j < param_3; j++) {\n        if (((*(float *)(param_2 + -4 + i * 4) - *(float *)(param_2 + j * 4)) & 0x000000b0) < param_1) {\n          result = 1;\n          goto exit;\n        }\n      }\n    }\n  }\n  \n  exit:\n  return result;\n}", "int func0(float param_1, long param_2, int param_3) {\n  int i;\n  int j;\n  int k;\n  \n  if (param_3 > 0) {\n    k = 1;\n    j = param_3 - 1 + 1;\n    if (j!= 1) {\n      do {\n        i = k;\n        do {\n          if (((*(float *)(param_2 + -4 + k * 4) - *(float *)(param_2 + i * 4)) & 0x000000b0) < param_1) {\n            return 1;\n          }\n          i++;\n        } while (i < param_3);\n        k++;\n      } while (j!= k);\n    }\n  }\n  return 0;\n}", "void* func0(char* param_1, int* param_2) {\n  int sVar2 = strlen(param_1);\n  int count = 0;\n  int capacity = 10;\n  void* array = malloc(0x50);\n  char* str = malloc(sVar2 + 1);\n  int index = 0;\n  *param_2 = 0;\n  for (int i = 0; i < sVar2; i++) {\n    if (param_1[i] == '(') {\n      count++;\n      str[index] = '(';\n      index++;\n    } else if (param_1[i] == ')') {\n      count--;\n      index++;\n      str[index] = ')';\n      if (count == 0) {\n        str[index] = '\\0';\n        char* copy = strdup(str);\n        *(char**)((long)*param_2 * 8 + (long)array) = copy;\n        *param_2 = *param_2 + 1;\n        if (capacity <= *param_2) {\n          capacity <<= 1;\n          array = realloc(array, capacity * 8);\n        }\n        index = 0;\n      }\n    }\n  }\n  free(str);\n  return array;\n}", "char *func0(char *str, int *count) {\n  char *ptr = str;\n  int i = 0;\n  int balance = 0;\n  int len = 0;\n  char *result = NULL;\n  char *temp = NULL;\n  int capacity = 10;\n  char *array = malloc(50);\n  if (array == NULL) {\n    return NULL;\n  }\n  while (*ptr!= '\\0') {\n    if (*ptr == '(') {\n      balance++;\n    } else if (*ptr == ')') {\n      balance--;\n      if (balance == 0) {\n        result = malloc(strlen(str) + 1);\n        if (result == NULL) {\n          free(array);\n          return NULL;\n        }\n        temp = result;\n        for (i = 0; i < *count; i++) {\n          *(char **) ((long)array + (long)i * 8) = *(char **) ((long)array + (long)(*count - 1) * 8);\n          (*count)--;\n        }\n        free(array);\n        array = malloc(capacity * 8);\n        if (array == NULL) {\n          free(result);\n          return NULL;\n        }\n        for (i = 0; i < *count; i++) {\n          *(char **) ((long)array + (long)i * 8) = *(char **) ((long)array + (long)(*count - 1) * 8);\n          (*count)--;\n        }\n        for (i = 0; i < balance; i++) {\n          *(char **) ((long)array + (long)(*count) * 8) = strdup(\"(\");\n          (*count)++;\n        }\n        for (i = 0; i < balance; i++) {\n          *(char **) ((long)array + (long)(*count) * 8) = strdup(\")\");\n          (*count)++;\n        }\n        for (i = 0; i < *count; i++) {\n          *(char **) ((long)array + (long)i * 8) = strdup(temp);\n          (*count)++;\n        }\n        free(temp);\n        break;\n      }\n    }\n    ptr++;\n    len++;\n  }\n  if (len > 0) {\n    result = malloc(len + 1);\n    if (result == NULL) {\n      free(array);\n      return NULL;\n    }\n    strcpy(result, str);\n  }\n  free(array);\n  return result;\n", "char *func0(char *str, int *index) {\n  int len = strlen(str);\n  char *buf = malloc(50);\n  char *result = malloc(len + 1);\n  *index = 0;\n  if (len > 0) {\n    int i = 0, j = 10, count = 0;\n    char *end = str + len - 1;\n    while (str!= end) {\n      while (*str == '(') {\n        result[i++] = '(';\n        str++;\n        count++;\n        i++;\n      }\n      if (*str == ')') {\n        result[i++] = ')';\n        count--;\n        if (count == 0) {\n          result[i] = '\\0';\n          char *temp = strdup(result);\n          *(char **)(buf + (*index) * 8) = temp;\n          *index = *index + 1;\n          if (j <= *index + 1) {\n            j = j * 2;\n            buf = realloc(buf, j << 3);\n          }\n        }\n      }\n      str++;\n    }\n  }\n  free(result);\n  return buf;\n}", "void* func0(char* param_1, int* param_2) {\n  int len = strlen(param_1);\n  void* ptr = malloc(0x50);\n  int* arr = (int*)malloc((len + 1) * sizeof(int));\n  *param_2 = 0;\n  if (len > 0) {\n    int i = 0, j = 10, count = 0;\n    char* end = param_1 + len - 1;\n    char* str = (char*)malloc((len + 1) * sizeof(char));\n    for (char* p = param_1; p <= end; p++) {\n      if (*p == '(') {\n        str[i++] = '(';\n        count++;\n      } else if (*p == ')') {\n        str[i++] = ')';\n        count--;\n        if (count == 0) {\n          str[i] = '\\0';\n          char* dup = strdup(str);\n          arr[*param_2] = (int)dup;\n          *param_2 = *param_2 + 1;\n          if (*param_2 > j) {\n            j *= 2;\n            ptr = realloc(ptr, j * sizeof(int));\n          }\n        }\n      }\n    }\n  }\n  free(str);\n  return ptr;\n}", "float func0(float param_1) {\n  return param_1 - (float)((int)param_1);\n}", "float func0(float param_1) {\n  return param_1 - (float)((int)param_1);\n}", "float func0(float param_1) {\n  return param_1 - (float)((int)param_1);\n}", "float func0(float param_1) {\n  return param_1 - (float)((int)param_1);\n}", "int func0(long param_1, int param_2) {\n  int local_10 = 0;\n  int local_c = 0;\n  \n  while (param_2 > local_c) {\n    if (local_10 + *(int *)(param_1 + (long)local_c * 4) < 0) {\n      return 1;\n    }\n    local_10 += *(int *)(param_1 + (long)local_c * 4);\n    local_c++;\n  }\n  return 0;\n}", "int func0(int *arr, int n) {\n  if (n < 1) {\n    return 0;\n  }\n  int sum = *arr;\n  int i;\n  for (i = 1; i < n; i++) {\n    if (arr[i] < 0) {\n      return 1;\n    }\n    sum += arr[i];\n  }\n  return sum >= 0;\n}", "int func0(int *arr, int n) {\n  if (n < 1) {\n    return 0;\n  }\n  int sum = *arr;\n  int *end = arr + n - 1;\n  while (arr!= end && sum < 0) {\n    sum += *arr++;\n  }\n  return arr == end;\n}", "int func0(int *arr, int n) {\n  if (n < 1) return 0;\n  int sum = *arr;\n  int i;\n  for (i = 1; i < n; i++) {\n    if (arr[i] < 0) return 0;\n    sum += arr[i];\n  }\n  return 1;\n}", "float func0(long param_1, int param_2) {\n  float sum = 0.0;\n  float avg = 0.0;\n  for (int i = 0; i < param_2; i++) {\n    sum += *(float *)(param_1 + i * 4);\n  }\n  for (int i = 0; i < param_2; i++) {\n    avg += (float)((uint)(*(float *)(param_1 + i * 4) - sum / param_2) & 0x3f) / param_2;\n  }\n  return avg;\n}", "long func0(long param_1,int param_2)\n{\n  long lVar1;\n  long lVar2;\n  \n  if (param_2 > 0) {\n    lVar1 = param_1 + 4 + (param_2 - 1) * 4;\n    lVar2 = param_1;\n    while (lVar2!= lVar1) {\n      lVar2 += 4;\n    }\n    while (param_1!= lVar1) {\n      param_1 += 4;\n    }\n  }\n  return lVar1;\n}", "long func0(long param_1,int param_2) {\n  if (param_2 < 1) {\n    return 0;\n  }\n  long lVar1 = param_1 + 4 + (param_2 - 1) * 4;\n  long lVar2 = param_1;\n  while (lVar1!= lVar2) {\n    lVar2 += 4;\n  }\n  while (lVar1!= param_1) {\n    param_1 += 4;\n  }\n  return 0;\n}", "float func0(float *param_1, uint param_2) {\n  float sum = 0.0;\n  float avg = 0.0;\n  float diff = 0.0;\n  uint i = 0;\n  uint j = 0;\n  uint k = 0;\n  uint n = param_2 - 1;\n  uint rem = param_2 & 0xfffffffc;\n\n  if (param_2 < 1) {\n    return 0.0;\n  }\n\n  if (param_2 - 1 < 3) {\n    for (i = 0; i < param_2; i++) {\n      sum += param_1[i];\n    }\n    avg = sum / param_2;\n    for (i = 0; i < param_2; i++) {\n      diff += (param_1[i] - avg) & 0x7f7f7f7f;\n    }\n  } else {\n    for (i = 0; i < (param_2 >> 2); i++) {\n      sum += param_1[i * 4] + param_1[i * 4 + 1] + param_1[i * 4 + 2] + param_1[i * 4 + 3];\n    }\n    rem = param_2 & 0xfffffffc;\n    for (i = 0; i < rem; i++) {\n      sum += param_1[i];\n    }\n    avg = sum / param_2;\n    for (i = 0; i < (param_2 >> 2); i++) {\n      diff += (param_1[i * 4] - avg) & 0x7f7f7f7f;\n      diff += (param_1[i * 4 + 1] - avg) & 0x7f7f7f7f;\n      diff += (param_1[i * 4 + 2] - avg) & 0x7f7f7f7f;\n      diff += (param_1[i * 4 + 3] - avg) & 0x7f7f7f7f;\n    }\n    for (i = 0; i < rem; i++) {\n      diff += (param_1[i] - avg) & 0x7f7f7f7f;\n    }\n  }\n\n  for (", "int* func0(int* param_1, int param_2, int param_3, int* param_4) {\n  int iVar2;\n  int local_18;\n  int local_14;\n  \n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    iVar2 = param_2 * 2 - 1;\n  }\n  *param_4 = iVar2;\n  int* puVar1 = (int*)malloc((iVar2 + 1) * sizeof(int));\n  if (param_2 > 0) {\n    *puVar1 = *param_1;\n  }\n  local_14 = 1;\n  for (local_18 = 1; local_18 < param_2; local_18++) {\n    local_14 += 2;\n    puVar1[local_14 - 2] = param_3;\n    puVar1[local_14 - 1] = param_1[local_18];\n  }\n  return puVar1;\n}", "int func0(undefined4 *param_1,int param_2,undefined4 param_3,int *param_4)\n{\n  if (param_2 < 1) {\n    *param_4 = 0;\n    malloc(0);\n  }\n  else {\n    int iVar1 = param_2 * 2 + -1;\n    *param_4 = iVar1;\n    undefined4 *puVar2 = (undefined4 *)malloc((long)iVar1 << 2);\n    *puVar2 = *param_1;\n    if (1 < param_2) {\n      for (int lVar3 = 1; lVar3 < param_2; lVar3++) {\n        puVar2[lVar3 * 2 - 1] = param_3;\n        puVar2[lVar3 * 2 - 2] = param_1[lVar3];\n      }\n    }\n  }\n  return 0;\n}", "int func0(undefined4 *param_1,int param_2,undefined4 param_3,int *param_4)\n{\n  if (param_2 > 0) {\n    int iVar1 = param_2 * 2 - 1;\n    *param_4 = iVar1;\n    undefined4 *puVar3 = (undefined4 *)malloc(iVar1 * sizeof(undefined4));\n    *puVar3 = *param_1;\n    if (param_2!= 1) {\n      for (int i = 1; i < param_2; i++) {\n        puVar3[i * 2 - 1] = param_3;\n        puVar3[i * 2] = param_1[i];\n      }\n    }\n    return 0;\n  }\n  *param_4 = 0;\n  malloc(0);\n  return -1;\n}", "int func0(undefined4 *param_1,int param_2,undefined4 param_3,int *param_4) {\n  int i;\n  int j;\n  int k;\n  int *ptr;\n  int size = param_2 * 2 + -1;\n  *param_4 = size;\n  ptr = (int *)malloc(size * sizeof(int));\n  ptr[0] = *param_1;\n  if (param_2!= 1) {\n    for (i = 1; i < size; i += 4) {\n      int a = *(int *)((char *)param_1 + i);\n      int b = *(int *)((char *)param_1 + i + 4);\n      int c = *(int *)((char *)param_1 + i + 8);\n      int d = *(int *)((char *)param_1 + i + 12);\n      ptr[i] = param_3;\n      ptr[i + 1] = param_3;\n      ptr[i + 2] = a;\n      ptr[i + 3] = param_3;\n      ptr[i + 4] = param_3;\n      ptr[i + 5] = b;\n      ptr[i + 6] = param_3;\n      ptr[i + 7] = param_3;\n      ptr[i + 8] = param_3;\n      ptr[i + 9] = c;\n      ptr[i + 10] = param_3;\n      ptr[i + 11] = param_3;\n      ptr[i + 12] = param_3;\n      ptr[i + 13] = d;\n    }\n  }\n  for (i = 0; i < size; i += 4) {\n    if (i + 1 < size) {\n      int a = ptr[i + 1];\n      ptr[i + 3] = param_3;\n      ptr[i + 4] = param_3;\n      if (i + 2 < size) {\n        int b = ptr[i + 2];\n        ptr[i + 5] = param_3;\n        ptr[i + 6] = param_3;\n        if (i + 3 < size) {\n          int c = ptr[i + 3];\n          ptr[i + 7] = param_3;\n          ptr[i + 8] = param_3;\n        }\n      }\n    }\n  }\n  return 0", "int func0(char *param_1, int *param_2) {\n  int max_depth = 0;\n  int current_depth = 0;\n  int bracket_count = 0;\n  int *bracket_array = NULL;\n  int array_size = 0;\n\n  for (int i = 0; param_1[i]!= '\\0'; i++) {\n    if (param_1[i] == '(') {\n      current_depth++;\n      if (current_depth > max_depth) {\n        max_depth = current_depth;\n      }\n    } else if (param_1[i] == ')' && current_depth > 0) {\n      current_depth--;\n      if (current_depth == 0) {\n        bracket_array = (int *)realloc(bracket_array, (array_size + 1) * 4);\n        *(int *)((array_size * 4) + (long)bracket_array) = max_depth;\n        max_depth = 0;\n        array_size++;\n      }\n    }\n  }\n  *param_2 = array_size;\n  return (int *)bracket_array;\n}", "int func0(char *str, int *count) {\n  int stack_size = 0;\n  int max_stack_size = 0;\n  int current_stack_size = 0;\n  int *stack = NULL;\n\n  while (*str!= '\\0') {\n    if (*str == '(') {\n      max_stack_size = (max_stack_size > current_stack_size)? max_stack_size : current_stack_size;\n      current_stack_size++;\n    } else if (*str == ')') {\n      current_stack_size--;\n      if (current_stack_size == 0) {\n        stack_size++;\n        stack = realloc(stack, stack_size * sizeof(int));\n        stack[stack_size - 1] = max_stack_size;\n        max_stack_size = 0;\n      }\n    }\n    str++;\n  }\n\n  *count = stack_size;\n  return stack;\n}", "void* func0(char* str, int* count) {\n  int i = 0, balance = 0, maxBalance = 0;\n  void* ptr = NULL;\n  \n  while (*str!= '\\0') {\n    if (*str == '(') {\n      balance++;\n      if (balance > maxBalance) {\n        maxBalance = balance;\n      }\n    } else if (*str == ')') {\n      balance--;\n      if (balance == 0) {\n        *count = *count + 1;\n        ptr = realloc(ptr, (*count) * 4);\n        *(int*)((long)ptr + ((long)*count - 1) * 4) = maxBalance;\n        maxBalance = 0;\n      }\n    }\n    str++;\n  }\n  return ptr;\n}", "int func0(char *str, int *count) {\n  int i = 0, balance = 0, max_balance = 0;\n  char c;\n  void *ptr = NULL;\n  \n  while ((c = *str)!= '\\0') {\n    if (c == '(') {\n      balance++;\n      if (balance > max_balance) {\n        max_balance = balance;\n      }\n    } else if (c == ')') {\n      balance--;\n      if (balance == 0) {\n        *count = *count + 1;\n        ptr = realloc(ptr, (*count) * 4);\n        *(int *)((long)ptr + ((long)*count - 1) * 4) = max_balance;\n        max_balance = 0;\n      }\n    }\n    str++;\n  }\n  return ptr;\n}", "void* func0(long param_1, int param_2, char* param_3, int* param_4) {\n  void* result = NULL;\n  int count = 0;\n  for (int i = 0; i < param_2; i++) {\n    char* match = strstr((char*)(param_1 + i * 8), param_3);\n    if (match!= NULL) {\n      void* temp = realloc(result, (count + 1) * 8);\n      if (temp!= NULL) {\n        memcpy(temp + (count * 8), (char*)(param_1 + i * 8), 8);\n        result = temp;\n        count++;\n      }\n    }\n  }\n  *param_4 = count;\n  return result;\n}", "void* func0(char** param_1, int param_2, char* param_3, int* param_4) {\n  int count = 0;\n  void* ptr = NULL;\n  if (param_2 < 1) {\n    *param_4 = 0;\n    return ptr;\n  }\n  for (int i = 0; i < param_2; i++) {\n    char* haystack = param_1[i];\n    char* needle = strstr(haystack, param_3);\n    if (needle!= NULL) {\n      count++;\n      ptr = realloc(ptr, count * 8);\n      *(char**)ptr = haystack;\n    }\n  }\n  *param_4 = count;\n  return ptr;\n}", "void* func0(char** param_1, int param_2, char* param_3, int* param_4) {\n  int count = 0;\n  void* ptr = NULL;\n  if (param_2 < 1) {\n    *param_4 = count;\n    return ptr;\n  }\n  for (int i = 0; i < param_2; i++) {\n    char* haystack = param_1[i];\n    char* needle = strstr(haystack, param_3);\n    if (needle!= NULL) {\n      count++;\n      ptr = realloc(ptr, count * 8);\n      *(char**) (ptr + (count - 1) * 8) = haystack;\n    }\n  }\n  *param_4 = count;\n  return ptr;\n}", "void* func0(char** param_1, int param_2, char* param_3, int* param_4) {\n  int count = 0;\n  void* ptr = NULL;\n  if (param_2 < 1) {\n    *param_4 = count;\n    return ptr;\n  }\n  for (int i = 0; i < param_2; i++) {\n    char* haystack = param_1[i];\n    char* needle = strstr(haystack, param_3);\n    if (needle!= NULL) {\n      count++;\n      ptr = realloc(ptr, count * 8);\n      *(char**) (ptr + (count - 1) * 8) = haystack;\n    }\n  }\n  *param_4 = count;\n  return ptr;\n}", "int func0(long param_1,int param_2,int *param_3)\n{\n  int local_14 = 0;\n  int local_10 = 1;\n  for (int local_c = 0; local_c < param_2; local_c++) {\n    local_14 += *(int *)(param_1 + local_c * 4);\n    local_10 *= *(int *)(param_1 + local_c * 4);\n  }\n  param_3[0] = local_14;\n  param_3[1] = local_10;\n  return local_14 + local_10;\n}", "int func0(int *param_1,int param_2,int *param_3)\n{\n  int iVar2;\n  int iVar3;\n  int *piVar1;\n  \n  if (param_2 < 1) {\n    iVar2 = 1;\n    iVar3 = 0;\n  }\n  else {\n    piVar1 = param_1 + (param_2 - 1);\n    iVar2 = 1;\n    iVar3 = 0;\n    for (; param_1!= piVar1; param_1++) {\n      iVar3 += *param_1;\n      iVar2 *= *param_1;\n    }\n  }\n  *param_3 = iVar3;\n  param_3[1] = iVar2;\n  return iVar3 + iVar2;\n}", "int func0(int *param_1,int param_2,int *param_3)\n{\n  if (param_2 > 0) {\n    int iVar2;\n    int iVar3 = 1;\n    int iVar4 = 0;\n    for (int i = 0; param_1[i]!= param_1[param_2 - 1]; i++) {\n      iVar2 = param_1[i];\n      iVar3 *= iVar2;\n      iVar4 += iVar2;\n    }\n    *param_3 = iVar4;\n    param_3[1] = iVar3;\n  } else {\n    *param_3 = 0;\n    param_3[1] = 1;\n  }\n  return 0;\n}", "int func0(undefined (*param_1) [16],uint param_2,int *param_3)\n{\n  int lVar1;\n  int auVar2 [16];\n  int (*pauVar3) [16];\n  int uVar4;\n  int lVar5;\n  int uVar6;\n  unsigned long uVar7;\n  unsigned long uVar8;\n  int auVar9 [16];\n  unsigned long uVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  int uVar15;\n  unsigned long uVar16;\n  int uVar17;\n  \n  if (param_2 < 1) {\n    *param_3 = 0;\n    param_3[1] = 1;\n    return 0;\n  }\n  if (param_2 - 1 < 17) {\n    uVar4 = 0;\n    uVar7 = 1;\n    iVar11 = 0;\n  }\n  else {\n    iVar11 = 0;\n    iVar12 = 0;\n    iVar13 = 0;\n    iVar14 = 0;\n    pauVar3 = param_1;\n    uVar7 = 0x10000001;\n    uVar8 = 0x20000002;\n    while (pauVar3!= param_1 + (param_2 >> 2)) {\n      auVar2 = *pauVar3;\n      pauVar3 = pauVar3 + 1;\n      uVar16 = (uVar7 & 0xffffffff) * auVar2[0];\n      iVar11 = iVar11 + auVar2[0];\n      iVar12 = iVar12 + auVar2[4];\n      iVar13 = iVar13 + auVar2[8];\n      iVar14 = iVar14 + auVar2[12];\n      uVar10 = (auVar2[8] >> 0x20) * (uVar7 >> 0x20);\n      uVar15 = uVar16;\n      uVar17 = (uVar8 & 0xffffffff) * auVar2[8];\n      auVar9[4] = uVar17;\n      auVar9[0] = uVar15;\n      auVar9[8] = uVar17;\n      auVar9[12] = (int)((auVar2[8] >> 0x20) *", "void* func0(int* param_1, int param_2) {\n  void* pvVar1 = NULL;\n  int local_18 = *param_1;\n  int local_14;\n\n  if (param_2 < 1) {\n    pvVar1 = NULL;\n  }\n  else {\n    pvVar1 = malloc(param_2 * 4);\n    if (pvVar1 == NULL) {\n      pvVar1 = NULL;\n    }\n    else {\n      for (local_14 = 0; local_14 < param_2; local_14++) {\n        if (local_18 < param_1[local_14]) {\n          local_18 = param_1[local_14];\n        }\n        *(int*)((long)local_14 * 4 + (long)pvVar1) = local_18;\n      }\n    }\n  }\n  return pvVar1;\n}", "void* func0(int* param_1, int param_2) {\n  if (param_2 > 0) {\n    int* array = (int*)malloc(param_2 * sizeof(int));\n    if (array!= NULL) {\n      int max = *param_1;\n      for (int i = 0; i < param_2; i++) {\n        if (param_1[i] > max) {\n          max = param_1[i];\n        }\n        array[i] = max;\n      }\n      return array;\n    }\n  }\n  return NULL;\n}", "void* func0(int* param_1, int param_2) {\n  if (param_2 < 1) return NULL;\n  int* pvVar1 = (int*)malloc(param_2 * 4);\n  if (pvVar1!= NULL) {\n    int iVar2 = *param_1;\n    int iVar4 = iVar2;\n    for (int i = 0; i < param_2; i++) {\n      pvVar1[i] = iVar2;\n      if (iVar2 < iVar4) iVar2 = iVar4;\n      iVar4 = *(param_1 + i + 1);\n    }\n    return pvVar1;\n  }\n  return NULL;\n}", "void* func0(int* param_1, int param_2) {\n  if (param_2 < 1) return NULL;\n  int* pvVar1 = (int*)malloc(param_2 * sizeof(int));\n  if (pvVar1!= NULL) {\n    int iVar2 = *param_1;\n    for (int uVar3 = 0; uVar3 < param_2; uVar3++) {\n      if (iVar2 > param_1[uVar3]) iVar2 = param_1[uVar3];\n      pvVar1[uVar3] = iVar2;\n    }\n    return pvVar1;\n  }\n  return NULL;\n}", "char *func0(char *param_1) {\n  int len = strlen(param_1);\n  char *dest = malloc((len * 2 + 1) * sizeof(char));\n  if (dest == NULL) {\n    return NULL;\n  }\n  for (int i = 0; i < len; i++) {\n    bool isPalindrome = true;\n    for (int j = 0; j < (len - i) / 2; j++) {\n      if (param_1[i + j]!= param_1[len - 1 - j]) {\n        isPalindrome = false;\n        break;\n      }\n    }\n    if (isPalindrome) {\n      strcpy(dest, param_1);\n      for (int j = 0; j < i; j++) {\n        dest[len + j] = param_1[len - 1 - j];\n      }\n      dest[len + i] = '\\0';\n      return dest;\n    }\n  }\n  strcpy(dest, param_1);\n  for (int i = 0; i < len; i++) {\n    dest[len + i] = param_1[len - 1 - i];\n  }\n  dest[len * 2] = '\\0';\n  return dest;\n}", "char *func0(char *param_1) {\n  size_t len = 0;\n  char *str = param_1;\n  while (*str!= '\\0') {\n    len++;\n    str++;\n  }\n  str = (char *)malloc((len * 2 + 1) * sizeof(char));\n  if (str!= NULL) {\n    if (len < 1) {\n      strncpy(str, param_1, len);\n    } else {\n      size_t i = 0;\n      size_t j = len - 1;\n      size_t k = 0;\n      while (i <= j) {\n        if (i == j) {\n          strncpy(str, param_1, len);\n          str[len * 2] = '\\0';\n          return str;\n        }\n        if (param_1[i] == param_1[j]) {\n          i++;\n          j--;\n        } else {\n          size_t mid = (i + j) / 2;\n          while (param_1[i] == param_1[mid]) {\n            i++;\n            mid--;\n          }\n          while (param_1[j] == param_1[mid]) {\n            j--;\n            mid++;\n          }\n          size_t n = j - i + 1;\n          strncpy(str, param_1, n);\n          str[n * 2] = '\\0';\n          for (size_t p = 0; p < n; p++) {\n            str[p * 2 + n] = param_1[p];\n          }\n          str[(n * 2) + n] = '\\0';\n          return str;\n        }\n      }\n      strncpy(str, param_1, len);\n      str[len * 2] = '\\0';\n    }\n  }\n  return str;\n}", "char *func0(char *param_1) {\n  size_t len = strlen(param_1);\n  char *dest = malloc(len * 2 + 1);\n  if (dest!= NULL) {\n    if (len < 1) {\n      strncpy(dest, param_1, len);\n    } else {\n      int i = 0;\n      int j = len;\n      while (j >> 1!= 0) {\n        while (param_1[i] == param_1[j - 1]) {\n          i++;\n          j--;\n          if (i == j - (j >> 1)) break;\n        }\n        if (j == i + 1) {\n          strncpy(dest, param_1, len);\n          i = len - 1;\n          j = len;\n          while (i >= 0 && param_1[i] == param_1[len - 1]) {\n            dest[j - 1] = param_1[i];\n            i--;\n            j--;\n          }\n        } else {\n          i++;\n          j--;\n        }\n      }\n      strncpy(dest, param_1, len);\n      if (i!= 0) {\n        i = len - i;\n        j = len;\n        while (i < j) {\n          dest[j - 1] = param_1[i];\n          i++;\n          j--;\n        }\n      }\n      dest[len + i] = '\\0';\n    }\n  }\n  return dest;\n}", "char *func0(char *param_1) {\n  size_t len = strlen(param_1);\n  char *dest = malloc(len * 2 + 1);\n  if (dest!= NULL) {\n    if (len < 1) {\n      strncpy(dest, param_1, len);\n    } else {\n      int i = 0;\n      int j = len;\n      while (j >> 1!= 0) {\n        while (param_1[i] == param_1[j - 1]) {\n          i++;\n          j--;\n          if (i == j - (j >> 1)) break;\n        }\n        if (j == i + 1) {\n          strncpy(dest, param_1, len);\n          i = len - 1;\n          j = len;\n          while (i >= 0 && param_1[i] == param_1[len - 1]) {\n            dest[j - 1] = param_1[i];\n            i--;\n            j--;\n          }\n        } else {\n          i++;\n          j--;\n        }\n      }\n      strncpy(dest, param_1, len);\n      if (i!= 0) {\n        i = len - i;\n        j = len;\n        while (i < j) {\n          dest[j - 1] = param_1[i];\n          i++;\n          j--;\n        }\n      }\n      dest[len + i] = '\\0';\n    }\n  }\n  return dest;\n}", "void* func0(char* param_1, char* param_2) {\n  int len1 = strlen(param_1);\n  int len2 = strlen(param_2);\n  int max_len = (len1 > len2)? len1 : len2;\n  void* ptr = malloc((max_len + 1) * sizeof(char));\n  if (ptr == NULL) {\n    return NULL;\n  }\n  for (int i = 0; i < max_len; i++) {\n    if (param_1[i] == param_2[i]) {\n      ptr[i] = '0';\n    } else {\n      ptr[i] = '1';\n    }\n  }\n  ptr[max_len] = '\\0';\n  return ptr;\n}", "int func0(char *param_1, char *param_2) {\n  int length1 = 0;\n  int length2 = 0;\n  char *ptr1 = param_1;\n  char *ptr2 = param_2;\n  \n  while (*ptr1!= '\\0') {\n    length1++;\n    ptr1++;\n  }\n  \n  while (*ptr2!= '\\0') {\n    length2++;\n    ptr2++;\n  }\n  \n  int length = (length1 <= length2)? length1 : length2;\n  char *result = (char *)malloc((length + 1) * sizeof(char));\n  \n  if (result!= NULL) {\n    int i = 0;\n    while (i < length) {\n      result[i] = (param_1[i]!= param_2[i]) + '0';\n      i++;\n    }\n    result[length] = '\\0';\n  }\n  \n  return result;\n}", "char *func0(char *param_1, char *param_2) {\n  int len1 = strlen(param_1);\n  int len2 = strlen(param_2);\n  int len = (len1 < len2)? len2 : len1;\n  char *result = malloc(len + 1);\n  if (result!= NULL) {\n    for (int i = 0; i < len; i++) {\n      result[i] = (param_1[i]!= param_2[i]) + '0';\n    }\n    result[len] = 0;\n  }\n  return result;\n}", "char *func0(char *param_1, char *param_2) {\n    size_t len1 = strlen(param_1);\n    size_t len2 = strlen(param_2);\n    if (len2 < len1) len1 = len2;\n    uint len = len1;\n    char *diff = malloc((len + 1) * sizeof(char));\n    if (diff == NULL) return NULL;\n    for (long i = 0; i < (len + 15) / 16; i++) {\n        char *p1 = param_1 + i * 16;\n        char *p2 = param_2 + i * 16;\n        byte *pdiff = (byte *)diff + i * 16;\n        pdiff[0] = (~(*p1 == *p2) & 0x80) | (0x00 & (*p1 == *p2));\n        pdiff[1] = (~(*p1 + 1 == *p2 + 1) & 0x80) | (0x00 & (*p1 + 1 == *p2 + 1));\n        pdiff[2] = (~(*p1 + 2 == *p2 + 2) & 0x80) | (0x00 & (*p1 + 2 == *p2 + 2));\n        pdiff[3] = (~(*p1 + 3 == *p2 + 3) & 0x80) | (0x00 & (*p1 + 3 == *p2 + 3));\n        pdiff[4] = (~(*p1 + 4 == *p2 + 4) & 0x80) | (0x00 & (*p1 + 4 == *p2 + 4));\n        pdiff[5] = (~(*p1 + 5 == *p2 + 5) & 0x80) | (0x00 & (*p1 + 5 == *p2 + 5));\n        pdiff[6] = (~(*p1 + 6 == *p2 + 6) & 0x80) | (0x00 & (*p1 + 6 == *p2 + 6));\n        pdiff[7] = (~(*p1 + 7 == *p2 + 7) & 0x80) | (0", "undefined * func0(long param_1,int param_2)\n{\n  size_t sVar1;\n  int local_1c;\n  int local_18;\n  undefined *local_10;\n  \n  local_10 = &DAT_00102008;\n  local_1c = 0;\n  for (local_18 = 0; local_18 < param_2; local_18++) {\n    sVar1 = strlen(*(char **)(param_1 + local_18 * 8));\n    if (local_1c < (int)sVar1) {\n      local_10 = *(undefined **)(param_1 + local_18 * 8);\n      local_1c = (int)sVar1;\n    }\n  }\n  return local_10;\n}", "char *func0(char **param_1,int param_2) {\n  char *longest_str = \"\";\n  int max_len = 0;\n  for (int i = 0; i < param_2; i++) {\n    char *str = param_1[i];\n    int len = 0;\n    while (*str!= '\\0') {\n      str++;\n      len++;\n    }\n    if (len > max_len) {\n      max_len = len;\n      longest_str = param_1[i];\n    }\n  }\n  return longest_str;\n}", "char *func0(char **param_1,int param_2) {\n  char *max_str = \"\";\n  int max_len = 0;\n  for (int i = 0; i < param_2; i++) {\n    char *str = param_1[i];\n    int len = strlen(str);\n    if (len > max_len) {\n      max_str = str;\n      max_len = len;\n    }\n  }\n  return max_str;\n}", "char *func0(char **param_1,int param_2) {\n  if (param_2 <= 0) return \"\";\n  char *max_str = \"\";\n  for (int i = 0; i < param_2; i++) {\n    char *str = param_1[i];\n    if (strlen(str) > strlen(max_str)) max_str = str;\n  }\n  return max_str;\n}", "int gcd(int a, int b) {\n  int r;\n  while (b!= 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return a;\n}", "int gcd(int a, int b) {\n  int r;\n  while (b!= 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return a;\n}", "int gcd(int a, int b) {\n  while (b!= 0) {\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}", "int gcd(int a, int b) {\n  while (b!= 0) {\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}", "int func0(char *param_1,int *param_2) {\n  int length = strlen(param_1);\n  char *str = malloc((length + 1) * sizeof(char));\n  *str = '\\0';\n  char **array = malloc(length * sizeof(char *));\n  for (int i = 0; i < length; i++) {\n    str = realloc(str, (strlen(str) + 2) * sizeof(char));\n    str[strlen(str) - 1] = param_1[i];\n    str[strlen(str)] = '\\0';\n    array[i] = malloc((strlen(str) + 1) * sizeof(char));\n    strcpy(array[i], str);\n  }\n  free(str);\n  *param_2 = length;\n  return array;\n}", "char *func0(char *param_1, int *param_2) {\n  int len = 0;\n  char *str = param_1;\n  char *result = NULL;\n  char *temp = NULL;\n  int i;\n\n  while (*str!= '\\0') {\n    len++;\n    str++;\n  }\n\n  result = malloc(len * sizeof(char));\n  *result = '\\0';\n\n  if (len > 0) {\n    for (i = 0; i < len; i++) {\n      temp = realloc(result, (i + 1) * sizeof(char));\n      if (temp == NULL) {\n        free(result);\n        return NULL;\n      }\n      result = temp;\n      result[i] = param_1[len - i - 1];\n    }\n  }\n\n  for (i = 0; i < len; i++) {\n    temp = malloc(len - i);\n    *(char **)((long)result + i * sizeof(char *)) = temp;\n    strcpy(temp, result);\n  }\n\n  *param_2 = len;\n  return result;\n}", "void *func0(char *param_1, int *param_2) {\n    size_t len = strlen(param_1);\n    int i;\n    void **array = malloc(len * 8);\n    uint *hash_table = malloc((len + 1) * sizeof(uint));\n    hash_table[0] = 0;\n    for (i = 1; i <= len; i++) {\n        uint hash = *hash_table + 0xfefefeff & ~*hash_table;\n        uint value = hash & 0x80808080;\n        if (value == 0) {\n            hash = hash >> 0x10;\n        }\n        uint offset = (hash & 0x8080) == 0? hash >> 0x10 : 0;\n        uint *ptr = hash_table + offset;\n        uint *next = ptr + 1;\n        while (*next & 0x80808080) {\n            next++;\n        }\n        uint *new_ptr = realloc(hash_table, (next - hash_table + 2) * sizeof(uint));\n        hash_table = new_ptr;\n        *hash_table = 0;\n        *hash_table = (uint)param_1[i - 1];\n        hash_table[next] = 0;\n        array[i - 1] = malloc((next - hash_table + 1) * sizeof(uint));\n        memcpy(array[i - 1], hash_table, (next - hash_table + 1) * sizeof(uint));\n    }\n    free(hash_table);\n    *param_2 = len;\n    return array;\n}", "void *func0(char *param_1, int *param_2) {\n    size_t len = strlen(param_1);\n    int i;\n    void **array = malloc(len * 8);\n    uint *hash_table = malloc((len + 1) * sizeof(uint));\n    hash_table[0] = 0;\n    for (i = 1; i <= len; i++) {\n        uint hash = *hash_table + 0xfefefeff & ~*hash_table;\n        uint value = hash & 0x80808080;\n        if (value == 0) {\n            hash = hash >> 0x10;\n        }\n        uint offset = (hash & 0x8080) == 0? hash >> 0x10 : 0;\n        uint *ptr = hash_table + offset;\n        uint *next = ptr + 1;\n        while (*next & 0x80808080) {\n            next++;\n        }\n        uint *new_ptr = realloc(hash_table, (next - hash_table + 2) * sizeof(uint));\n        hash_table = new_ptr;\n        *hash_table = 0;\n        *hash_table = (uint)param_1[i - 1];\n        hash_table[next] = 0;\n        array[i - 1] = malloc((next - hash_table + 1) * sizeof(uint));\n        memcpy(array[i - 1], hash_table, (next - hash_table + 1) * sizeof(uint));\n    }\n    free(hash_table);\n    *param_2 = len;\n    return array;\n}", "char *func0(int param_1) {\n  int i;\n  char *str;\n  int len = 2;\n  for (int i = 1; i <= param_1; i++) {\n    len += snprintf(NULL, 0, \" %d\", (unsigned long)i);\n  }\n  str = malloc(len);\n  if (!str) {\n    return NULL;\n  }\n  sprintf(str, \"0\");\n  char *ptr = str + strlen(str);\n  for (int i = 1; i <= param_1; i++) {\n    sprintf(ptr, \" %d\", (unsigned long)i);\n    ptr += strlen(ptr);\n  }\n  return str;\n}", "undefined2 *func0(int param_1) {\n  if (param_1 < 1) {\n    return malloc(2);\n  }\n  else {\n    char *buf = malloc(param_1 * 4);\n    if (buf!= NULL) {\n      sprintf(buf, \"%d\", DAT_00102004);\n      return (undefined2 *)buf;\n    }\n  }\n  return NULL;\n}", "undefined2 *func0(int param_1) {\n  if (param_1 < 1) {\n    return (undefined2 *)malloc(2);\n  }\n  else {\n    int i = 1;\n    char *buf = (char *)malloc(param_1 * 2);\n    if (buf!= NULL) {\n      sprintf(buf, \"%s\", DAT_00102004);\n      return (undefined2 *)buf;\n    }\n  }\n  return NULL;\n}", "undefined2 *func0(int param_1) {\n  if (param_1 < 1) {\n    return (undefined2 *)malloc(2);\n  }\n  else {\n    int i = 1;\n    char *buf = (char *)malloc(param_1 * 2);\n    if (buf!= NULL) {\n      sprintf(buf, \"%s\", DAT_00102004);\n      return (undefined2 *)buf;\n    }\n  }\n  return NULL;\n}", "int func0(char* param_1) {\n  int i;\n  int count = 0;\n  int* table = (int*)malloc(256 * sizeof(int));\n  for (i = 0; i < 256; i++) {\n    table[i] = 0;\n  }\n  for (i = 0; param_1[i]!= '\\0'; i++) {\n    int c = tolower(param_1[i]);\n    if (table[c] == 0 && isalnum(c)) {\n      table[c] = 1;\n      count++;\n    }\n  }\n  free(table);\n  return count;\n}", "int func0(byte *param_1) {\n  int result = 0;\n  ushort *ctype_b = __ctype_b_loc();\n  int *ctype_tolower = __ctype_tolower_loc();\n  for (byte *p = param_1; *p!= 0; p++) {\n    int c = *ctype_tolower[*p];\n    if (c!= 0 && (*(ctype_b + (c & 0xff) * 2 + 1) & 4)!= 0) {\n      result++;\n    }\n  }\n  return result;\n}", "int func0(char *param_1) {\n  int bVar1 = *param_1;\n  int iVar2;\n  int *p_Var3;\n  int **pp_Var4;\n  int *ppuVar5;\n  int lVar6;\n  int *puVar7;\n  int iVar8;\n  int in_FS_OFFSET = *(int *)(in_FS_OFFSET + 4);\n  int local_30 = in_FS_OFFSET;\n  int auStack_438[129];\n  int *puVar7_ptr = auStack_438;\n  int local_30_copy = local_30;\n  \n  for (lVar6 = 128; lVar6!= 0; lVar6--) {\n    *puVar7_ptr = 0;\n    puVar7_ptr++;\n  }\n  if (bVar1 == 0) {\n    iVar8 = 0;\n  }\n  else {\n    pp_Var4 = __ctype_tolower_loc();\n    param_1++;\n    iVar8 = 0;\n    p_Var3 = *pp_Var4;\n    while (bVar1!= 0) {\n      int uVar2 = p_Var3[bVar1];\n      lVar6 = (int)(char)uVar2;\n      if (*(int *)((long)auStack_438 + lVar6 * 4) == 0) {\n        ppuVar5 = __ctype_b_loc();\n        if ((*(char *)((long)*ppuVar5 + (int)(uVar2 & 0xff) * 2 + 1) & 4)!= 0) {\n          *(int *)((long)auStack_438 + lVar6 * 4) = 1;\n          iVar8++;\n        }\n      }\n      bVar1 = *param_1;\n      param_1++;\n    }\n  }\n  if (local_30_copy == local_30) {\n    return iVar8;\n  }\n  else {\n    return -1;\n  }\n}", "int func0(char *param_1) {\n  int bVar1 = *param_1;\n  int iVar2;\n  int *p_Var3;\n  int **pp_Var4;\n  int *ppuVar5;\n  int lVar6;\n  int *puVar7;\n  int iVar8;\n  int in_FS_OFFSET = *(int *)(in_FS_OFFSET + 4);\n  int local_30 = in_FS_OFFSET;\n  int auStack_438[129];\n  int *puVar7_ptr = auStack_438;\n  int local_30_copy = local_30;\n  \n  for (lVar6 = 128; lVar6!= 0; lVar6--) {\n    *puVar7_ptr = 0;\n    puVar7_ptr++;\n  }\n  if (bVar1 == 0) {\n    iVar8 = 0;\n  }\n  else {\n    pp_Var4 = __ctype_tolower_loc();\n    param_1++;\n    iVar8 = 0;\n    p_Var3 = *pp_Var4;\n    while (bVar1!= 0) {\n      int uVar2 = p_Var3[bVar1];\n      lVar6 = (int)(char)uVar2;\n      if (*(int *)((long)auStack_438 + lVar6 * 4) == 0) {\n        ppuVar5 = __ctype_b_loc();\n        if ((*(char *)((long)*ppuVar5 + (int)(uVar2 & 0xff) * 2 + 1) & 4)!= 0) {\n          *(int *)((long)auStack_438 + lVar6 * 4) = 1;\n          iVar8++;\n        }\n      }\n      bVar1 = *param_1;\n      param_1++;\n    }\n  }\n  if (local_30_copy == local_30) {\n    return iVar8;\n  }\n  else {\n    return -1;\n  }\n}", "int process_string(char *str, int *result) {\n    int capacity = 0;\n    int size = 0;\n    int index = 0;\n    int* data = NULL;\n    char* temp = strdup(str);\n    char* ptr = temp;\n\n    while (*ptr!= '\\0') {\n        if (*ptr =='') {\n            if (strcmp(\"o\", temp + index) == 0) {\n                if (size == capacity) {\n                    if (capacity < 1) {\n                        capacity = 4;\n                    } else {\n                        capacity *= 2;\n                    }\n                    data = realloc(data, capacity * sizeof(int));\n                }\n                data[size] = 4;\n                size++;\n            } else if (strcmp(\"o|\", temp + index) == 0) {\n                if (size == capacity) {\n                    if (capacity < 1) {\n                        capacity = 4;\n                    } else {\n                        capacity *= 2;\n                    }\n                    data = realloc(data, capacity * sizeof(int));\n                }\n                data[size] = 2;\n                size++;\n            } else if (strcmp(\"|\", temp + index) == 0) {\n                if (size == capacity) {\n                    if (capacity < 1) {\n                        capacity = 4;\n                    } else {\n                        capacity *= 2;\n                    }\n                    data = realloc(data, capacity * sizeof(int));\n                }\n                data[size] = 1;\n                size++;\n            }\n            index = index + 2;\n        } else {\n            if (size < 2) {\n                temp[index + 1] = *ptr;\n                temp[index + 2] = '\\0';\n            }\n        }\n        ptr++;\n    }\n\n    free(temp);\n    *result = size;\n    return data;\n}", "char *func0(char *param_1, uint *param_2) {\n    char *dest = malloc(strlen(param_1) + 1);\n    strcpy(dest, param_1);\n    uint i = strlen(param_1);\n    uint j = 0;\n    uint k = 0;\n    uint l = 0;\n    uint m = 0;\n    uint n = 0;\n    uint o = 0;\n    uint p = 0;\n    uint q = 0;\n    uint r = 0;\n    uint s = 0;\n    uint t = 0;\n    uint u = 0;\n    uint v = 0;\n    uint w = 0;\n    uint x = 0;\n    uint y = 0;\n    uint z = 0;\n    uint a = 0;\n    uint b = 0;\n    uint c = 0;\n    uint d = 0;\n    uint e = 0;\n    uint f = 0;\n    uint g = 0;\n    uint h = 0;\n    uint i = 0;\n    uint j = 0;\n    uint k = 0;\n    uint l = 0;\n    uint m = 0;\n    uint n = 0;\n    uint o = 0;\n    uint p = 0;\n    uint q = 0;\n    uint r = 0;\n    uint s = 0;\n    uint t = 0;\n    uint u = 0;\n    uint v = 0;\n    uint w = 0;\n    uint x = 0;\n    uint y = 0;\n    uint z = 0;\n    uint a = 0;\n    uint b = 0;\n    uint c = 0;\n    uint d = 0;\n    uint e = 0;\n    uint f = 0;\n    uint g = 0;\n    uint h = 0;\n    uint i = 0;\n    uint j = 0;\n    uint k = 0;\n    uint l = 0;\n    uint m = 0;\n    uint n = 0;\n    uint o = 0;\n    uint p = 0;\n    uint q = 0;\n    uint r = 0;\n    uint s = 0;\n    uint t = 0;\n    uint u = 0;\n    uint v = 0;\n    uint w = 0;\n   ", "void *func0(char *param_1,int *param_2) {\n  char cVar1;\n  size_t n;\n  char *dest;\n  long lVar2;\n  void *ptr;\n  char *pcVar3;\n  size_t sVar4;\n  int iVar5;\n  int local_5c;\n  char local_43[3];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  memset(local_43, 0, 3);\n  n = strlen(param_1);\n  dest = (char *)malloc(n + 2);\n  memcpy(dest, param_1, n);\n  dest[n] = 0x20;\n  if (n + 1 < 1) {\n    iVar5 = 0;\n    ptr = NULL;\n  }\n  else {\n    local_5c = 0;\n    iVar5 = 0;\n    ptr = NULL;\n    pcVar3 = dest;\n    while (pcVar3!= dest + n + 1) {\n      cVar1 = *pcVar3;\n      while (cVar1 =='') {\n        if (local_43[0] == 'o' && local_43[1] == '\\0') {\n          if (local_5c == iVar5) {\n            if (local_5c == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = local_5c * 2;\n              sVar4 = local_5c << 2;\n            }\n            ptr = realloc(ptr, sVar4);\n          }\n          lVar2 = iVar5;\n          iVar5++;\n          *(int *)((long)ptr + lVar2 * 4) = 4;\n        }\n        else if (local_43[0] == 'o' && local_43[1] == '|' && local_43[2] == '\\0') {\n          if (iVar5 == local_5c) {\n            if (iVar5 == 0) {\n              local_5c = 4;\n              sVar4 = 0x10;\n            }\n            else {\n              local_5c = iVar5 * 2;\n              sVar4 = local_5c << 2;\n            }\n            ptr = realloc(ptr, sVar4);\n          }\n", "void* func0(char* param_1, int* param_2) {\n    int local_5c = 0;\n    int iVar5 = 0;\n    void* __ptr = NULL;\n    char* pcVar3 = param_1;\n    char local_43[3] = {0};\n    size_t __n = strlen(param_1);\n    char* __dest = (char*)malloc(__n + 2);\n    memcpy(__dest, param_1, __n);\n    __dest[__n] = 0x20;\n    if (__n + 1 < 1) {\n        iVar5 = 0;\n        __ptr = NULL;\n    } else {\n        while (pcVar3!= __dest + __n) {\n            char cVar1 = *pcVar3;\n            if (cVar1 =='') {\n                if (local_43[0] == 'o' && local_43[1] == '\\0') {\n                    if (local_5c == iVar5) {\n                        if (local_5c == 0) {\n                            local_5c = 4;\n                        } else {\n                            local_5c = local_5c * 2;\n                        }\n                        __ptr = realloc(__ptr, local_5c * 4);\n                    }\n                    iVar5++;\n                    *(int*)((long)__ptr + iVar5 * 4) = 4;\n                } else if (local_43[0] == 'o' && local_43[1] == '|' && local_43[2] == '\\0') {\n                    if (iVar5 == local_5c) {\n                        if (iVar5 == 0) {\n                            local_5c = 4;\n                        } else {\n                            local_5c = iVar5 * 2;\n                        }\n                        __ptr = realloc(__ptr, local_5c * 4);\n                    }\n                    iVar5++;\n                    *(int*)((long)__ptr + iVar5 * 4) = 2;\n                } else if (local_43[0] == '.' && local_43[1] == '|' && local_43[2] == '\\0') {\n                    if (iVar5 == local_5c) {\n                        if (iVar5 == 0) {\n                            local_5c = 4;\n                        } else {\n                            local_5c = iVar5 * 2;\n                        }\n                        __ptr = realloc", "int count_substring(char *str, char *substr) {\n  int len_str = strlen(str);\n  int len_substr = strlen(substr);\n  int count = 0;\n  for (int i = 0; i <= len_str - len_substr; i++) {\n    if (strncmp(str + i, substr, len_substr) == 0) {\n      count++;\n    }\n  }\n  return count;\n}", "ulong func0(char *param_1, char *param_2) {\n  int len1 = 0;\n  int len2 = 0;\n  int i;\n  ulong result = 0;\n  \n  len1 = strlen(param_1);\n  len2 = strlen(param_2);\n  \n  for (i = 0; i < len2; i++) {\n    if (param_1[i]!= param_2[i]) {\n      result = 1;\n      break;\n    }\n  }\n  \n  return result;\n}", "ulong func0(char *param_1, char *param_2) {\n  size_t len1 = strlen(param_1);\n  size_t len2 = strlen(param_2);\n  int diff = len1 - len2;\n  if (diff < 0) return 0;\n  int match = 0;\n  for (char *p = param_1; p < param_1 + len1 - len2; p++) {\n    if (strncmp(p, param_2, len2) == 0) match++;\n  }\n  return (ulong)match;\n}", "ulong func0(char *param_1, char *param_2) {\n  size_t len1 = strlen(param_1);\n  size_t len2 = strlen(param_2);\n  int diff = len1 - len2;\n  if (diff < 0) return 0;\n  int match = 1;\n  for (char *p = param_1; p < param_1 + len2; p++) {\n    if (*p!= *param_2) {\n      match = 0;\n      break;\n    }\n  }\n  return match;\n}", "char* func0(char* param_1) {\n  int i;\n  int count[10] = {0};\n  char* words[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  char buffer[1024];\n  int index = 0;\n  int len = 0;\n  int j;\n  int k;\n  int space_pos = 0;\n  char c;\n\n  for (i = 0; i < 10; i++) {\n    for (j = 0; words[i][j]!= '\\0'; j++) {\n      buffer[index] = words[i][j];\n      index++;\n    }\n    buffer[index] ='';\n    index++;\n  }\n  buffer[index] = '\\0';\n\n  while (1) {\n    c = *param_1;\n    if (c == '\\0') {\n      for (i = 0; i < 10; i++) {\n        for (j = 0; j < count[i]; j++) {\n          for (k = 0; k < strlen(words[i]); k++) {\n            buffer[index] = words[i][k];\n            index++;\n          }\n          buffer[index] ='';\n          index++;\n        }\n      }\n      if (index == 0) {\n        buffer[0] = '\\0';\n      } else {\n        buffer[index - 1] = '\\0';\n      }\n      return buffer;\n    }\n    for (i = 0; (param_1[i]!='' && (param_1[i]!= '\\0')); i++) {\n      space_pos = i;\n    }\n    for (i = 0; i < 10; i++) {\n      if (strcmp(param_1, words[i]) == 0) {\n        count[i]++;\n        break;\n      }\n    }\n    param_1 += space_pos + 1;\n  }\n}", "char *func0(byte *param_1) {\n  int i;\n  char *str;\n  char *arr[10] = {\"zero\", &DAT_00102009, &DAT_0010200d, \"three\", &DAT_00102017, &DAT_0010201c, &DAT_00102021, \"seven\", \"eight\", \"nine\"};\n  char buf[7];\n  int count[10] = {0};\n  int j;\n  int k;\n  int len;\n  int idx;\n  int found;\n  int i2;\n  int i3;\n  int i4;\n  int i5;\n  int i6;\n  int i7;\n  int i8;\n  int i9;\n  int i10;\n  int i11;\n  int i12;\n  int i13;\n  int i14;\n  int i15;\n  int i16;\n  int i17;\n  int i18;\n  int i19;\n  int i20;\n  int i21;\n  int i22;\n  int i23;\n  int i24;\n  int i25;\n  int i26;\n  int i27;\n  int i28;\n  int i29;\n  int i30;\n  int i31;\n  int i32;\n  int i33;\n  int i34;\n  int i35;\n  int i36;\n  int i37;\n  int i38;\n  int i39;\n  int i40;\n  int i41;\n  int i42;\n  int i43;\n  int i44;\n  int i45;\n  int i46;\n  int i47;\n  int i48;\n  int i49;\n  int i50;\n  int i51;\n  int i52;\n  int i53;\n  int i54;\n  int i55;\n  int i56;\n  int i57;\n  int i58;\n  int i59;\n  int i60;\n  int i61;\n  int i62;\n  int i63;\n  int i64;\n  int i65;\n  int i66;\n  int i67;\n  int i68;\n  int i69;\n  int i70;\n  int i71;\n  int i72;\n  int i73;\n  int i74;\n  int i75;\n  int i76;\n  int i77;\n  int i78;\n  int i79;\n  int i80;\n ", "char *func0(byte *param_1) {\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  long lVar4;\n  byte bVar5;\n  char *pcVar8;\n  int iVar7;\n  char *local_d0;\n  int aiStack_c4[3];\n  char *local_98[10];\n  byte local_47[7];\n  long local_40;\n  local_40 = *(long *)(0x28 + 0x28);\n  local_98[0] = \"zero\";\n  local_98[1] = \"one\";\n  local_98[2] = \"two\";\n  local_98[3] = \"three\";\n  local_98[4] = \"four\";\n  local_98[5] = \"five\";\n  local_98[6] = \"six\";\n  local_98[7] = \"seven\";\n  local_98[8] = \"eight\";\n  local_98[9] = \"nine\";\n  if (param_1[0] == 0) {\n    int i;\n    for (i = 0; i < 10; i++) {\n      (&DAT_0010403f)[i] = local_98[i][0];\n    }\n    return DAT_0010403f;\n  }\n  local_d0 = \"zero\";\n  while ((param_1[0] & 0xdf)!= 0) {\n    local_47[1] = param_1[0];\n    param_1++;\n    local_47[0] = param_1[0];\n  }\n  int j;\n  for (j = 0; j < 7; j++) {\n    local_47[j + 1] = 0;\n  }\n  for (j = 0; j < 10; j++) {\n    if (strcmp(local_47 + 1, local_98[j]) == 0) {\n      break;\n    }\n    if (j == 9) {\n      return NULL;\n    }\n  }\n  int k;\n  for (k = 0; k < 10; k++) {\n    if (strcmp(local_47 + 1, local_98[k]) == 0) {\n      break;\n    }\n  }\n  for (k = 0; k < 10; k++) {\n    if (strcmp(local_47 +", "int func0(char *param_1) {\n  char *local_98[10];\n  char local_46[6];\n  int local_c8[40];\n  int local_b8[4];\n  int auStack_b4[4];\n  int uStack_b0[4];\n  int uStack_c0[4];\n  int local_a8[4];\n  int iVar7;\n  int iVar5;\n  int iVar11;\n  int iVar9;\n  int lVar9;\n  int lVar12;\n  int lVar10;\n  int lVar8;\n  int iVar6;\n  int iVar4;\n  int iVar3;\n  int iVar2;\n  int iVar1;\n  int iVar0;\n  int i;\n  int j;\n  int k;\n  int n;\n  int m;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int a;\n  int b;\n  int c;\n  int d;\n  int e;\n  int f;\n  int g;\n  int h;\n  int i2;\n  int j2;\n  int k2;\n  int l2;\n  int m2;\n  int n2;\n  int o2;\n  int p2;\n  int q2;\n  int r2;\n  int s2;\n  int t2;\n  int u2;\n  int v2;\n  int w2;\n  int x2;\n  int y2;\n  int z2;\n  int a2;\n  int b2;\n  int c2;\n  int d2;\n  int e2;\n  int f2;\n  int g2;\n  int h2;\n  int i3;\n  int j3;\n  int k3;\n  int l3;\n  int m3;\n  int n3;\n  int o3;\n  int p3;\n  int q3;\n  int r3;\n  int s3;\n  int t3;\n  int u3;\n  int v3;\n  int w3;\n  int x3;\n  int y3;\n  int z3;\n  int a3;\n  int b3;\n  int c3;\n  int d3;\n  int e3;\n  int f3;\n  int g3;\n  int h3;\n", "float func0(float *param_1,int param_2,float *param_3)\n{\n  float fVar1;\n  float local_1c = DAT_001020c0;\n  int local_18;\n  int local_14;\n  \n  *param_3 = *param_1;\n  param_3[1] = param_1[1];\n  for (local_18 = 0; local_18 < param_2; local_18++) {\n    for (local_14 = local_18 + 1; local_14 < param_2; local_14++) {\n      fVar1 = (float)((uint)(param_1[local_18] - param_1[local_14]) & DAT_001020d0);\n      if (fVar1 < local_1c) {\n        *param_3 = param_1[local_18];\n        param_3[1] = param_1[local_14];\n        local_1c = fVar1;\n      }\n    }\n  }\n  if (param_3[1] < *param_3) {\n    fVar1 = *param_3;\n    *param_3 = param_3[1];\n    param_3[1] = fVar1;\n  }\n  return local_1c;\n}", "float* func0(float* param_1, int param_2, float* param_3) {\n  uint uVar1 = DAT_001020e0;\n  float fVar6 = DAT_001020b4;\n  float fVar5;\n  float fVar6Best = *param_3;\n  float fVar6BestIndex = param_3[1];\n\n  if (param_2 > 0) {\n    for (int i = 1; i <= param_2; i++) {\n      fVar5 = (float)((uint)(*param_1 - param_1[i - 1]) & uVar1);\n      if (fVar5 < fVar6) {\n        *param_3 = *param_1;\n        param_3[1] = param_1[i - 1];\n        fVar6 = fVar5;\n        fVar6Best = *param_3;\n        fVar6BestIndex = param_3[1];\n      }\n      param_1++;\n    }\n  }\n\n  if (param_3[1] < fVar6Best) {\n    *param_3 = param_3[1];\n    param_3[1] = fVar6Best;\n  }\n\n  return param_3;\n}", "float func0(float *param_1,int param_2,float *param_3)\n{\n  uint uVar1 = DAT_001020e0;\n  float fVar7 = *param_1;\n  *param_3 = fVar7;\n  float fVar6 = param_1[1];\n  param_3[1] = fVar6;\n  if (param_2 > 0) {\n    for (int i = 1; i < param_2; i++) {\n      float fVar8 = (float)((uint)(param_1[i] - param_1[0]) & uVar1);\n      if (fVar8 < fVar7) {\n        *param_3 = param_1[i];\n        param_3[1] = param_1[0];\n        fVar7 = fVar8;\n      }\n    }\n  }\n  if (fVar6 < fVar7) {\n    *param_3 = fVar6;\n    param_3[1] = fVar7;\n  }\n  return *param_3;\n}", "float func0(float *param_1,int param_2,float *param_3)\n{\n  uint uVar1 = DAT_001020e0;\n  float fVar6 = *param_1;\n  *param_3 = fVar6;\n  float fVar5 = param_1[1];\n  param_3[1] = fVar5;\n  if (param_2 > 0) {\n    if (param_2!= 1) {\n      for (int i = 1; i < param_2; i++) {\n        float diff = (*param_1 - param_1[i]) & uVar1;\n        if (diff < fVar6) {\n          *param_3 = param_1[i];\n          param_3[1] = param_1[i + 1];\n          fVar6 = diff;\n        }\n      }\n    }\n    fVar6 = *param_3;\n    fVar5 = param_3[1];\n  }\n  if (fVar5 < fVar6) {\n    *param_3 = fVar5;\n    param_3[1] = fVar6;\n  }\n  return *param_3;\n}", "float func0(float *param_1,int param_2)\n{\n  float min_val = param_1[0];\n  float max_val = param_1[0];\n  \n  for (int i = 1; i < param_2; i++) {\n    if (param_1[i] < min_val) {\n      min_val = param_1[i];\n    }\n    if (param_1[i] > max_val) {\n      max_val = param_1[i];\n    }\n  }\n  \n  for (int i = 0; i < param_2; i++) {\n    param_1[i] = (param_1[i] - min_val) / (max_val - min_val);\n  }\n  \n  return 0.0f;\n}", "float func0(float *param_1,int param_2)\n{\n  float fVar5 = *param_1;\n  float fVar6 = fVar5;\n  if (param_2 > 1) {\n    for (int i = 1; i < param_2; i++) {\n      float fVar1 = param_1[i];\n      float fVar2 = fVar1;\n      if (fVar6 <= fVar1) {\n        fVar2 = fVar6;\n      }\n      fVar6 = fVar2;\n      if (fVar1 <= fVar5) {\n        fVar1 = fVar5;\n      }\n      fVar5 = fVar1;\n    }\n    for (int i = 0; i < param_2; i++) {\n      param_1[i] = (param_1[i] - fVar6) / (fVar5 - fVar6);\n    }\n  } else if (param_2 == 1) {\n    *param_1 = (*param_1 - fVar5) / (fVar5 - fVar5);\n  }\n  return fVar5;\n}", "float func0(float *param_1,int param_2)\n{\n  float fVar5 = *param_1;\n  float fVar6 = fVar5;\n  float fVar7 = fVar5;\n  if (param_2 < 2) {\n    if (param_2!= 1) {\n      return 0.0f;\n    }\n  }\n  else {\n    for (int i = 1; i < param_2; i++) {\n      float fVar1 = param_1[i];\n      fVar6 = (fVar1 <= fVar6)? fVar6 : fVar1;\n      fVar7 = (fVar7 <= fVar1)? fVar7 : fVar1;\n    }\n  }\n  for (int i = 0; i < param_2; i++) {\n    param_1[i] = (fVar5 - fVar7) / (fVar6 - fVar7);\n  }\n  return 0.0f;\n}", "float func0(undefined *param_1, uint param_2) {\n  float fVar1, fVar2, fVar10, fVar11;\n  int iVar3;\n  float *pfVar4;\n  uint uVar7;\n  float fVar12;\n\n  fVar10 = *(float *)param_1;\n  if (param_2 < 2) {\n    if (param_2!= 1) {\n      return 0.0f;\n    }\n    *(float *)param_1 = 0.0f;\n    return 0.0f;\n  }\n  pfVar4 = (float *)(param_1 + 4);\n  fVar11 = fVar10;\n  do {\n    fVar1 = *pfVar4;\n    pfVar4 = pfVar4 + 1;\n    fVar2 = fVar1;\n    if (fVar1 <= fVar11) {\n      fVar2 = fVar11;\n    }\n    fVar11 = fVar2;\n    if (fVar10 <= fVar1) {\n      fVar1 = fVar10;\n    }\n    fVar10 = fVar1;\n  } while (pfVar4!= (float *)(param_1 + (param_2 - 2) * 4 + 8));\n  fVar11 = fVar11 - fVar10;\n  uVar7 = 1;\n  if (param_2 > 0) {\n    uVar7 = param_2;\n  }\n  if (param_2 < 4) {\n    iVar3 = 1;\n    *(float *)param_1 = (*(float *)param_1 - fVar10) / fVar11;\n  }\n  else {\n    do {\n      *(float *)(param_1 + (iVar3 + 1) * 4) = (*(float *)(param_1 + (iVar3 + 1) * 4) - fVar10) / fVar11;\n      iVar3 = iVar3 + 4;\n    } while (iVar3 < uVar7);\n  }\n  return 0.0f;\n}", "int* func0(char* str, int* count) {\n  int i = 0;\n  int num = 0;\n  char* token = str;\n  char* end_token;\n\n  while (*token!= '\\0') {\n    while ((*token!= '\\0' && (*token!= '-' && (*token!= ',')) && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token!= ','))) && \n           (*token!= '\\0' && (*token!='')) && \n           (*token!= '\\0' && (*token!= '\\0' && (*token", "int* func0(char* str, int* count) {\n  int i = 0;\n  int* out = (int*)malloc(1024 * sizeof(int)); // assuming max 1024 elements\n  int* p = out;\n  while (*str!= '\\0') {\n    if (*str!= '-') {\n      if (isalnum(*str)) {\n        str++;\n      } else {\n        char* endptr;\n        long num = strtol(str, &endptr, 10);\n        if (endptr == str) {\n          str++;\n          continue;\n        }\n        if (*endptr == ',' || *endptr == '\\0') {\n          *p = (int)num;\n          p++;\n          i++;\n        } else {\n          while (*endptr!= ',' && *endptr!= '\\0') {\n            endptr++;\n          }\n        }\n        str = endptr;\n      }\n    } else {\n      str++;\n    }\n  }\n  *count = i;\n  return out;\n}", "int* func0(char* str, int* count) {\n  int i = 0;\n  int num;\n  char* token;\n  char* end;\n  const unsigned short* ctype = __ctype_b_loc();\n  const unsigned short* p = *ctype;\n\n  while (*str!= '\\0') {\n    while (((p[*str * 2 + 1] & 8)!= 0 || *str == '-') && *str!= '\\0') {\n      num = strtol(str, &end, 10);\n      if (end == str) {\n        str++;\n        continue;\n      }\n      if (*end == ',' || *end == '\\0') {\n        (*count)++;\n        (&out_3498)[i] = num;\n        str = end;\n        i++;\n      } else {\n        while (*str!= ',' && *str!= '\\0') {\n          str++;\n        }\n      }\n    }\n    str++;\n  }\n  *count = i;\n  if (__stack_chk_guard!= *(long*)(0x28)) {\n    __stack_chk_fail();\n  }\n  return &out_3498;\n}", "int* func0(char* str, int* count) {\n  int i = 0;\n  int num;\n  char* token;\n  char* end;\n  const unsigned short* ctype = __ctype_b_loc();\n  const unsigned short* p = *ctype;\n\n  while (*str!= '\\0') {\n    while (((p[*str * 2 + 1] & 8)!= 0 || *str == '-') && *str!= '\\0') {\n      num = strtol(str, &end, 10);\n      if (end == str) {\n        str++;\n        continue;\n      }\n      if (*end == ',' || *end == '\\0') {\n        (*count)++;\n        (&out_3498)[i] = num;\n        str = end;\n        i++;\n      } else {\n        while (*str!= ',' && *str!= '\\0') {\n          str++;\n        }\n      }\n    }\n    str++;\n  }\n  *count = i;\n  if (__stack_chk_guard!= *(long*)(0x28)) {\n    __stack_chk_fail();\n  }\n  return &out_3498;\n}", "int func0(long param_1) {\n  int local_c = 0;\n  while (*(char *)(param_1 + local_c)!= '\\0') {\n    local_c++;\n  }\n  return local_c;\n}", "ulong func0(char *param_1) {\n  if (*param_1 == '\\0') return 0;\n  ulong len = 1;\n  while (*param_1!= '\\0') {\n    len++;\n    param_1++;\n  }\n  return len;\n}", "ulong func0(char *param_1) {\n  if (*param_1) {\n    ulong len = strlen(param_1);\n    return len;\n  }\n  return 0;\n}", "ulong func0(char *param_1) {\n  if (*param_1) {\n    ulong len = strlen(param_1);\n    return len;\n  }\n  return 0;\n}", "int func0(int param_1, int param_2, unsigned long param_3) {\n  unsigned long uVar1;\n  int local_c = 2;\n  \n  while (param_1 < local_c * local_c) {\n    uVar1 = 1;\n    param_3 = param_3;\n    return param_3 | (uVar1 << 56);\n  }\n  \n  while (true) {\n    param_3 = param_1 % local_c;\n    if (param_1 % local_c == 0) {\n      uVar1 = param_1 / local_c;\n      param_3 = param_1 % local_c;\n      return param_3 | (uVar1 << 56);\n    }\n    local_c++;\n  }\n}", "int func0(uint param_1, uint param_2, ulong param_3) {\n  int iVar1;\n  uint auVar2[16];\n  uint auVar3[16];\n  uint auVar4[16];\n\n  if (param_1 < 4) {\n    auVar4[0] = param_3;\n    auVar4[1] = 1;\n    return auVar4[0] | (auVar4[1] << 8);\n  }\n  if (param_1 & 1) {\n    iVar1 = 2;\n  }\n  else {\n    iVar1 = 2;\n    do {\n      iVar1++;\n      if (param_1 < iVar1 * iVar1) {\n        auVar3[0] = param_3;\n        auVar3[1] = 1;\n        return auVar3[0] | (auVar3[1] << 8);\n      }\n      param_3 = (uint)(param_1 % iVar1);\n    } while (param_1 % iVar1!= 0);\n  }\n  auVar2[0] = (uint)(param_1 / iVar1);\n  auVar2[1] = (uint)(param_1 % iVar1);\n  return auVar2[0] | (auVar2[1] << 8);\n}", "int func0(uint param_1, uint param_2, ulong param_3) {\n  int iVar1 = 2;\n  uint uVar2 = param_1 & 1;\n  while (iVar1 * iVar1 <= param_1) {\n    if (uVar2 == 0) {\n      uint result = param_1 / iVar1;\n      uint remainder = param_1 % iVar1;\n      return (result << 8) | remainder;\n    }\n    iVar1++;\n    uVar2 = (uint)(param_1 % iVar1);\n    param_3 = (ulong)(param_1 % iVar1);\n  }\n  return (param_3 << 8) | 1;\n}", "int func0(uint param_1, uint param_2, ulong param_3) {\n  int iVar1 = 2;\n  uint uVar2 = param_1 & 1;\n  while (iVar1 * iVar1 <= param_1) {\n    if (uVar2 == 0) {\n      uint result = param_1 / iVar1;\n      uint remainder = param_1 % iVar1;\n      return (result << 8) | remainder;\n    }\n    iVar1++;\n    uVar2 = (uint)(param_1 % iVar1);\n    param_3 = (ulong)param_1 % (ulong)iVar1;\n  }\n  return (param_3 << 8) | 1;\n}", "int func0(int param_1, int *param_2) {\n  int iVar1;\n  int *pvVar2 = malloc(0x100);\n  *param_2 = 0;\n  int local_1c = param_1;\n  int local_14;\n  \n  for (local_14 = 2; local_14 * local_14 <= local_1c; local_14++) {\n    while (local_1c % local_14 == 0) {\n      local_1c /= local_14;\n      iVar1 = *param_2;\n      *param_2 = iVar1 + 1;\n      *(int *)((long)iVar1 * 4 + (long)pvVar2) = local_14;\n    }\n  }\n  if (local_1c > 1) {\n    iVar1 = *param_2;\n    *param_2 = iVar1 + 1;\n    *(int *)((long)iVar1 * 4 + (long)pvVar2) = local_1c;\n  }\n  return pvVar2;\n}", "int func0(int param_1, int *param_2) {\n  int *array = (int *)malloc(0x100);\n  *param_2 = 0;\n  int i = 2;\n  while (i * i <= param_1) {\n    if (param_1 % i == 0) {\n      int j = *param_2 + 1;\n      while ((param_1 / i) % i == 0) {\n        array[j * 4 - 4] = i;\n        j++;\n      }\n      *param_2 = j;\n    }\n    i++;\n  }\n  if (param_1 > 1) {\n    *param_2 = *param_2 + 1;\n    array[*param_2 * 4 - 4] = param_1;\n  }\n  return (int)array;\n}", "int func0(int param_1, int *param_2) {\n  int *array = (int *)malloc(0x100);\n  *param_2 = 0;\n  int i = 2;\n  while (i * i <= param_1) {\n    if (param_1 % i == 0) {\n      int j = *param_2;\n      while (param_1 % i == 0) {\n        array[j * 4] = i;\n        param_1 /= i;\n        j++;\n      }\n      *param_2 = j;\n    }\n    i++;\n  }\n  if (param_1 > 1) {\n    array[*param_2 * 4] = param_1;\n    *param_2++;\n  }\n  return (int)array;\n}", "int func0(int param_1, int *param_2) {\n  int *array = (int *)malloc(0x100);\n  *param_2 = 0;\n  int i = 2;\n  while (i * i <= param_1) {\n    if (param_1 % i == 0) {\n      int j = *param_2;\n      while (param_1 % i == 0) {\n        array[j * 4] = i;\n        param_1 /= i;\n        j++;\n      }\n      *param_2 = j;\n    }\n    i++;\n  }\n  if (param_1 > 1) {\n    array[*param_2 * 4] = param_1;\n    *param_2++;\n  }\n  return (int)array;\n}", "void *func0(long param_1,int param_2,int *param_3)\n{\n  int *ptr1 = (int *)calloc(param_2,4);\n  int *ptr2 = (int *)calloc(param_2,4);\n  int *ptr3 = (int *)malloc(param_2 * 4);\n  int count1 = 0;\n  int count2 = 0;\n  int count3 = 0;\n  int i;\n  \n  for (i = 0; i < param_2; i++) {\n    int value = *(int *)(param_1 + i * 4);\n    bool found = false;\n    for (int j = 0; j < count2; j++) {\n      if (value == *(int *)(ptr2 + j * 4)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      found = false;\n      for (int j = 0; j < count1; j++) {\n        if (value == *(int *)(ptr1 + j * 4)) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        *(int *)(ptr1 + count1 * 4) = value;\n        count1++;\n      }\n      else {\n        *(int *)(ptr2 + count2 * 4) = value;\n        count2++;\n      }\n    }\n  }\n  int count4 = 0;\n  for (i = 0; i < param_2; i++) {\n    int value = *(int *)(param_1 + i * 4);\n    bool found = false;\n    for (int j = 0; j < count2; j++) {\n      if (value == *(int *)(ptr2 + j * 4)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      *(int *)(ptr3 + count3 * 4) = value;\n      count3++;\n    }\n  }\n  *param_3 = count3;\n  free(ptr1);\n  free(ptr2);\n  return ptr3;\n}", "int count_unique(int *arr, int size, int *unique_arr, int *unique_size) {\n    int i, j, k;\n    int *ptr, *ptr_00;\n    int unique_count = 0;\n\n    if (size < 1) {\n        *unique_size = 0;\n        return 0;\n    }\n\n    ptr = (int *)calloc(size, sizeof(int));\n    ptr_00 = (int *)calloc(size, sizeof(int));\n    for (i = 0; i < size; i++) {\n        int val = arr[i];\n        int found_in_first = 0;\n        int found_in_second = 0;\n        for (j = 0; j < i; j++) {\n            if (ptr[j] == val) {\n                found_in_first = 1;\n                break;\n            }\n        }\n        for (j = 0; j < i; j++) {\n            if (ptr_00[j] == val) {\n                found_in_second = 1;\n                break;\n            }\n        }\n        if (!found_in_first) {\n            for (j = 0; j < i; j++) {\n                if (ptr_00[j] == val) {\n                    found_in_second = 1;\n                    break;\n                }\n            }\n            if (!found_in_second) {\n                ptr[i] = val;\n                unique_count++;\n            }\n        } else {\n            ptr_00[i] = val;\n            unique_count++;\n        }\n    }\n    *unique_size = unique_count;\n    int *unique_ptr = (int *)malloc(unique_count * sizeof(int));\n    for (i = 0, k = 0; i < size; i++) {\n        int val = arr[i];\n        int found_in_first = 0;\n        for (j = 0; j < i; j++) {\n            if (ptr[j] == val) {\n                found_in_first = 1;\n                break;\n            }\n        }\n        if (found_in_first) {\n            unique_ptr[k++] = val;\n        }\n    }\n    free(ptr);\n    free(ptr_00);\n    return unique_ptr;\n}", "int func0(int *param_1,int param_2,int *param_3) {\n  int *piVar1;\n  int iVar2;\n  void *pvVar3;\n  int *__ptr;\n  int *__ptr_00;\n  int *piVar4;\n  int *piVar5;\n  long lVar6;\n  int iVar7;\n  int iVar8;\n  size_t __nmemb;\n  \n  __nmemb = (size_t)param_2;\n  pvVar3 = malloc(__nmemb * 4);\n  __ptr = (int *)calloc(__nmemb,4);\n  __ptr_00 = (int *)calloc(__nmemb,4);\n  \n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    iVar7 = 0;\n    piVar1 = param_1 + (param_2 - 1);\n    iVar8 = 0;\n    piVar4 = param_1;\n    while (piVar4 <= piVar1) {\n      iVar2 = *piVar4;\n      if (iVar7!= 0) {\n        piVar5 = __ptr_00;\n        while (piVar5 <= __ptr_00 + iVar7 - 1) {\n          if (*piVar5 == iVar2) goto joined_r0x00101507;\n          piVar5++;\n        }\n      }\n      if (iVar8!= 0) {\n        piVar5 = __ptr;\n        while (piVar5 <= __ptr + iVar8 - 1) {\n          if (*piVar5 == iVar2) {\n            lVar6 = iVar7;\n            iVar7++;\n            __ptr_00[lVar6] = iVar2;\n            goto joined_r0x00101507;\n          }\n          piVar5++;\n        }\n      }\n      lVar6 = iVar8;\n      iVar8++;\n      __ptr[lVar6] = iVar2;\njoined_r0x00101507:\n      piVar4++;\n    }\n    iVar8 = 0;\n    piVar4 = __ptr_00;\n    while (piVar4 <= __ptr_00 + iVar7 - 1) {\n      if (*piVar4 == *param_1) goto joined_r0x001014a4;\n      piVar4++;\n    }\n    while (param_1 <= piVar1) {\n      lVar6 = iVar8;\n     ", "int func0(int *param_1,int param_2,int *param_3) {\n  int *piVar1;\n  int iVar2;\n  void *pvVar3;\n  int *__ptr;\n  int *__ptr_00;\n  int *piVar4;\n  int *piVar5;\n  long lVar6;\n  int iVar7;\n  int iVar8;\n  size_t __nmemb;\n  \n  __nmemb = (size_t)param_2;\n  pvVar3 = malloc(__nmemb * 4);\n  __ptr = (int *)calloc(__nmemb,4);\n  __ptr_00 = (int *)calloc(__nmemb,4);\n  \n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    iVar7 = 0;\n    piVar1 = param_1 + (param_2 - 1);\n    iVar8 = 0;\n    piVar4 = param_1;\n    while (piVar4 <= piVar1) {\n      iVar2 = *piVar4;\n      if (iVar7!= 0) {\n        piVar5 = __ptr_00;\n        while (piVar5 <= __ptr_00 + iVar7 - 1) {\n          if (*piVar5 == iVar2) goto joined_r0x001014e7;\n          piVar5++;\n        }\n      }\n      if (iVar8!= 0) {\n        piVar5 = __ptr;\n        while (piVar5 <= __ptr + iVar8 - 1) {\n          if (*piVar5 == iVar2) {\n            lVar6 = iVar7;\n            iVar7++;\n            __ptr_00[lVar6] = iVar2;\n            goto joined_r0x001014e7;\n          }\n          piVar5++;\n        }\n      }\n      lVar6 = iVar8;\n      iVar8++;\n      __ptr[lVar6] = iVar2;\njoined_r0x001014e7:\n      piVar4++;\n    }\n    iVar8 = 0;\n    piVar4 = __ptr_00;\n    while (piVar4 <= __ptr_00 + iVar7 - 1) {\n      if (*piVar4 == *param_1) goto joined_r0x00101484;\n      piVar4++;\n    }\n    lVar6 = iVar8;\n    iVar8++;\n    *(int *)((long)pv", "void func0(char *param_1, long param_2) {\n  size_t sVar1;\n  char local_11;\n  int local_10;\n  \n  sVar1 = strlen(param_1);\n  for (local_10 = 0; local_10 < sVar1; local_10++) {\n    local_11 = param_1[local_10];\n    if (local_11 < 'a' || 'z' < local_11) {\n      if ('@' < local_11 && local_11 < '[') {\n        local_11 +='';\n      }\n    } else {\n      local_11 -= 0x20;\n    }\n    param_2[local_10] = local_11;\n  }\n  param_2[sVar1] = '\\0';\n  return param_2;\n}", "int func0(char *str, long len) {\n  int i;\n  char *p = str;\n  int count = 0;\n  char c;\n\n  for (i = len - 1; i >= 0; i--) {\n    c = *p;\n    if (c >= 'a' && c <= 'z') {\n      c -= 0x20;\n    } else if (c >= 'A' && c <= 'Z') {\n      c +='';\n    }\n    *(str + i) = c;\n    p++;\n  }\n  *(str + len) = '\\0';\n  return len;\n}", "void func0(char *param_1, long param_2) {\n  int iVar1;\n  size_t sVar2;\n  char cVar3;\n  ulong uVar4;\n  \n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  if (iVar1 > 0) {\n    uVar4 = 0;\n    while (uVar4 < iVar1) {\n      cVar3 = param_1[uVar4];\n      if (cVar3 >= 'a' && cVar3 <= 'z') {\n        *(char *)(param_2 + uVar4) = cVar3 - 0x20;\n      } else {\n        *(char *)(param_2 + uVar4) = cVar3;\n      }\n      uVar4++;\n    }\n  }\n  *(char *)(param_2 + iVar1) = 0;\n  return iVar1;\n}", "int func0(char *param_1, long param_2) {\n    int iVar1;\n    size_t sVar84;\n    ulong uVar85;\n    uint uVar83;\n    char cVar89;\n    bool bVar90;\n    byte bVar3, bVar4, bVar5, bVar6, bVar7, bVar8, bVar9, bVar10, bVar11, bVar12, bVar13, bVar14, bVar15, bVar16, bVar17, bVar18;\n    byte bVar19, bVar20, bVar21, bVar22, bVar23, bVar24, bVar25, bVar26, bVar27, bVar28, bVar29, bVar30, bVar31, bVar32, bVar33, bVar34;\n    byte bVar35, bVar36, bVar37, bVar38, bVar39, bVar40, bVar41, bVar42, bVar43, bVar44, bVar45, bVar46, bVar47, bVar48, bVar49, bVar50;\n    byte bVar51, bVar52, bVar53, bVar54, bVar55, bVar56, bVar57, bVar58, bVar59, bVar60, bVar61, bVar62, bVar63, bVar64, bVar65, bVar66;\n    byte bVar67, bVar68, bVar69, bVar70, bVar71, bVar72, bVar73, bVar74, bVar75, bVar76, bVar77, bVar78, bVar79, bVar80, bVar81, bVar82;\n    byte bVar83, bVar84, bVar85, bVar86, bVar87, bVar88, bVar89, bVar90, bVar91, bVar92, bVar93, bVar94, bVar95, bVar96, bVar97, bVar98;\n    byte bVar99, bVar100, bVar101, bVar102, bVar103, bVar104, bVar105, bVar106, bVar107, bVar108, bVar109, bVar110, bVar111, bVar112, bVar113, bVar114", "char *func0(long param_1, int param_2) {\n  size_t sVar1;\n  char *dest;\n  int local_1c;\n  int local_18;\n  int local_14;\n  \n  local_1c = 0;\n  for (local_18 = 0; local_18 < param_2; local_18++) {\n    sVar1 = strlen(*(char **)(param_1 + local_18 * 8));\n    local_1c += sVar1;\n  }\n  dest = malloc(local_1c + 1);\n  if (!dest) {\n    return NULL;\n  }\n  *dest = '\\0';\n  for (local_14 = 0; local_14 < param_2; local_14++) {\n    strcat(dest, *(char **)(param_1 + local_14 * 8));\n  }\n  return dest;\n}", "char *func0(char **param_1,int param_2) {\n  if (param_2 < 1) {\n    char *pcVar2 = malloc(1);\n    if (pcVar2!= NULL) {\n      *pcVar2 = '\\0';\n    }\n    return pcVar2;\n  }\n  else {\n    int iVar5 = 0;\n    for (char **ppcVar4 = param_1; ppcVar4!= param_1 + param_2; ppcVar4++) {\n      int lVar3 = 0;\n      char *pcVar2 = *ppcVar4;\n      while (*pcVar2!= '\\0') {\n        lVar3++;\n        pcVar2++;\n      }\n      iVar5 -= lVar3;\n    }\n    char *pcVar2 = malloc(iVar5 + 1);\n    if (pcVar2!= NULL) {\n      *pcVar2 = '\\0';\n      for (int lVar3 = 0; lVar3 < param_2; lVar3++) {\n        strcat(pcVar2, param_1[lVar3]);\n      }\n    }\n    return pcVar2;\n  }\n}", "char* func0(char** param_1, int param_2) {\n  if (param_2 < 1) {\n    char* result = malloc(1);\n    if (result!= NULL) {\n      *result = '\\0';\n      return result;\n    }\n  } else {\n    int total_len = 0;\n    for (int i = 0; i < param_2; i++) {\n      total_len += strlen(param_1[i]);\n    }\n    char* result = malloc(total_len + 1);\n    if (result!= NULL) {\n      *result = '\\0';\n      for (int i = 0; i < param_2; i++) {\n        strcat(result, param_1[i]);\n      }\n      return result;\n    }\n  }\n  return NULL;\n}", "char* func0(char** param_1, int param_2) {\n  if (param_2 < 1) {\n    char* result = malloc(1);\n    if (result!= NULL) {\n      *result = '\\0';\n      return result;\n    }\n  } else {\n    int total_len = 0;\n    for (int i = 0; i < param_2; i++) {\n      total_len += strlen(param_1[i]);\n    }\n    char* result = malloc(total_len + 1);\n    if (result!= NULL) {\n      *result = '\\0';\n      for (int i = 0; i < param_2; i++) {\n        strcat(result, param_1[i]);\n      }\n      return result;\n    }\n  }\n  return NULL;\n}", "int func0(long *array, int size, char *str, void **ptr) {\n  int count = 0;\n  for (int i = 0; i < size; i++) {\n    if (strncmp((char *)array[i], str, strlen(str)) == 0) {\n      *(void **)ptr = realloc(*(void **)ptr, (size_t)count + sizeof(void *));\n      *(void **)((char *)ptr + (size_t)count * sizeof(void *)) = array[i];\n      count++;\n    }\n  }\n  return count;\n}", "int func0(char **param_1,int param_2,char *param_3,void **param_4) {\n  int i;\n  char *str;\n  int count = 0;\n  void *mem = malloc(param_2 * sizeof(char *));\n  *param_4 = mem;\n  if (param_2 < 1) {\n    return 0;\n  }\n  for (i = 0; i < param_2; i++) {\n    str = param_1[i];\n    if (strncmp(str, param_3, strlen(param_3)) == 0) {\n      *(char **)malloc((i * sizeof(char *)) + mem) = str;\n      count++;\n    }\n  }\n  return count;\n}", "int func0(char **param_1,int param_2,char *param_3,void **param_4) {\n  int count = 0;\n  if (param_2 < 1) {\n    return count;\n  }\n  char *matches[param_2];\n  char *current = param_1;\n  for (int i = 0; i < param_2; i++) {\n    char *str = *current;\n    if (strncmp(str, param_3, strlen(param_3)) == 0) {\n      matches[count] = str;\n      count++;\n    }\n    current++;\n  }\n  *param_4 = malloc(count * sizeof(char *));\n  for (int i = 0; i < count; i++) {\n    *(char **)((long)*param_4 + i * 8) = matches[i];\n  }\n  return count;\n}", "int find_strings(char **strings, int count, char *target, void **result) {\n  int i, j;\n  int found_count = 0;\n  char **found_strings = malloc(count * sizeof(char *));\n  *result = found_strings;\n\n  if (count < 1) {\n    return found_count;\n  }\n\n  for (i = 0; i < count; i++) {\n    char *str = strings[i];\n    int cmp = strncmp(str, target, strlen(target));\n    if (cmp == 0) {\n      found_strings[found_count] = str;\n      found_count++;\n    }\n  }\n\n  return found_count;\n}", "void* func0(long param_1, int param_2, int* param_3) {\n  int iVar1;\n  void* pvVar2;\n  int local_14;\n  \n  pvVar2 = malloc(param_2 * 4);\n  *param_3 = 0;\n  for (local_14 = 0; local_14 < param_2; local_14++) {\n    if (*(float*)(param_1 + local_14 * 4) > 0.0f) {\n      iVar1 = *param_3;\n      *param_3 = iVar1 + 1;\n      *(int*)((char*)pvVar2 + iVar1 * 4) = (int)(param_1 + local_14 * 4);\n    }\n  }\n  return pvVar2;\n}", "void func0(float *param_1,int param_2,int *param_3)\n{\n  float *pfVar1;\n  int iVar2;\n  void *pvVar3;\n  \n  pvVar3 = malloc(param_2 * sizeof(float));\n  *param_3 = 0;\n  if (param_2 > 0) {\n    pfVar1 = param_1 + param_2 - 1;\n    for (; param_1 <= pfVar1; param_1++) {\n      if (*param_1 > 0.0f) {\n        iVar2 = *param_3;\n        *param_3 = iVar2 + 1;\n        *(float *)((long)pvVar3 + (long)iVar2 * sizeof(float)) = *param_1;\n      }\n    }\n  }\n  return *param_3;\n}", "void func0(float *param_1,int param_2,int *param_3)\n{\n  float *pfVar1;\n  int iVar2;\n  void *pvVar3;\n  \n  pvVar3 = malloc(param_2 * sizeof(float));\n  *param_3 = 0;\n  if (param_2 > 0) {\n    pfVar1 = param_1 + param_2 - 1;\n    for (; param_1 <= pfVar1; param_1++) {\n      if (*param_1 > 0.0f) {\n        iVar2 = *param_3;\n        *(float *)((long)pvVar3 + (long)iVar2 * sizeof(float)) = *param_1;\n        *param_3 = iVar2 + 1;\n      }\n    }\n  }\n  return *param_3;\n}", "void func0(float *param_1,int param_2,int *param_3)\n{\n  float *pfVar1;\n  int iVar2;\n  void *pvVar3;\n  \n  pvVar3 = malloc(param_2 * sizeof(float));\n  *param_3 = 0;\n  if (param_2 > 0) {\n    pfVar1 = param_1 + param_2 - 1;\n    while (param_1 <= pfVar1) {\n      if (*param_1 > 0.0) {\n        iVar2 = *param_3;\n        *(float *)((long)pvVar3 + (long)iVar2 * sizeof(float)) = *param_1;\n        *param_3 = iVar2 + 1;\n      }\n      param_1++;\n    }\n  }\n  return *param_3;\n}", "int is_prime(long num) {\n  if (num < 2) {\n    return 0;\n  }\n  for (long i = 2; i * i <= num; i++) {\n    if (num % i == 0) {\n      return 0;\n    }\n  }\n  return 1;\n}", "int func0(unsigned long param_1) {\n  int auVar1[16];\n  int lVar2;\n  \n  if (param_1 > 1) {\n    if (param_1 < 4) {\n      return 1;\n    }\n    if (param_1 % 2 == 0) {\n      return 0;\n    }\n    lVar2 = 2;\n    do {\n      lVar2++;\n      if (lVar2 * lVar2 - param_1!= 0 && param_1 <= lVar2 * lVar2) {\n        return 1;\n      }\n      auVar1[0] = (int)(param_1 >> 8) >> 24;\n      auVar1[8] = param_1;\n    } while (auVar1[0] % lVar2!= 0);\n  }\n  return 0;\n}", "int func0_part_0(int param_1) {\n  int auVar1[16];\n  int lVar2;\n  \n  if (param_1 < 4) {\n    return 1;\n  }\n  if (param_1 & 1) {\n    lVar2 = 2;\n    do {\n      lVar2++;\n      if (param_1 < lVar2 * lVar2) {\n        return 1;\n      }\n      auVar1[0] = (param_1 >> 8) & 0x3f;\n      auVar1[1] = param_1;\n    } while ((auVar1[1] % lVar2)!= 0);\n  }\n  return 0;\n}\n\nint func0(int param_1) {\n  if (param_1 > 1) {\n    return func0_part_0(param_1);\n  }\n  return 0;\n}", "int func0(ulong param_1) {\n  if (param_1 < 4) {\n    return 1;\n  }\n  if (param_1 & 1) {\n    ulong lVar2 = 2;\n    do {\n      lVar2++;\n      if (param_1 < lVar2 * lVar2) {\n        return 1;\n      }\n      ulong auVar1_8_8 = (param_1 >> 8) >> 0x37;\n      ulong auVar1_0_8 = param_1;\n    } while ((auVar1_0_8 % lVar2)!= 0);\n  }\n  return 0;\n}", "double func0(double *param_1,int param_2)\n{\n  double local_28 = 0.0;\n  double local_20 = *param_1;\n  for (int i = 1; i < param_2; i++) {\n    double local_10 = DAT_00102070;\n    for (int j = 0; j < i; j++) {\n      local_10 *= 0.0;\n    }\n    local_20 += param_1[i] * local_10;\n  }\n  while (_DAT_00102090 < (double)((ulong)local_20 & DAT_00102080)) {\n    double local_18 = 0.0;\n    for (int i = 1; i < param_2; i++) {\n      double local_10 = DAT_00102070;\n      for (int j = 1; j < i; j++) {\n        local_10 *= local_28;\n      }\n      local_18 += param_1[i] * (double)i * local_10;\n    }\n    local_28 -= local_20 / local_18;\n    local_20 = *param_1;\n    for (int i = 1; i < param_2; i++) {\n      double local_10 = DAT_00102070;\n      for (int j = 0; j < i; j++) {\n        local_10 *= local_28;\n      }\n      local_20 += param_1[i] * local_10;\n    }\n  }\n  return local_28;\n}", "double func0(double *param_1,int param_2)\n{\n  double dVar1 = *param_1;\n  double dVar10 = dVar1;\n  if (param_2 > 1) {\n    for (long lVar5 = 1; lVar5 < param_2; lVar5++) {\n      double dVar9 = 0.0;\n      for (int iVar2 = 0; iVar2 < lVar5; iVar2++) {\n        dVar9 *= 0.0;\n      }\n      dVar10 += dVar9 * param_1[lVar5];\n    }\n  }\n  double dVar9 = 0.0;\n  if ((dVar10 & 0x7FFFFFFF) <= 0x7FFFFFFF - 0x10000000) {\n    dVar9 = 0.0;\n  }\n  else {\n    if (param_2 < 2) {\n      dVar9 -= dVar10 / 0x3F800000;\n      dVar10 = dVar1;\n    }\n    else {\n      double dVar11 = 0.0;\n      double dVar8 = 1.0;\n      for (int iVar2 = 1, iVar4 = 2; iVar4 <= param_2; iVar2++, iVar4++) {\n        dVar11 += dVar8 * iVar2 * param_1[iVar4];\n        if (iVar4 > 1) {\n          dVar8 *= dVar9;\n        }\n      }\n      dVar9 -= dVar10 / dVar11;\n      dVar10 = dVar1;\n      for (long lVar5 = 1; lVar5 < param_2; lVar5++) {\n        double dVar8 = 1.0;\n        for (int iVar4 = 0; iVar4 < lVar5; iVar4++) {\n          dVar8 *= dVar9;\n        }\n        dVar10 += dVar8 * param_1[lVar5];\n      }\n    }\n  }\n  return dVar9;\n}", "double func0(double *param_1,int param_2)\n{\n  double sum = *param_1;\n  for (int i = 2; i <= param_2; i++) {\n    sum += DAT_00102060 * (*param_1 + i - 1);\n  }\n  double product = 1.0;\n  for (int i = 1; i <= param_2; i++) {\n    product *= DAT_00102060;\n    sum += product * (*param_1 + i - 1);\n  }\n  double ratio = sum / DAT_00102060;\n  for (int i = 1; i <= param_2; i++) {\n    ratio -= DAT_00102060 * (*param_1 + i - 1) / (DAT_00102060 * i);\n  }\n  return ratio;\n}", "double func0(double *param_1,int param_2)\n{\n  double sum = 0.0;\n  double product = 0.0;\n  int i = 0;\n  double temp = 0.0;\n  double *ptr = param_1;\n  \n  for (i = 1; i < param_2; i++) {\n    temp = DAT_00102060;\n    for (int j = 0; j < i; j++) {\n      temp = temp * 0.0;\n    }\n    product = product + temp * (*ptr);\n    ptr++;\n  }\n  \n  if (DAT_00102068 < (double)((ulong)product & DAT_00102080)) {\n    temp = 0.0;\n    for (i = 1; i < param_2; i++) {\n      temp = temp - product / 0.0;\n      product = param_1[0];\n      if ((double)((ulong)param_1[0] & DAT_00102080) <= DAT_00102068) {\n        return temp;\n      }\n      temp = temp + DAT_00102060 * i * (*ptr);\n      ptr++;\n    }\n    temp = temp - product / (param_1[1] + 0.0);\n    product = param_1[0];\n    for (i = 1; i < param_2 - 1; i++) {\n      temp = temp + DAT_00102060 * temp * (*ptr);\n      product = product + DAT_00102060 * temp * (*ptr);\n      ptr++;\n    }\n    temp = temp - product / (param_1[1] + 0.0);\n  }\n  \n  return temp;\n}", "int bubble_sort(int* arr, int size, int* result) {\n  int* sorted_arr = (int*)malloc((size / 3 + 1) * sizeof(int));\n  int count = 0;\n  for (int i = 0; i * 3 < size; i++) {\n    sorted_arr[i] = arr[i * 3];\n    count++;\n  }\n  for (int i = 0; i < count - 1; i++) {\n    int min_idx = i;\n    for (int j = i + 1; j < count; j++) {\n      if (sorted_arr[j] < sorted_arr[min_idx]) {\n        min_idx = j;\n      }\n    }\n    if (min_idx!= i) {\n      int temp = sorted_arr[i];\n      sorted_arr[i] = sorted_arr[min_idx];\n      sorted_arr[min_idx] = temp;\n    }\n  }\n  for (int i = 0; i < size; i++) {\n    if (i % 3 == 0) {\n      result[i] = sorted_arr[i / 3];\n    } else {\n      result[i] = arr[i];\n    }\n  }\n  free(sorted_arr);\n  return 0;\n}", "void func0(long param_1,int param_2,long param_3)\n{\n  long* ptr = (long*)malloc((param_2 / 3 + 1) * 4);\n  if (param_2 > 0) {\n    long i, j, k;\n    for (i = 0; i < param_2; i += 3) {\n      for (j = 0; j < 3; j++) {\n        ptr[i / 3 * 4 + j * 4] = param_1 + i * 4 + j * 4;\n      }\n    }\n    for (i = 0; i < param_2; i++) {\n      for (j = 0; j < param_2; j++) {\n        if (ptr[j * 4] < ptr[i * 4]) {\n          long temp = ptr[i * 4];\n          ptr[i * 4] = ptr[j * 4];\n          ptr[j * 4] = temp;\n        }\n      }\n    }\n    for (i = 0; i < param_2; i++) {\n      if (i % 3 == 0) {\n        param_3 + i * 4 = ptr[i / 3 * 4];\n      } else {\n        param_3 + i * 4 = param_1 + i * 4;\n      }\n    }\n  }\n  free(ptr);\n  return;\n}", "int func0(int param_1, int param_2, int param_3) {\n  int* ptr = (int*)malloc((param_2 / 3 + 1) * 4);\n  if (param_2 > 0) {\n    int i, j, k;\n    for (i = 0; i < param_2; i += 3) {\n      for (j = 0; j < 3; j++) {\n        ptr[i + j] = param_1[i + j * 4];\n      }\n    }\n    for (i = 0; i < param_2; i++) {\n      for (j = 0; j < i; j++) {\n        if (ptr[i] < ptr[j]) {\n          int temp = ptr[i];\n          ptr[i] = ptr[j];\n          ptr[j] = temp;\n        }\n      }\n    }\n    for (i = 0; i < param_2; i++) {\n      if ((i * -0x55555555) < 0x55555556) {\n        param_3[i] = ptr[i / 3];\n      } else {\n        param_3[i] = param_1[i];\n      }\n    }\n  }\n  free(ptr);\n  return 0;\n}", "void func0(undefined4 *param_1,int param_2,long param_3)\n{\n  int i;\n  int j;\n  int k;\n  int n;\n  int m;\n  int count;\n  int index;\n  int temp;\n  int *ptr;\n  int *ptr2;\n  int *ptr3;\n  int *ptr4;\n  int *ptr5;\n  int *ptr6;\n  int *ptr7;\n  int *ptr8;\n  int *ptr9;\n  int *ptr10;\n  int *ptr11;\n  int *ptr12;\n  int *ptr13;\n  int *ptr14;\n  int *ptr15;\n  int *ptr16;\n  int *ptr17;\n  int *ptr18;\n  int *ptr19;\n  int *ptr20;\n  int *ptr21;\n  int *ptr22;\n  int *ptr23;\n  int *ptr24;\n  int *ptr25;\n  int *ptr26;\n  int *ptr27;\n  int *ptr28;\n  int *ptr29;\n  int *ptr30;\n  int *ptr31;\n  int *ptr32;\n  int *ptr33;\n  int *ptr34;\n  int *ptr35;\n  int *ptr36;\n  int *ptr37;\n  int *ptr38;\n  int *ptr39;\n  int *ptr40;\n  int *ptr41;\n  int *ptr42;\n  int *ptr43;\n  int *ptr44;\n  int *ptr45;\n  int *ptr46;\n  int *ptr47;\n  int *ptr48;\n  int *ptr49;\n  int *ptr50;\n  int *ptr51;\n  int *ptr52;\n  int *ptr53;\n  int *ptr54;\n  int *ptr55;\n  int *ptr56;\n  int *ptr57;\n  int *ptr58;\n  int *ptr59;\n  int *ptr60;\n  int *ptr61;\n  int *ptr62;\n  int *ptr63;\n  int *ptr64;\n  int *ptr65;\n  int *ptr66;\n  int *ptr67;\n  int *ptr68;\n  int *ptr69;\n  int *ptr70;\n  int *ptr71;\n  int *ptr72;\n  int *ptr73;\n  int *ptr74;\n  int *ptr75;\n  int *ptr76;\n  int *ptr77;\n", "void* func0(long param_1, int param_2, int* param_3) {\n  void* pvVar3 = malloc(param_2 * 4);\n  int local_20 = 0;\n  int local_1c = 0;\n  int local_18;\n\n  while (1) {\n    if (param_2 <= local_1c) {\n      *param_3 = local_20;\n      return pvVar3;\n    }\n\n    bool bVar2 = false;\n    for (local_18 = 0; local_18 < local_20; local_18++) {\n      if (*(int*)(param_1 + local_1c * 4) == *(int*)(pvVar3 + local_18 * 4)) {\n        bVar2 = true;\n        break;\n      }\n    }\n\n    if (!bVar2) {\n      *(int*)(local_20 * 4 + pvVar3) = *(int*)(local_1c * 4 + param_1);\n      local_20++;\n    }\n\n    local_1c++;\n  }\n}", "int* func0(int* param_1, int param_2, int* param_3) {\n  int* piVar1 = (int*)malloc(param_2 * sizeof(int));\n  if (param_2 < 1) {\n    *param_3 = 0;\n  } else {\n    int* piVar5 = param_1 + param_2 - 1;\n    int iVar6 = 0;\n    while (param_1!= piVar5) {\n      int iVar2 = 0;\n      while (iVar2 < iVar6) {\n        if (*param_1 < piVar1[iVar2]) {\n          piVar1[iVar6] = *param_1;\n          for (int i = iVar6 - 1; i >= iVar2; i--) {\n            piVar1[i + 1] = piVar1[i];\n          }\n          piVar1[iVar2] = *param_1;\n          iVar6++;\n          break;\n        }\n        iVar2++;\n      }\n      if (iVar2 == iVar6) {\n        piVar1[iVar6] = *param_1;\n        iVar6++;\n      }\n      param_1++;\n    }\n    if (iVar6 > 1) {\n      for (int i = 1; i < iVar6; i++) {\n        for (int j = 0; j < iVar6 - i; j++) {\n          if (piVar1[j] > piVar1[j + 1]) {\n            int temp = piVar1[j];\n            piVar1[j] = piVar1[j + 1];\n            piVar1[j + 1] = temp;\n          }\n        }\n      }\n    }\n  }\n  *param_3 = iVar6;\n  return piVar1;\n}", "int* sort_array(int* arr, int size, int* result_size) {\n  int* sorted_arr = (int*)malloc(size * sizeof(int));\n  if (size < 1) {\n    *result_size = 0;\n    return sorted_arr;\n  }\n\n  int i = 0;\n  int* end = arr + size - 1 + 1;\n  do {\n    if (i!= 0) {\n      int* current = sorted_arr;\n      do {\n        if (*current == *arr) {\n          return sorted_arr;\n        }\n        current++;\n      } while (current!= sorted_arr + i - 1 + 1);\n    }\n    sorted_arr[i] = *arr;\n    i++;\n    arr++;\n  } while (arr!= end);\n\n  if (i!= 1) {\n    int j = 1;\n    int* current = sorted_arr;\n    do {\n      int temp = *current;\n      int k = 0;\n      while (k < i) {\n        if (sorted_arr[k] < temp) {\n          temp = sorted_arr[k];\n          sorted_arr[k] = *current;\n        }\n        current++;\n        k++;\n      }\n      sorted_arr[k - 1] = temp;\n      current = current - 1;\n      j++;\n    } while (j!= i - 1 + 1);\n  }\n  *result_size = i;\n  return sorted_arr;\n}", "int* func0(int* param_1, int param_2, int* param_3) {\n  int* piVar1 = (int*)malloc(param_2 * sizeof(int));\n  if (param_2 < 1) {\n    *param_3 = 0;\n    return NULL;\n  }\n  int iVar6 = 0;\n  int* piVar5 = param_1 + (param_2 - 1);\n  while (iVar6 < param_2) {\n    if (iVar6!= 0) {\n      int* piVar3 = piVar1;\n      while (iVar6!= 0) {\n        if (*piVar3 == *param_1) {\n          break;\n        }\n        piVar3++;\n      }\n      if (iVar6!= 0) {\n        int iVar2 = 0;\n        while (iVar2 < iVar6) {\n          if (piVar1[iVar2] < *param_1) {\n            int temp = piVar1[iVar2];\n            piVar1[iVar2] = *param_1;\n            *param_1 = temp;\n          }\n          iVar2++;\n        }\n      }\n    }\n    piVar1[iVar6] = *param_1;\n    param_1++;\n    iVar6++;\n  }\n  *param_3 = iVar6;\n  return piVar1;\n}", "float func0(long param_1,int param_2)\n{\n  float local_10 = DAT_00102084;\n  int local_c;\n  \n  for (local_c = 0; local_c < param_2; local_c++)\n  {\n    if (local_10 < *(float *)(param_1 + local_c * 4))\n    {\n      local_10 = *(float *)(param_1 + local_c * 4);\n    }\n  }\n  return local_10;\n}", "float func0(float *param_1,int param_2)\n{\n  float max_val = DAT_00102074;\n  if (param_2 > 0) {\n    float *end = param_1 + (param_2 - 1) + 1;\n    float current_max = *param_1;\n    while (param_1!= end) {\n      float val = *param_1;\n      if (val > current_max) {\n        current_max = val;\n      }\n      param_1++;\n    }\n    return current_max;\n  }\n  return max_val;\n}", "float func0(float *param_1,int param_2)\n{\n  float *pfVar1 = param_1 + (param_2 - 1);\n  float fVar2 = *param_1;\n  float fVar3 = DAT_0010204c;\n  \n  if (param_2 > 0) {\n    while (param_1!= pfVar1) {\n      if (fVar2 <= fVar3) {\n        fVar2 = fVar3;\n      }\n      fVar3 = fVar2;\n      param_1++;\n      fVar2 = *param_1;\n    }\n  }\n  return fVar3;\n}", "float func0(float *param_1,int param_2)\n{\n  float *pfVar1 = param_1 + (param_2 - 1);\n  float fVar2 = *param_1;\n  float fVar3 = DAT_0010204c;\n  \n  if (param_2 > 0) {\n    while (param_1!= pfVar1) {\n      if (fVar2 <= fVar3) {\n        fVar2 = fVar3;\n      }\n      fVar3 = fVar2;\n      param_1++;\n      fVar2 = *param_1;\n    }\n  }\n  return fVar3;\n}", "int func0(int param_1) {\n  int local_14 = 0;\n  for (int local_10 = 0; local_10 < param_1; local_10++) {\n    if (local_10 % 11 == 0) {\n      int local_c = local_10;\n      while (local_c > 0) {\n        if (local_c % 10 == 7) {\n          local_14++;\n        }\n        local_c /= 10;\n      }\n    }\n  }\n  return local_14;\n}", "int func0(int param_1) {\n  int iVar2 = 0, iVar3 = 0, iVar4 = 0;\n  if (param_1 < 1) {\n    return 0;\n  }\n  while (iVar3 < param_1) {\n    if ((iVar3 % 0xb == 0 || iVar3 % 0xd == 0) && iVar3 > 0) {\n      do {\n        iVar4 += (iVar2 % 10 == 7);\n        iVar2 /= 10;\n      } while (iVar2 > 0 && iVar2 % 10!= 7);\n    }\n    iVar3++;\n  }\n  return iVar4;\n}", "int func0(uint param_1) {\n  if (param_1 < 1) return 0;\n  uint uVar3 = 0, uVar2 = 0;\n  int iVar4 = 0;\n  while (uVar3 * -0x45d1745d < 0x1745d174 && uVar3 * -0x3b13b13b < 0x13b13b13 || uVar3 == 0) {\n    if (param_1 == ++uVar3) return iVar4;\n  }\n  while (uVar2!= 0) {\n    int iVar1 = (int)uVar2;\n    iVar4 += (iVar1 + (int)(uVar2 / 10) * -10 == 7);\n    uVar2 /= 10;\n  }\n  return iVar4;\n}", "int func0(uint param_1) {\n  if (param_1 < 1) return 0;\n  uint uVar3 = 1;\n  int iVar4 = 0;\n  while (param_1!= uVar3) {\n    while (uVar3 * -0x45d1745d < 0x1745d174 && uVar3 * -0x3b13b13b < 0x13b13b13) {\n      uVar3++;\n      if (param_1 == uVar3) return iVar4;\n    }\n    ulong uVar2 = (ulong)uVar3;\n    while (uVar2 >= 10) {\n      int iVar1 = (int)uVar2;\n      iVar4 += (iVar1 + (int)(uVar2 / 10) * -10 == 7);\n      uVar2 /= 10;\n    }\n    uVar3++;\n  }\n  return iVar4;\n}", "void func0(long param_1,int param_2,long param_3)\n{\n  int* arr = (int*)malloc((param_2 / 2 + 1) * sizeof(int));\n  int i, j, k;\n  for (i = 0; i < param_2; i += 2) {\n    arr[i / 2] = param_1 + (i * 4);\n  }\n  for (i = 0; i < (param_2 / 2); i++) {\n    for (j = 0; j < (param_2 / 2) - i - 1; j++) {\n      if (arr[j + 1] < arr[j]) {\n        int temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n  for (i = 0; i < param_2; i++) {\n    if (i % 2 == 0) {\n      param_3[i * 4] = arr[i / 2];\n    } else {\n      param_3[i * 4] = param_1 + (i * 4);\n    }\n  }\n  free(arr);\n  return;\n}", "void func0(long param_1,int param_2,long param_3)\n{\n  float* arr = (float*)malloc((param_2 / 2 + 1) * sizeof(float));\n  if (param_2 > 0) {\n    for (int i = 0; i < param_2; i += 2) {\n      arr[i / 2] = *(float*)(param_1 + i * 4);\n    }\n    for (int i = param_2 - 2; i >= 0; i--) {\n      if (arr[i / 2 + 1] < arr[i / 2]) {\n        float temp = arr[i / 2];\n        arr[i / 2] = arr[i / 2 + 1];\n        arr[i / 2 + 1] = temp;\n      }\n    }\n    for (int i = 0; i < param_2; i++) {\n      if (i % 2 == 0) {\n        *(float*)(param_3 + i * 4) = arr[i / 2];\n      } else {\n        *(float*)(param_3 + i * 4) = *(float*)(param_1 + i * 4);\n      }\n    }\n  }\n  free(arr);\n  return;\n}", "float* sort_and_copy(float* dest, long dest_size, float* src, long src_size, float* temp) {\n  if (src_size > 0) {\n    for (long i = 0; i < src_size; i += 2) {\n      temp[i / 2] = src[i];\n    }\n    for (uint j = src_size - 1; j > 0; j--) {\n      float* p = temp;\n      for (uint k = 0; k < j; k++) {\n        float f = *p;\n        if (*(p + 1) < f) {\n          *p = *(p + 1);\n          *(p + 1) = f;\n        }\n        p += 2;\n      }\n    }\n    for (long i = 0; i < src_size; i++) {\n      if (i % 2 == 0) {\n        dest[i / 2] = temp[i / 2];\n      } else {\n        dest[i / 2] = src[i];\n      }\n    }\n  }\n  return dest;\n}", "float* func0(long param_1, int param_2, long param_3) {\n  float* ptr = (float*)malloc((param_2 / 2 + 1) * sizeof(float));\n  if (param_2 > 0) {\n    int uVar9 = param_2 - 1;\n    int uVar10 = uVar9 >> 1;\n    for (int i = 0; i < uVar9; i += 8) {\n      if (i < 8) {\n        float fVar3 = *(float*)(param_1 + i * 4);\n        float fVar4 = *(float*)(param_1 + (i + 1) * 4);\n        float fVar5 = *(float*)(param_1 + (i + 2) * 4);\n        float fVar6 = *(float*)(param_1 + (i + 3) * 4);\n        float fVar7 = *(float*)(param_1 + (i + 4) * 4);\n        float fVar8 = *(float*)(param_1 + (i + 5) * 4);\n        float fVar9 = *(float*)(param_1 + (i + 6) * 4);\n        float fVar10 = *(float*)(param_1 + (i + 7) * 4);\n        ptr[i / 4] = fVar3;\n        ptr[(i + 1) / 4] = fVar4;\n        ptr[(i + 2) / 4] = fVar5;\n        ptr[(i + 3) / 4] = fVar6;\n        ptr[(i + 4) / 4] = fVar7;\n        ptr[(i + 5) / 4] = fVar8;\n        ptr[(i + 6) / 4] = fVar9;\n        ptr[(i + 7) / 4] = fVar10;\n      } else {\n        float* puVar1 = (float*)(param_1 + i * 2);\n        float* puVar2 = (float*)(param_1 + 0x10 + i * 2);\n        float fVar3 = puVar1[2];\n        float fVar4 = *puVar1;\n        float fVar5 = *puVar2;\n        float fVar6 = puVar2[", "char* func0(char *param_1,int param_2)\n{\n  int i;\n  int len = strlen(param_1);\n  for (i = 0; i < (len + 2) / 3; i++) {\n    int chunk_len = (len < (i + 1) * 3)? len - i * 3 : 3;\n    char chunk[4];\n    strncpy(chunk, param_1 + i * 3, chunk_len);\n    chunk[chunk_len] = '\\0';\n    char c1 = chunk[0];\n    char c2 = chunk[2];\n    if (chunk_len == 3) {\n      if (param_2 == 0) {\n        chunk[0] = chunk[1];\n        chunk[1] = chunk[2];\n        chunk[2] = c1;\n      }\n      else {\n        chunk[2] = chunk[1];\n        chunk[1] = chunk[0];\n        chunk[0] = c2;\n      }\n    }\n    strncpy(param_1 + i * 3, chunk, chunk_len);\n  }\n  return param_1;\n}", "char* func0(char *param_1,int param_2) {\n  size_t n = 0;\n  char local_44[4];\n  int i = 0;\n  int len = strlen(param_1);\n  int step = (len + 2) / 3;\n  if (step > 0) {\n    for (int j = 0; j < step; j++) {\n      if (j % 2 == 0) {\n        char temp = local_44[0];\n        local_44[0] = local_44[1];\n        local_44[1] = local_44[2];\n        local_44[2] = temp;\n      } else {\n        char temp = local_44[2];\n        local_44[2] = local_44[1];\n        local_44[1] = local_44[0];\n        local_44[0] = temp;\n      }\n      strncpy(local_44, param_1, 3);\n      local_44[3] = '\\0';\n      strncpy(param_1, local_44, 3);\n      param_1 += 3;\n      len -= 3;\n    }\n  }\n  return param_1;\n}", "char* func0(char *param_1,int param_2)\n{\n  int len = strlen(param_1);\n  if (len > 0) {\n    int i = 0;\n    char* src = param_1;\n    char local_44[4];\n    do {\n      if (len < (i + 1) * 3) {\n        strncpy(local_44, src, len);\n        local_44[len] = '\\0';\n        if (len == 3) break;\n      } else {\n        strncpy(local_44, src, 3);\n        local_44[3] = '\\0';\n      }\n      char cVar1 = local_44[2];\n      local_44[2] = local_44[0];\n      if (param_2 == 0) {\n        local_44[0] = local_44[1];\n        local_44[1] = cVar1;\n      } else {\n        local_44[2] = local_44[1];\n        local_44[1] = local_44[0];\n        local_44[0] = cVar1;\n      }\n      src = strcpy(src, local_44);\n      i++;\n    } while (i < (len + 2) / 3);\n  }\n  return param_1;\n}", "char* func0(char *param_1,int param_2) {\n  int len = strlen(param_1);\n  int chunk_size = (len + 2) / 3;\n  if (len > 0) {\n    if (param_2 == 0) {\n      for (int i = 0; i < chunk_size; i++) {\n        int end = (len < (i + 1) * 3)? len : (i + 1) * 3;\n        strncpy(local_44, param_1, end);\n        local_44[end] = 0;\n        if (end == 3) break;\n        _local_44 = CONCAT12((char)_local_44, stack0xffffffffffffffbd);\n        param_1 = strncpy(param_1, local_44, 3);\n        param_1 += 3;\n      }\n    } else {\n      for (int i = 0; i < chunk_size; i++) {\n        int end = (len < (i + 1) * 3)? len : (i + 1) * 3;\n        if (end < (i + 1) * 3) {\n          strncpy(local_44, param_1, end);\n          local_44[end] = 0;\n          if (end == 3) break;\n          _local_44 = CONCAT21(local_44, uStack_42);\n        } else {\n          strncpy(local_44, param_1, 3);\n          local_44[3] = 0;\n          _local_44 = CONCAT21(local_44, uStack_42);\n        }\n        param_1 = strncpy(param_1, local_44, 3);\n        param_1 += 3;\n      }\n    }\n  }\n  return param_1;\n}", "int func0(int param_1) {\n  int iVar1 = 2;\n  int local_20 = 1;\n  int local_1c = 2;\n  int local_18 = 0;\n  bool bVar2 = true;\n  \n  while (iVar1 <= param_1) {\n    if (iVar1 <= local_18) {\n      return 0;\n    }\n    iVar1 = local_20 + iVar1;\n    local_20 = iVar1;\n    bVar2 = true;\n    for (int local_10 = 2; local_10 * local_10 <= iVar1; local_10++) {\n      if (iVar1 % local_10 == 0) {\n        bVar2 = false;\n        break;\n      }\n    }\n    if (bVar2) {\n      local_18++;\n    }\n    if (local_18 == param_1) {\n      return iVar1;\n    }\n  }\n  return 0;\n}", "uint func0(int param_1) {\n  int i;\n  int j;\n  int k;\n  int n;\n  int sum;\n  \n  i = 0;\n  n = 2;\n  sum = 1;\n  do {\n    do {\n      while (true) {\n        k = n;\n        if (param_1 <= i) return 0;\n        n = sum + k;\n        sum = k;\n        if (3 < k) break;\n      }\n    } while ((k & 1) == 0);\n    j = 2;\n    do {\n      j++;\n      if (k < j * j) goto LAB_00101167;\n    } while (k % j!= 0);\n  } while (true);\n  return n;\nLAB_00101167:\n  i++;\n  if (param_1 == i) return k;\n}", "uint func0(int param_1) {\n  uint uVar1 = 2;\n  uint uVar2 = 1;\n  int iVar3 = 0;\n  uint uVar4 = 2;\n  int iVar5 = 0;\n  \n  while (iVar5 < param_1) {\n    if (iVar5 == param_1) {\n      return uVar4;\n    }\n    if (iVar5 < 4) {\n      iVar5++;\n    }\n    else if ((uVar4 & 1)!= 0) {\n      for (iVar3 = 2; (int)uVar4 < iVar3 * iVar3; iVar3++) {\n        if ((int)uVar4 % iVar3 == 0) {\n          break;\n        }\n      }\n    }\n    uVar1 = uVar4 + uVar2;\n    uVar2 = uVar4;\n    uVar4++;\n    iVar5++;\n  }\n  return 0;\n}", "uint func0(int param_1) {\n  uint uVar1 = 2;\n  uint uVar2 = 1;\n  int iVar3 = 0;\n  uint uVar4 = 2;\n  int iVar5 = 0;\n  \n  while (iVar5 < param_1) {\n    if (iVar5 == param_1) {\n      return uVar4;\n    }\n    if (iVar5 < 4) {\n      iVar5++;\n    }\n    else if ((uVar4 & 1)!= 0) {\n      for (iVar3 = 2; (int)uVar4 < iVar3 * iVar3; iVar3++) {\n        if ((int)uVar4 % iVar3 == 0) {\n          break;\n        }\n      }\n    }\n    uVar1 = uVar4 + uVar2;\n    uVar2 = uVar4;\n    uVar4++;\n    iVar5++;\n  }\n  return 0;\n}", "int func0(long param_1, int param_2) {\n  int local_14 = 0;\n  while (param_2 > local_14) {\n    int local_10 = local_14;\n    if (param_2 <= local_14) {\n      return 0;\n    }\n    int local_c = local_10;\n    while (local_c < param_2) {\n      if (*(int *)(param_1 + (long)local_c * 4) +\n          *(int *)(param_1 + (long)local_14 * 4) + *(int *)(param_1 + (long)local_10 * 4) == 0) {\n        return 1;\n      }\n      local_c++;\n    }\n    local_14++;\n  }\n  return 0;\n}", "int func0(int param_1, int param_2) {\n  if (param_2 < 1) {\n    return 0;\n  }\n  int lVar1 = 1;\n  while (1) {\n    int lVar3 = lVar1;\n    if (lVar3 == param_2 - 1 + 1) {\n      return 0;\n    }\n    int lVar2 = lVar3 + 1;\n    while (lVar2 < param_2) {\n      lVar1 = lVar2;\n      int i = 0;\n      while (i < param_2) {\n        if (*(int *)(param_1 - 4 + lVar2 * 4) + *(int *)(param_1 - 4 + lVar3 * 4) + *(int *)(param_1 + i * 4) == 0) {\n          return 1;\n        }\n        i++;\n      }\n      lVar2++;\n    }\n  }\n}", "int func0(int param_1, int param_2) {\n  int lVar1 = 1;\n  int lVar2;\n  int iVar3;\n  int lVar4 = 1;\n  \n  if (param_2 > 0) {\n    while (lVar1!= param_2) {\n      iVar3 = lVar1;\n      lVar4 = lVar1 + 1;\n      while (iVar3 < param_2) {\n        lVar2 = lVar4;\n        do {\n          if ((*(int *)(param_1 - 4 + lVar4 * 4) + *(int *)(param_1 - 4 + lVar1 * 4) +\n              *(int *)(param_1 + lVar2 * 4)) == 0) {\n            return 1;\n          }\n          lVar2++;\n        } while (lVar2 < param_2);\n        lVar4++;\n        iVar3 = lVar4;\n      }\n      lVar1++;\n    }\n  }\n  return 0;\n}", "int func0(int* param_1, int param_2) {\n  int lVar1 = 1;\n  int lVar2;\n  int iVar3;\n  int lVar4 = 1;\n  \n  if (param_2 > 0) {\n    while (lVar1!= param_2) {\n      iVar3 = lVar1;\n      lVar4 = lVar1 + 1;\n      while (iVar3 < param_2) {\n        lVar2 = lVar4;\n        do {\n          if (param_1[-4 + lVar4 * 4] + param_1[-4 + lVar1 * 4] + param_1[lVar2 * 4] == 0) {\n            return 1;\n          }\n          lVar2++;\n        } while (lVar2 < param_2);\n        lVar4++;\n        iVar3 = lVar4;\n      }\n      lVar1++;\n    }\n  }\n  return 0;\n}", "int func0(int param_1) {\n  return param_1 * param_1;\n}", "int func0(int param_1) {\n  return param_1 * param_1;\n}", "int func0(int param_1) {\n  return param_1 * param_1;\n}", "int func0(int param_1) {\n  return param_1 * param_1;\n}", "int func0(long param_1,int param_2)\n{\n  int local_c;\n  \n  for (local_c = 0; local_c < param_2; local_c++) {\n    *(int *)(param_1 + local_c * 4) += 1;\n  }\n  return 0;\n}", "int func0(int *param_1,int param_2) {\n  int *piVar1;\n  if (param_2 > 0) {\n    piVar1 = param_1 + (param_2 - 1);\n    while (param_1!= piVar1) {\n      *param_1 = *param_1 + 1;\n      param_1++;\n    }\n  }\n  return 0;\n}", "int func0(int *param_1,int param_2) {\n  int *piVar1;\n  if (param_2 > 0) {\n    piVar1 = param_1 + param_2 - 1;\n    while (param_1!= piVar1) {\n      *param_1 += 1;\n      param_1++;\n    }\n  }\n  return 0;\n}", "int func0(int *param_1,uint param_2)\n{\n  int iVar1 = _DAT_00102080;\n  int iVar2 = _UNK_00102084;\n  int iVar3 = _UNK_00102088;\n  int iVar4 = _UNK_0010208c;\n  uint uVar5;\n  int *piVar6;\n  int *piVar7;\n  \n  if (param_2 > 0) {\n    if (param_2 - 1 < 3) {\n      uVar5 = 0;\n    }\n    else {\n      piVar6 = param_1;\n      do {\n        piVar7 = piVar6 + 4;\n        *piVar6 = *piVar6 + iVar1;\n        piVar6[1] = piVar6[1] + iVar2;\n        piVar6[2] = piVar6[2] + iVar3;\n        piVar6[3] = piVar6[3] + iVar4;\n        piVar6 = piVar7;\n      } while (piVar7!= param_1 + (param_2 >> 2) * 4);\n      uVar5 = param_2 & 0xfffffffc;\n      if (param_2 % 4 == 0) {\n        return 0;\n      }\n    }\n    param_1[uVar5] = param_1[uVar5] + 1;\n    if (uVar5 + 1 < param_2) {\n      param_1[uVar5 + 1] = param_1[uVar5 + 1] + 1;\n      if (uVar5 + 2 < param_2) {\n        param_1[uVar5 + 2] = param_1[uVar5 + 2] + 1;\n      }\n    }\n  }\n  return 0;\n}", "int func0(long param_1, int param_2) {\n  int local_10 = 0;\n  while (param_2 > local_10) {\n    int local_c = local_10;\n    if (param_2 <= local_10) {\n      return 0;\n    }\n    while (local_c < param_2) {\n      local_c++;\n      if ((*(int *)(param_1 + local_c * 4) + *(int *)(param_1 + local_10 * 4)) == 0) {\n        return 1;\n      }\n    }\n    local_10++;\n  }\n  return 0;\n}", "int check(int* arr, int size, int target) {\n  if (size < 1) {\n    return 0;\n  }\n  int i = 1;\n  do {\n    if (i == size) {\n      return 0;\n    }\n    int j = i;\n    do {\n      if (arr[i - 1] + arr[j - 1] == 0) {\n        return 1;\n      }\n      j++;\n    } while (j < size);\n    i++;\n  } while (1);\n}", "int func0(int* param_1, int param_2) {\n  int lVar2 = 1;\n  int lVar3 = param_2 - 1 + 1;\n  if (lVar3!= 1) {\n    do {\n      int lVar1 = lVar2;\n      do {\n        if (*(param_1 + -4 + lVar2 * 4) + *(param_1 + lVar1 * 4) == 0) {\n          return 1;\n        }\n        lVar1++;\n      } while (lVar1 < param_2);\n      lVar2++;\n    } while (lVar2!= lVar3);\n  }\n  return 0;\n}", "int func0(int* param_1, int param_2) {\n  int lVar2 = 1;\n  int lVar3 = param_2 - 1 + 1;\n  if (lVar3!= 1) {\n    do {\n      int lVar1 = lVar2;\n      do {\n        if (*(param_1 + -4 + lVar2 * 4) + *(param_1 + lVar1 * 4) == 0) {\n          return 1;\n        }\n        lVar1++;\n      } while (lVar1 < param_2);\n      lVar2++;\n    } while (lVar3!= lVar2);\n  }\n  return 0;\n}", "void func0(int param_1,int param_2,long param_3)\n{\n  char* str = (char*)malloc((param_1 / param_2 + 1) * sizeof(char));\n  int i;\n  for (i = 0; i < param_1 / param_2; i++) {\n    str[i] = (char)((param_1 % (param_2 * (i + 1))) / param_2) + '0';\n  }\n  str[param_1 / param_2] = '\\0';\n  for (i = 0; i < strlen(str); i++) {\n    *(str + i + param_3) = str[i];\n  }\n  *(str + param_3 + strlen(str)) = '\\0';\n  return str;\n}", "void func0(ulong param_1,int param_2,char *param_3)\n{\n  ulong uVar1;\n  ulong uVar2;\n  char *pcVar3;\n  long lVar4;\n  int iVar6;\n  char local_38[40];\n  long local_10;\n  \n  local_10 = *(long *)(0x28);\n  if (param_1 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    lVar4 = 1;\n    do {\n      iVar6 = (int)lVar4;\n      uVar1 = (ulong)((param_1 >> 31) << 20 | param_1 & 0xffffffff);\n      uVar2 = uVar1 / param_2;\n      local_38[lVar4 - 1] = (char)(uVar1 % param_2) + '0';\n      param_1 = (ulong)uVar2 & 0xffffffff;\n      lVar4++;\n    } while (uVar2 > 0);\n    if (iVar6 < 1) {\n      iVar6 = 0;\n    }\n    else {\n      pcVar3 = local_38 + iVar6;\n      pcVar3 = pcVar3 - 1;\n      while (pcVar3 >= local_38) {\n        *param_3 = *pcVar3;\n        param_3++;\n        pcVar3--;\n      }\n    }\n  }\n  *param_3 = '\\0';\n  if (local_10 == *(long *)(0x28)) {\n    return 0;\n  }\n  return -1;\n}", "int func0(int param_1,int param_2,undefined *param_3)\n{\n  int iVar1;\n  int iVar3;\n  long lVar4;\n  uint uVar6;\n  long lVar7;\n  if (param_1 < 0) return 0;\n  lVar7 = 0;\n  while (param_1 > 0) {\n    iVar3 = param_1 / param_2;\n    uVar6 = param_1 % param_2 + 0x30;\n    param_1 = iVar3;\n    lVar7++;\n  }\n  for (iVar3 = 0; iVar3 < lVar7; iVar3++) {\n    param_3[iVar3] = (char)uVar6;\n  }\n  return lVar7;\n}", "int func0(int param_1,int param_2,char *param_3)\n{\n  if (param_1 < 0) return 0;\n  char *end = param_3 + strlen(param_3);\n  int i = 0;\n  while (param_1 > 0) {\n    *end = (param_1 % param_2) + '0';\n    end--;\n    param_1 /= param_2;\n    i++;\n  }\n  memmove(param_3, param_3 + i, strlen(param_3) - i + 1);\n  return strlen(param_3);\n}", "float func0(float param_1, float param_2) {\n  return DAT_00102098 * param_1 * param_2;\n}", "float func0(float param_1, float param_2) {\n  return param_1 * param_2 * 0.0000000004f;\n}", "float func0(float param_1, float param_2) {\n  return param_1 * paramfloat func0(float param_1, float param_2) {\n  return param_1 * paramint func0(int param_1) {\n  int local_1a8[102];\n  int i;\n  for (i = 0; i < 4; i++) {\n    local_1a8[i] = 0;\n  }\n  local_1a8[2] = 2;\n  for (i = 4; i <= param_1; i++) {\n    local_1a8[i] = local_1a8[i - 1] + local_1a8[i - 2] + local_1a8[i - 3] + local_1a8[i - 4];\n  }\n  return local_1a8[param_1];\n}", "int func0(int param_1) {\n  int local_1a8[102];\n  int i;\n  for (i = 0; i < 4; i++) {\n    local_1a8[i] = 0;\n  }\n  local_1a8[2] = 2;\n  if (param_1 > 3) {\n    for (i = 4; i < param_1; i++) {\n      local_1a8[i] = local_1a8[i - 1] + local_1a8[i - 2] + local_1a8[i - 3] + local_1a8[i - 4];\n    }\n  }\n  return local_1a8[param_1];\n}", "int func0(int param_1) {\n  int iVar1 = 0;\n  int iVar2 = 2;\n  int iVar5 = 0;\n  int iVar6 = 0;\n  int* piVar3 = (int*)malloc((param_1 - 4) * sizeof(int));\n  int* piVar4 = piVar3 + 1;\n  \n  for (int i = 0; i < param_1 - 4; i++) {\n    piVar3[i] = iVar1 + iVar2 + iVar5 + iVar6;\n    iVar1 = piVar3[i];\n    iVar2 = piVar3[i - 1];\n    iVar5 = piVar4[i];\n    iVar6 = piVar3[i - 1];\n    piVar4 = piVar3 + i + 1;\n  }\n  \n  return piVar3[param_1 - 4];\n}", "int func0(int param_1) {\n  int uVar1;\n  int uVar2;\n  int *puVar3;\n  int iVar4;\n  int iVar5;\n  int *piVar6;\n  int iVar7;\n  int local_10;\n  int local_1a8;\n  int uStack_1a0;\n  \n  local_10 = 0;\n  local_1a8 = 0x70;\n  uStack_1a0 = 0x2078;\n  if (3 < param_1) {\n    if (param_1 < 7) {\n      iVar5 = 4;\n    }\n    else {\n      for (iVar4 = 0; iVar4 < param_1 - 1; iVar4++) {\n        local_1a8 += uStack_1a0 + (local_1a8 >> 0x20) + *(int *)&local_1a8;\n        uStack_1a0 += local_1a8 + (uStack_1a0 >> 0x20) + *(int *)&local_1a8;\n      }\n    }\n    for (iVar5 = 4; iVar5 <= param_1; iVar5++) {\n      *(int *)&local_1a8[iVar5 - 4] = *(int *)&local_1a8[iVar5 - 5] + *(int *)&local_1a8[iVar5 - 6] + *(int *)&local_1a8[iVar5 - 7] + *(int *)&local_1a8[iVar5 - 8];\n    }\n  }\n  if (local_10 == 0) {\n    return local_1a8;\n  }\n  __stack_chk_fail();\n}", "float func0(long param_1,int param_2)\n{\n  float uVar1;\n  float fVar2;\n  int local_14;\n  int local_10;\n  \n  for (local_14 = 0; local_14 < param_2; local_14++) {\n    for (local_10 = local_14 + 1; local_10 < param_2; local_10++) {\n      if (*(float *)(param_1 + (long)local_10 * 4) < *(float *)(param_1 + (long)local_14 * 4)) {\n        uVar1 = *(float *)(param_1 + (long)local_14 * 4);\n        *(float *)(param_1 + (long)local_14 * 4) = *(float *)(param_1 + (long)local_10 * 4);\n        *(float *)(param_1 + (long)local_10 * 4) = uVar1;\n      }\n    }\n  }\n  if (param_2 % 2 == 1) {\n    fVar2 = *(float *)(param_1 + (long)(param_2 / 2) * 4);\n  }\n  else {\n    fVar2 = DAT_001020f8 * (*(float *)(param_1 + (long)(param_2 / 2) * 4) + *(float *)(param_1 + (long)(param_2 / 2) * 4 + -4));\n  }\n  return fVar2;\n}", "float func0(float *param_1,int param_2)\n{\n  if (param_2 > 0) {\n    for (int i = 1; i < param_2; i++) {\n      for (int j = 0; j < param_2 - i; j++) {\n        if (param_1[j] < param_1[j + 1]) {\n          float temp = param_1[j];\n          param_1[j] = param_1[j + 1];\n          param_1[j + 1] = temp;\n        }\n      }\n    }\n  }\n  if (param_2 % 2 == 1) {\n    return param_1[param_2 / 2];\n  }\n  return (param_1[param_2 / 2 - 1] + param_1[param_2 / 2]) * 1.0;\n}", "float func0(float *param_1,int param_2)\n{\n  if (param_2 > 0) {\n    for (int i = 1; i < param_2; i++) {\n      for (int j = 0; j < i; j++) {\n        if (param_1[j] < param_1[i]) {\n          float temp = param_1[j];\n          param_1[j] = param_1[i];\n          param_1[i] = temp;\n        }\n      }\n    }\n  }\n  return (param_2 % 2 == 0)? (param_1[param_2 / 2] + param_1[param_2 / 2 - 1]) * 1.0f : param_1[param_2 / 2];\n}", "float func0(float *param_1,int param_2)\n{\n  if (param_2 > 1) {\n    for (int i = 1; i < param_2; i++) {\n      for (int j = 0; j < i; j++) {\n        if (param_1[j] < param_1[i]) {\n          float temp = param_1[j];\n          param_1[j] = param_1[i];\n          param_1[i] = temp;\n        }\n      }\n    }\n  }\n  return (param_2 % 2 == 0)? (param_1[param_2 / 2] + param_1[param_2 / 2 - 1]) * 1.0f : param_1[param_2 / 2];\n}", "int isPalindrome(char *str) {\n  size_t len = strlen(str);\n  int i = 0;\n  while (i < len / 2) {\n    if (str[i]!= str[len - 1 - i]) return 0;\n    i++;\n  }\n  return 1;\n}", "int compare_strings(const char *str1, const char *str2) {\n  int len1 = strlen(str1);\n  int len2 = strlen(str2);\n  if (len1 < len2) return 1;\n  if (len1 > len2) return 0;\n  while (*str1 == *str2 && *str1!= '\\0') {\n    str1++;\n    str2++;\n  }\n  return *str1 - *str2;\n}", "int compare_strings(char *str) {\n  int len = strlen(str);\n  if (len < 2) {\n    return 1;\n  }\n  for (int i = 0; i < len / 2; i++) {\n    if (str[i]!= str[len - i - 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}", "int compare_strings(char *str) {\n  int len = strlen(str);\n  if (len < 2) {\n    return 1;\n  }\n  for (int i = 0; i < len / 2; i++) {\n    if (str[i]!= str[len - i - 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}", "int func0(int param_1,int param_2) {\n  int local_10 = 1;\n  for (int local_c = 0; local_c < param_1; local_c++) {\n    local_10 = (local_10 * 2) % param_2;\n  }\n  return local_10;\n}", "int func0(int param_1,int param_2) {\n  int iVar1 = 0;\n  int iVar2 = 1;\n  if (param_1 < 1) {\n    iVar2 = 1;\n  }\n  else {\n    do {\n      iVar2 = (iVar2 * 2) % param_2;\n      iVar1++;\n    } while (iVar1!= param_1);\n  }\n  return iVar2;\n}", "ulong func0(int param_1,int param_2)\n{\n  ulong uVar1;\n  int iVar2;\n  int iVar3;\n  \n  if (param_1 > 0) {\n    iVar2 = 0;\n    iVar3 = 1;\n    while (iVar2 < param_1) {\n      iVar2++;\n      uVar1 = (iVar3 * 2) % param_2;\n      iVar3 = (int)uVar1;\n    }\n    return uVar1;\n  }\n  return 1;\n}", "ulong func0(int param_1,int param_2)\n{\n  ulong uVar1;\n  int iVar2;\n  int iVar3;\n  \n  if (param_1 > 0) {\n    iVar2 = 0;\n    iVar3 = 1;\n    while (iVar2 < param_1) {\n      iVar2++;\n      uVar1 = (iVar3 * 2) % param_2;\n      iVar3 = (int)uVar1;\n    }\n    return uVar1;\n  }\n  return 1;\n}", "int func0(char *str, int len) {\n  if (len == 0) {\n    return 0x15;\n  }\n  else {\n    return 5;\n  }\n  size_t str_len = strlen(str);\n  for (size_t i = 0; i < str_len; i++) {\n    int code = str[i] - 0x61 + func0(str, len);\n    str[i] = 'a' + (code / 26) * -1;\n  }\n  return 0;\n}", "int func0(char *str, int len) {\n  int i;\n  for (i = 0; str[i]; i++) {\n    str[i] = (str[i] + (len == 0? -0x5c : 0) + 'a') % 0x1a + 'a';\n  }\n  return i;\n}", "int func0(char *str, int param_2) {\n  int i;\n  for (i = 0; str[i]; i++) {\n    str[i] = (char)(((((param_2 == 0)? -16 : 0) - 92) + str[i]) + ((str[i] / 26) * -26) + 'a');\n  }\n  return 0;\n}", "int func0(undefined *param_1, int param_2) {\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  uint uVar18;\n  uint uVar19;\n  uint uVar20;\n  uint uVar21;\n  uint uVar22;\n  uint uVar23;\n  uint uVar24;\n  uint uVar25;\n  uint uVar26;\n  uint uVar27;\n  uint uVar28;\n  uint uVar29;\n  uint uVar30;\n  uint uVar31;\n  uint uVar32;\n  uint uVar33;\n  uint uVar34;\n  uint uVar35;\n  uint uVar36;\n  uint uVar37;\n  uint uVar38;\n  uint uVar39;\n  uint uVar40;\n  uint uVar41;\n  uint uVar42;\n  uint uVar43;\n  uint uVar44;\n  uint uVar45;\n  uint uVar46;\n  uint uVar47;\n  uint uVar48;\n  uint uVar49;\n  uint uVar50;\n  uint uVar51;\n  uint uVar52;\n  uint uVar53;\n  uint uVar54;\n  uint uVar55;\n  uint uVar56;\n  uint uVar57;\n  uint uVar58;\n  uint uVar59;\n  uint uVar60;\n  uint uVar61;\n  uint uVar62;\n  uint uVar63;\n  uint uVar64;\n  uint uVar65;\n  uint uVar66;\n  uint uVar67;\n  uint uVar68;\n  uint uVar69;\n  uint uVar70;\n  uint uVar71;\n  uint uVar72;\n  uint uVar73;\n  uint uVar74;\n  uint uVar75;\n  uint uVar76;\n  uint uVar77;\n  uint uVar78;\n  uint uVar79;\n  uint uVar80;\n  uint uVar81;\n  uint uVar82;\n  uint uVar83;\n", "char *func0(char *param_1) {\n  char *pcVar1;\n  char *local_20;\n  char *local_18 = param_1;\n  \n  for (local_20 = param_1; *local_20!= '\\0'; local_20++) {\n    pcVar1 = strchr(\"AEIOUaeiou\", *local_20);\n    if (!pcVar1) {\n      *local_18 = *local_20;\n      local_18++;\n    }\n  }\n  *local_18 = '\\0';\n  return local_18;\n}", "char *func0(char *param_1) {\n  while (*param_1) {\n    if (strchr(\"AEIOUaeiou\", *param_1)) {\n      param_1++;\n    } else {\n      *param_1 = '\\0';\n      return param_1;\n    }\n    param_1++;\n  }\n  return param_1;\n}", "char *func0(char *param_1) {\n  char *pcVar1 = param_1;\n  char cVar2 = *param_1;\n  char *pcVar3 = param_1;\n  \n  while (cVar2!= '\\0') {\n    while (strchr(\"AEIOUaeiou\", cVar2) == NULL) {\n      param_1++;\n      *pcVar3 = cVar2;\n      pcVar3++;\n      cVar2 = *param_1;\n      if (cVar2 == '\\0') break;\n    }\n    param_1++;\n    cVar2 = *param_1;\n  }\n  *pcVar3 = '\\0';\n  return param_1;\n}", "char *func0(char *param_1) {\n  while (*param_1) {\n    if (strchr(\"AEIOUaeiou\", *param_1) == NULL) {\n      *param_1 = '\\0';\n      return param_1;\n    }\n    param_1++;\n  }\n  return param_1;\n}", "int func0(long param_1, int param_2, int param_3) {\n  int local_c = 0;\n  while (param_2 > local_c) {\n    if (param_3 <= *(int *)(param_1 + local_c * 4)) return 0;\n    local_c++;\n  }\n  return 1;\n}", "int func0(int *arr, int n, int target) {\n  if (n < 1) {\n    return 1;\n  }\n  int *end = arr + (n - 1) + 1;\n  while (arr!= end) {\n    if (target <= *arr) {\n      return 0;\n    }\n    arr++;\n  }\n  return 1;\n}", "int func0(int *arr, int size, int threshold) {\n  if (size > 0) {\n    for (int i = 0; i < size; i++) {\n      if (threshold <= arr[i]) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n}", "int func0(int *arr, int n, int threshold) {\n  if (n > 0) {\n    int *end = arr + n - 1;\n    while (arr!= end) {\n      if (*arr <= threshold) {\n        return 0;\n      }\n      arr++;\n    }\n  }\n  return 1;\n}", "int func0(int param_1, int param_2) {\n  int result = param_1 + param_2;\n  return result;\n}", "int func0(int param_1, int param_2) {\n  return param_1 + param_2;\n}", "int func0(int param_1, int param_2) {\n  return param_1 + param_2;\n}", "int func0(int param_1, int param_2) {\n  return param_1 + param_2;\n}", "int compare_strings(char *str1, char *str2) {\n  int len1 = strlen(str1);\n  int len2 = strlen(str2);\n  for (int i = 0; i < len1; i++) {\n    bool found = false;\n    for (int j = 0; j < len2; j++) {\n      if (str1[i] == str2[j]) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return 0;\n    }\n  }\n  int i = 0;\n  do {\n    if (i >= len2) {\n      return 1;\n    }\n    bool found = false;\n    for (int j = 0; j < len1; j++) {\n      if (str2[i] == str1[j]) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return 0;\n    }\n    i++;\n  } while (true);\n  return 1; // unreachable code, but compiler will optimize it out\n}", "int compare_strings(const char *str1, const char *str2) {\n  int len1 = strlen(str1);\n  int len2 = strlen(str2);\n  if (len1 < 1 || len2 < 1) return 1;\n  if (len1 < len2) return 0;\n  while (*str1 == *str2 && str1!= str1 + len1 - 1 && str2!= str2 + len2 - 1) {\n    str1++;\n    str2++;\n  }\n  if (str1 == str1 + len1 - 1) return 1;\n  if (str2 == str2 + len2 - 1) return 0;\n  while (*str1 == *str2 && str2!= str2 + len2 - 1) {\n    str1++;\n    str2++;\n  }\n  return 0;\n}", "bool func0(char *param_1, char *param_2) {\n  size_t len1 = strlen(param_1);\n  size_t len2 = strlen(param_2);\n  if (len1 < 1) return len2 < 1;\n  for (size_t i = 0; i < len2; i++) {\n    for (size_t j = 0; j < len1; j++) {\n      if (param_1[j] == param_2[i]) {\n        for (size_t k = i + 1; k < len2; k++) {\n          if (param_2[k]!= param_1[j + k - i]) return false;\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}", "bool func0(char *param_1, char *param_2) {\n  size_t len1 = strlen(param_1);\n  size_t len2 = strlen(param_2);\n  if (len1 < 1) return len2 < 1;\n  for (size_t i = 0; i < len2; i++) {\n    char *p1 = param_1;\n    char *p2 = param_2 + i;\n    while (*p1!= *p2) {\n      p1++;\n      if (p1 == param_1 + len1) return false;\n    }\n    if (p1 == param_1 + len1 - 1) return true;\n  }\n  return false;\n}", "int func0(int param_1) {\n  int aiStack_fb0[1000];\n  int local_fbc;\n  int sum = 0;\n  for (local_fbc = 2; local_fbc <= param_1; local_fbc++) {\n    sum += aiStack_fb0[local_fbc - 2] + aiStack_fb0[local_fbc - 1];\n    aiStack_fb0[local_fbc - 2] = sum;\n  }\n  return aiStack_fb0[param_1 - 2];\n}", "int func0(int param_1) {\n  int local_fb0[1000];\n  int* puVar1 = local_fb0;\n  int lVar2 = 500;\n  while (lVar2--) {\n    *puVar1 = 0;\n    puVar1++;\n  }\n  *puVar1 = 1;\n  if (param_1 > 1) {\n    while (puVar1 - local_fb0 < param_1 - 2) {\n      *puVar1 = *(puVar1 - 1) + *(puVar1 - 2);\n      puVar1++;\n    }\n  }\n  return param_1 > 1? local_fb0[param_1 - 2] : 0;\n}", "int func0(int param_1) {\n  int i, j, sum = 0;\n  if (param_1 < 2) return 0;\n  for (i = 1; i < param_1; i++) {\n    sum += i;\n  }\n  return sum;\n}", "int func0(int param_1) {\n  int local_10;\n  int local_8;\n  int local_4;\n  int local_0;\n  int local_1;\n  int local_2;\n  int local_3;\n  int local_5;\n  int local_6;\n  int local_7;\n  int local_9;\n  int local_fb0[1000];\n  int local_fb8;\n  int local_fb4;\n  int local_fb2;\n  int local_fb0_1;\n  int local_fb0_2;\n  int local_fb0_3;\n  int local_fb0_4;\n  int local_fb0_5;\n  int local_fb0_6;\n  int local_fb0_7;\n  int local_fb0_8;\n  int local_fb0_9;\n  int local_fb0_10;\n  int local_fb0_11;\n  int local_fb0_12;\n  int local_fb0_13;\n  int local_fb0_14;\n  int local_fb0_15;\n  int local_fb0_16;\n  int local_fb0_17;\n  int local_fb0_18;\n  int local_fb0_19;\n  int local_fb0_20;\n  int local_fb0_21;\n  int local_fb0_22;\n  int local_fb0_23;\n  int local_fb0_24;\n  int local_fb0_25;\n  int local_fb0_26;\n  int local_fb0_27;\n  int local_fb0_28;\n  int local_fb0_29;\n  int local_fb0_30;\n  int local_fb0_31;\n  int local_fb0_32;\n  int local_fb0_33;\n  int local_fb0_34;\n  int local_fb0_35;\n  int local_fb0_36;\n  int local_fb0_37;\n  int local_fb0_38;\n  int local_fb0_39;\n  int local_fb0_40;\n  int local_fb0_41;\n  int local_fb0_42;\n  int local_fb0_43;\n  int local_fb0_44;\n  int local_fb0_45;\n  int local_fb0_46;\n  int local_fb0_47;\n  int local_fb0_48;\n  int local_fb0_49;\n  int local_fb0_50;\n  int local_fb0_51;\n  int", "bool func0(long param_1) {\n  int count = 0;\n  int index = 0;\n  \n  while (param_1[index]!= '\\0') {\n    if (param_1[index] == '<') {\n      count++;\n    } else if (param_1[index] == '>') {\n      count--;\n    }\n    if (count < 0) break;\n    index++;\n  }\n  return count == 0;\n}", "bool func0(char *param_1) {\n  char cVar1;\n  int iVar2;\n  char *pcVar3;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    return true;\n  }\n  iVar2 = 0;\n  pcVar3 = param_1 + 1;\n  while (*pcVar3!= '\\0') {\n    if (cVar1 == '<') {\n      iVar2++;\n    } else if (cVar1 == '>') {\n      iVar2--;\n    }\n    if (iVar2 < 0) {\n      return false;\n    }\n    cVar1 = *pcVar3;\n    pcVar3++;\n  }\n  return iVar2 == 0;\n}", "bool func0(char *param_1) {\n  char cVar1;\n  int iVar2 = 0;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    return true;\n  }\n  while (cVar1!= '\\0') {\n    if (cVar1 == '<') {\n      iVar2++;\n    } else if (cVar1 == '>') {\n      if (iVar2 == 0) {\n        return false;\n      }\n      iVar2--;\n    }\n    cVar1 = *param_1;\n    param_1++;\n  }\n  return iVar2 == 0;\n}", "bool func0(char *param_1) {\n  char cVar1;\n  int iVar2 = 0;\n  \n  cVar1 = *param_1;\n  if (cVar1 == '\\0') {\n    return true;\n  }\n  while (cVar1!= '\\0') {\n    if (cVar1 == '<') {\n      iVar2++;\n    } else if (cVar1 == '>') {\n      if (iVar2 == 0) {\n        return false;\n      }\n      iVar2--;\n    }\n    cVar1 = *param_1;\n    param_1++;\n  }\n  return iVar2 == 0;\n}", "bool func0(long param_1,int param_2)\n{\n  int local_14 = 0;\n  int local_10 = 0;\n  for (int i = 1; i < param_2; i++) {\n    float a = *(float *)(param_1 + i * 4);\n    float b = *(float *)(param_1 + i * 4 - 4);\n    if (a < b) local_14 = 1;\n    if (b < a) local_10 = 1;\n  }\n  return local_10 + local_14!= 2;\n}", "bool func0(float *param_1,int param_2)\n{\n  if (param_2 < 2) {\n    return false;\n  }\n  for (int i = 1; param_1 + i!= param_1 + (param_2 - 1); i++) {\n    if (*param_1 < param_1[1]) {\n      return true;\n    }\n    if (param_1[1] < *param_1) {\n      return true;\n    }\n    param_1++;\n  }\n  return false;\n}", "bool func0(float *param_1,int param_2) {\n  if (param_2 < 3) return true;\n  for (float *p = param_1 + 1; p!= param_1 + param_2 - 1; p++) {\n    if (*p < *(p - 1)) return false;\n    if (*(p - 1) < *p) return true;\n  }\n  return false;\n}", "int func0(float *arr, int n) {\n  if (n < 2) return 1;\n  int i, j, count = 0;\n  float max = arr[0], min = arr[0];\n  for (i = 1; i < n; i++) {\n    if (arr[i] > max) max = arr[i];\n    if (arr[i] < min) min = arr[i];\n  }\n  for (i = 0; i < n; i++) {\n    if (arr[i] < max && arr[i] > min) count++;\n  }\n  return count!= 2;\n}", "int* func0(int param_1, int param_2, int param_3, int param_4, int* param_5) {\n  int* pvVar3 = (int*)malloc(param_2 * sizeof(int));\n  int local_28 = 0;\n  int local_24 = 0;\n  while (1) {\n    if (local_24 >= param_2) {\n      *param_5 = local_28;\n      return pvVar3;\n    }\n    bool bVar2 = false;\n    for (int local_1c = 0; local_1c < local_28; local_1c++) {\n      if (pvVar3[local_1c] == param_1 + local_24 * 4) {\n        bVar2 = true;\n        break;\n      }\n    }\n    if (!bVar2) {\n      for (int local_20 = 0; local_20 < param_4; local_20++) {\n        if (param_1 + local_24 * 4 == param_3 + local_20 * 4) {\n          pvVar3[local_28] = param_1 + local_24 * 4;\n          local_28++;\n          break;\n        }\n      }\n    }\n    local_24++;\n  }\n}", "int func0(int *param_1,int param_2,int *param_3,int param_4,int *param_5)\n{\n  int iVar1;\n  int *piVar2;\n  int *piVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  \n  piVar2 = malloc((param_2 << 2));\n  if (param_2 < 1) {\n    iVar6 = 0;\n  }\n  else {\n    piVar4 = param_1 + (param_2 - 1) + 1;\n    iVar6 = 0;\n    for (iVar6 = 0; param_1!= piVar4; param_1++) {\n      if (iVar6 > 0) {\n        for (piVar3 = piVar2; piVar3!= piVar2 + iVar6 - 1; piVar3++) {\n          if (*piVar3 == *param_1) goto LAB_00101206;\n        }\n      }\n      if (param_4 > 0) {\n        for (piVar3 = param_3; piVar3!= param_3 + param_4 - 1; piVar3++) {\n          if (*param_1 == *piVar3) {\n            piVar2[iVar6] = *param_1;\n            iVar6++;\n            break;\n          }\n        }\n      }\nLAB_00101206:\n    }\n    iVar5 = iVar6 - 1;\n    if (iVar5 > 0) {\n      for (iVar5 = iVar6 - 1; iVar5 > 0; iVar5--) {\n        for (piVar4 = piVar2; piVar4!= piVar2 + iVar5; piVar4++) {\n          iVar1 = *piVar4;\n          if (piVar4[1] < iVar1) {\n            *piVar4 = piVar4[1];\n            piVar4[1] = iVar1;\n          }\n        }\n      }\n    }\n  }\n  *param_5 = iVar6;\n  return iVar6;\n}", "int merge_sort(int *arr, int size, int *sorted, int max_size, int *count) {\n  int *sorted_arr = (int *)malloc(size * sizeof(int));\n  if (size < 1) {\n    *count = 0;\n    return 0;\n  }\n  int i = 0;\n  int *end = arr + size - 1 + 1;\n  do {\n    if (i!= 0) {\n      int *ptr = sorted_arr;\n      do {\n        if (*ptr == *arr) goto found;\n        ptr++;\n      } while (ptr!= sorted_arr + i - 1 + 1);\n    }\n    if (0 < max_size) {\n      int *ptr = sorted;\n      do {\n        if (*arr == *ptr) {\n          *sorted_arr = *arr;\n          i++;\n          break;\n        }\n        ptr++;\n      } while (sorted + max_size - 1 + 1!= ptr);\n    }\nfound:\n    arr++;\n    if (arr == end) {\n      int j = i - 1;\n      if (0 < j) {\n        do {\n          int k = j - 1;\n          do {\n            if (sorted_arr[k + 1] < sorted_arr[k]) {\n              sorted_arr[k + 1] = sorted_arr[k];\n              sorted_arr[k] = *arr;\n            }\n            k--;\n          } while (k!= -1);\n          j--;\n        } while (j!= 0);\n      }\n      *count = i;\n      free(sorted_arr);\n      return 0;\n    }\n  } while (true);\n}", "int* sort_and_count_duplicates(int* arr, int size, int* max_index, int threshold, int* count) {\n  int* unique_arr = (int*)malloc(size * sizeof(int));\n  if (size < 1) {\n    *count = 0;\n    return NULL;\n  }\n  int i = 0;\n  int* end = arr + size - 1;\n  do {\n    int found = 0;\n    if (i!= 0) {\n      int* unique_end = unique_arr;\n      do {\n        if (*unique_end == *arr) {\n          found = 1;\n          break;\n        }\n        unique_end++;\n      } while (unique_end!= unique_arr + i);\n    }\n    if (threshold > 0) {\n      int* current = arr;\n      do {\n        if (*arr == *current) {\n          int j = i;\n          do {\n            if (unique_arr[j] == *arr) {\n              found = 1;\n              break;\n            }\n            j++;\n          } while (unique_arr[j]!= 0);\n          break;\n        }\n        current++;\n      } while (current!= arr + threshold);\n    }\n    if (!found) {\n      unique_arr[i] = *arr;\n      i++;\n    }\n    arr++;\n    if (arr == end + 1) {\n      int j = i - 1;\n      do {\n        int k = j - 1;\n        do {\n          if (unique_arr[k] > unique_arr[k + 1]) {\n            int temp = unique_arr[k];\n            unique_arr[k] = unique_arr[k + 1];\n            unique_arr[k + 1] = temp;\n          }\n          k--;\n        } while (k!= -1);\n        j--;\n      } while (j!= 0);\n      *count = i;\n      free(unique_arr);\n      return arr;\n    }\n  } while (true);\n}", "int func0(int param_1) {\n  int local_1c = param_1;\n  int local_c = 2;\n  \n  while (local_c * local_c <= local_1c) {\n    while (local_1c % local_c == 0 && local_c < local_1c) {\n      local_1c /= local_c;\n    }\n    local_c++;\n  }\n  return local_1c;\n}", "int func0(int param_1) {\n  int iVar2 = 2;\n  while (iVar2 * iVar2 <= param_1) {\n    int iVar3 = param_1 % iVar2;\n    while (iVar3 == 0 && iVar2 < param_1) {\n      param_1 = param_1 / iVar2;\n      iVar3 = (param_1 >> 31)? (iVar2 - (param_1 % iVar2)) : (param_1 % iVar2);\n    }\n    iVar2++;\n  }\n  return param_1;\n}", "int func0(int param_1) {\n  int iVar2 = 2;\n  while (iVar2 * iVar2 <= param_1) {\n    int iVar3 = param_1 % iVar2;\n    while (iVar3 == 0 && iVar2 < param_1) {\n      param_1 = param_1 / iVar2;\n      iVar3 = (param_1 >> 31)? (iVar2 - (param_1 % iVar2)) : (param_1 % iVar2);\n    }\n    iVar2++;\n  }\n  return param_1;\n}", "int func0(int param_1) {\n  int iVar2 = 2;\n  while (iVar2 * iVar2 <= param_1) {\n    int iVar3 = param_1 % iVar2;\n    while (iVar3 == 0 && iVar2 < param_1) {\n      param_1 = param_1 / iVar2;\n      iVar3 = (param_1 >> 31)? (iVar2 - (param_1 % iVar2)) : (param_1 % iVar2);\n    }\n    iVar2++;\n  }\n  return param_1;\n}", "int func0(int param_1) {\n  return (param_1 * (param_1 + 1)) / 2;\n}", "int func0(int param_1) {\n  return param_1 * (param_1 + 1) / 2;\n}", "int func0(int param_1) {\n  return param_1 * (param_1 + 1) / 2;\n}", "int func0(int param_1) {\n  return param_1 * (param_1 + 1) / 2;\n}", "bool balance_parentheses(char *str) {\n  int open = 0;\n  int i = 0;\n  while (true) {\n    if (str[i] == '\\0') return open == 0;\n    if (str[i] == '(') open++;\n    else if (str[i] == ')') open--;\n    if (open < 0) return false;\n    i++;\n  }\n}", "int check_string(char *str) {\n  int i = 0;\n  int len = strlen(str);\n  int count = 0;\n  int open = 0;\n  int close = 0;\n\n  for (i = 0; i < len; i++) {\n    if (str[i] == '(') {\n      open++;\n    } else if (str[i] == ')') {\n      close++;\n    }\n  }\n\n  if (open == close) {\n    return 1;\n  } else {\n    return 0;\n  }\n}", "int balance_parentheses(char *str) {\n  int balance = 0;\n  while (*str!= '\\0') {\n    if (*str == '(') {\n      balance++;\n    } else if (*str == ')') {\n      balance--;\n      if (balance == -1) {\n        return 0;\n      }\n    }\n    str++;\n  }\n  return balance;\n}", "int balance_parentheses(char *str) {\n  int balance = 0;\n  for (char *p = str; *p!= '\\0'; p++) {\n    if (*p == '(') balance++;\n    else if (*p == ')') {\n      balance--;\n      if (balance < 0) return 0;\n    }\n  }\n  return balance == 0;\n}", "float* func0(long param_1,int param_2,long param_3) {\n  int local_c;\n  \n  for (local_c = 1; local_c < param_2; local_c++) {\n    *(float *)(param_3 + local_c * 4 - 4) = \n         *(float *)(param_1 + local_c * 4) * local_c;\n  }\n  return NULL;\n}", "void func0(long param_1,int param_2,long param_3)\n{\n  long lVar1;\n  \n  if (param_2 > 1) {\n    lVar1 = 1;\n    while (lVar1 <= param_2 - 2) {\n      *(float *)(param_3 + -4 + lVar1 * 4) = (float)(int)lVar1 * *(float *)(param_1 + lVar1 * 4);\n      lVar1++;\n    }\n  }\n  return param_2;\n}", "void func0(long param_1,int param_2,long param_3)\n{\n  long lVar1;\n  \n  if (param_2 > 1) {\n    lVar1 = 1;\n    while (lVar1 < param_2) {\n      *(float *)(param_3 + -4 + lVar1 * 4) = (float)(int)lVar1 * *(float *)(param_1 + lVar1 * 4);\n      lVar1++;\n    }\n  }\n  return param_2;\n}", "float* func0(long param_1, int param_2, ulong param_3) {\n  int iVar1 = _DAT_001020f0;\n  int iVar8 = _UNK_001020fc;\n  int iVar7 = _UNK_001020f8;\n  int iVar10 = _UNK_001020f4;\n  int iVar13 = _DAT_001020e0;\n  int iVar14 = _UNK_001020e4;\n  int iVar15 = _UNK_001020e8;\n  int iVar16 = _UNK_001020ec;\n  int iVar17 = 0;\n  int iVar18 = 0;\n  int iVar19 = 0;\n  int iVar20 = 0;\n  int iVar21 = 0;\n  int iVar22 = 0;\n  int iVar23 = 0;\n  int iVar24 = 0;\n  int iVar25 = 0;\n  int iVar26 = 0;\n  int iVar27 = 0;\n  int iVar28 = 0;\n  int iVar29 = 0;\n  int iVar30 = 0;\n  int iVar31 = 0;\n  int iVar32 = 0;\n  int iVar33 = 0;\n  int iVar34 = 0;\n  int iVar35 = 0;\n  int iVar36 = 0;\n  int iVar37 = 0;\n  int iVar38 = 0;\n  int iVar39 = 0;\n  int iVar40 = 0;\n  int iVar41 = 0;\n  int iVar42 = 0;\n  int iVar43 = 0;\n  int iVar44 = 0;\n  int iVar45 = 0;\n  int iVar46 = 0;\n  int iVar47 = 0;\n  int iVar48 = 0;\n  int iVar49 = 0;\n  int iVar50 = 0;\n  int iVar51 = 0;\n  int iVar52 = 0;\n  int iVar53 = 0;\n  int iVar54 = 0;\n  int iVar55 = 0;\n  int iVar56 = 0;\n  int iVar57 = 0;\n  int iVar58 = 0;\n  int iVar59 = 0;\n  int iVar60 = 0;\n  int iVar61 = 0;\n  int iVar62 = 0;\n  int iVar63 = 0;\n  int iVar64 = 0;\n  int iVar65 = ", "int func0(int param_1) {\n  int local_1ac;\n  int local_1a0[100];\n  int i;\n  int sum;\n\n  for (i = 3; i <= param_1; i++) {\n    sum = local_1a0[i - 2] + local_1a0[i - 1] + local_1a0[i - 3];\n    local_1a0[i - 2] = sum;\n  }\n  return local_1a0[param_1 - 2];\n}", "int func0(int param_1) {\n  int local_1a0[100];\n  int result = 0;\n  int i;\n\n  for (i = 0; i < 32; i++) {\n    local_1a0[i] = 0;\n  }\n\n  local_1a0[0] = 1;\n\n  if (param_1 > 2) {\n    for (i = 3; i <= param_1; i++) {\n      result += local_1a0[i - 1];\n    }\n  }\n\n  return result;\n}", "int func0(int param_1) {\n  int piVar1, piVar2, iVar3, iVar5, iVar6;\n  long lVar4, local_10;\n  int aiStack_1a0[100];\n  int auStack_1a8[8];\n\n  local_10 = *(long *)(0x28);\n  for (lVar4 = 32; lVar4!= 0; lVar4--) {\n    auStack_1a8[0] = 0;\n  }\n  stack_0xfffffffffffffe5c = 0x100000000;\n  if (param_1 > 2) {\n    iVar6 = 0;\n    iVar5 = 1;\n    iVar3 = 0;\n    piVar1 = auStack_1a8 + 4;\n    while (piVar1 < aiStack_1a0 + (param_1 - 3)) {\n      piVar2 = piVar1 + 1;\n      piVar1[2] = iVar5 + iVar3 + iVar6;\n      iVar5 = piVar1[2];\n      iVar3 = *piVar2;\n      iVar6 = *piVar1;\n      piVar1 = piVar2;\n    }\n  }\n  if (local_10 == *(long *)(0x28)) {\n    return auStack_1a8[param_1 * 4];\n  }\n  __stack_chk_fail();\n}", "int func0(int param_1) {\n  int iVar1;\n  int *piVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  int iVar6;\n  int *puVar7;\n  int iVar8;\n  long in_FS_OFFSET;\n  int local_1a8;\n  int local_19c[99];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  for (lVar5 = 0x32; lVar5!= 0; lVar5 = lVar5 + -1) {\n    *puVar7 = 0;\n    puVar7 = puVar7 + 1;\n  }\n  local_1a8 = 0x100000000;\n  if (2 < param_1) {\n    if (param_1 < 6) {\n      iVar4 = 3;\n    }\n    else {\n      iVar6 = 1;\n      iVar1 = 0;\n      piVar2 = local_19c;\n      iVar3 = 3;\n      while (iVar3 < param_1) {\n        local_1a8 += iVar6 + iVar1;\n        *piVar2 = local_1a8;\n        iVar1 += local_1a8 + iVar6;\n        piVar2[1] = iVar1;\n        iVar6 += local_1a8 + iVar1;\n        iVar4 = iVar3 + 3;\n        iVar8 = iVar3 + 4;\n        piVar2[2] = iVar6;\n        piVar2 += 3;\n        iVar3 = iVar4;\n      }\n      piVar2 = local_19c + iVar4;\n      while (iVar4 <= param_1) {\n        iVar4++;\n        *piVar2 = piVar2[-1] + piVar2[-2] + piVar2[-3];\n        piVar2++;\n      }\n    }\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_1a8;\n  }\n  __stack_chk_fail();\n}", "int count_vowels(char *str) {\n  int count = 0;\n  int len = strlen(str);\n  for (int i = 0; i < len; i++) {\n    if (strchr(\"aeiouAEIOU\", str[i])!= NULL) {\n      count++;\n    }\n  }\n  if (len > 0 && (str[len - 1] == 'y' || str[len - 1] == 'Y')) {\n    count++;\n  }\n  return count;\n}", "int func0(char *param_1) {\n  int count = 0;\n  int i;\n  for (i = strlen(param_1) - 1; i >= 0; i--) {\n    if (param_1[i] =='') {\n      count++;\n    }\n  }\n  count += (param_1[strlen(param_1) - 1] & 0xdfU) == 0x59;\n  count += (strchr(\"aeiouAEIOU\", param_1[0])!= NULL);\n  return count;\n}", "int count_vowels(char *str) {\n  int count = 0;\n  int len = strlen(str);\n  if (len < 1) {\n    return 0;\n  }\n  for (int i = 0; i < len; i++) {\n    if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u' ||\n        str[i] == 'A' || str[i] == 'E' || str[i] == 'I' || str[i] == 'O' || str[i] == 'U') {\n      count++;\n    }\n  }\n  if (len > 1 && (str[len - 1] & 0xdfU) == 0x59) {\n    count++;\n  }\n  return count;\n}", "int count_vowels(char *str) {\n  int count = 0;\n  int len = strlen(str);\n  if (len < 1) {\n    return 0;\n  }\n  for (int i = 0; i < len; i++) {\n    if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u' ||\n        str[i] == 'A' || str[i] == 'E' || str[i] == 'I' || str[i] == 'O' || str[i] == 'U') {\n      count++;\n    }\n  }\n  if (len > 1 && (str[len - 1] & 0xdfU) == 0x59) {\n    count++;\n  }\n  return count;\n}", "char* func0(uint param_1, int param_2) {\n  char xs_3014[256];\n  int iVar2;\n  size_t sVar3;\n  long in_FS_OFFSET;\n  int local_50;\n  char local_48[56];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  sprintf(xs_3014, \"%d\", (ulong)param_1);\n  sVar3 = strlen(xs_3014);\n  iVar2 = (int)sVar3;\n  if (iVar2 < param_2) {\n    for (local_50 = 0; local_50 < iVar2 / 2; local_50++) {\n      char temp = xs_3014[local_50];\n      xs_3014[local_50] = xs_3014[iVar2 - 1 - local_50];\n      xs_3014[iVar2 - 1 - local_50] = temp;\n    }\n  } else {\n    strncpy(local_48, xs_3014 + (iVar2 - param_2), param_2);\n    local_48[param_2] = '\\0';\n    strncat(local_48, xs_3014, iVar2 - param_2);\n    strcpy(xs_3014, local_48);\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return xs_3014;\n  }\n  return NULL;\n}", "char* func0(char* param_1, int param_2) {\n  char cVar1;\n  char* pcVar7;\n  int iVar6;\n  char* xs_3389 = param_1;\n  char auStack_68[56];\n  int local_30;\n\n  local_30 = 0;\n  __sprintf_chk(xs_3389, 1, 32, DAT_00102004, param_1);\n  int uVar4 = 0xffffffff;\n  pcVar7 = xs_3389;\n  while (*pcVar7!= '\\0') {\n    uVar4--;\n    cVar1 = *pcVar7;\n    pcVar7++;\n  }\n  iVar6 = ~uVar4 + 1;\n  if (iVar6 < param_2) {\n    if (iVar6 > 1) {\n      char* puVar5 = xs_3389 + iVar6;\n      int lVar3 = 0;\n      while (lVar3 < (iVar6 + (~uVar4 + 1) >> 1)) {\n        char uVar2 = *xs_3389;\n        *xs_3389 = *puVar5;\n        *puVar5 = uVar2;\n        lVar3++;\n        puVar5--;\n        xs_3389++;\n      }\n    }\n  } else {\n    __strcpy_chk(auStack_68, xs_3389 + (iVar6 - param_2), 32);\n    auStack_68[param_2] = '\\0';\n    __strncat_chk(auStack_68, xs_3389, iVar6 - param_2, 32);\n    __strcpy_chk(xs_3389, auStack_68, 32);\n  }\n  return xs_3389;\n}", "char* func0(char* param_1, int param_2) {\n  char xs_3389[0x32];\n  char* puVar9;\n  char* puVar8;\n  char* puVar10;\n  int iVar7;\n  int uVar2;\n  int uVar3;\n  bool bVar11;\n  char auStack_58[56];\n  char* puVar6;\n  char* puVar4;\n  char* DAT_0010403f = \"string\";\n  char DAT_00102004 = 'c';\n\n  __sprintf_chk(xs_3389, 1, 0x32, &DAT_00102004, param_1);\n  puVar9 = xs_3389;\n  do {\n    puVar8 = puVar9;\n    uVar2 = *puVar8 + 0xfefefeff & ~*puVar8;\n    uVar3 = uVar2 & 0x80808080;\n    puVar9 = puVar8 + 1;\n  } while (uVar3 == 0);\n  bVar11 = (uVar2 & 0x8080) == 0;\n  if (bVar11) {\n    uVar3 = uVar3 >> 0x10;\n  }\n  if (bVar11) {\n    puVar9 = (char*)((long)puVar8 + 6);\n  }\n  puVar10 = (char*)((long)puVar9 + (-0x104043 - (ulong)CARRY1((byte)uVar3,(byte)uVar3)));\n  iVar7 = (int)puVar10;\n  if (iVar7 < param_2) {\n    if (iVar7 >> 1!= 0) {\n      puVar10 = xs_3389;\n      puVar6 = DAT_0010403f + iVar7;\n      do {\n        *puVar10 = *puVar6;\n        puVar10 = puVar10 + 1;\n        puVar6 = puVar6 + 1;\n      } while (iVar7 >> 1!= 0);\n    }\n  }\n  else {\n    strcpy(auStack_58, xs_3389);\n    auStack_58[param_2] = 0;\n    strcat(auStack_58, xs_3389);\n    strcpy(xs_3389, auStack_58);\n  }\n ", "char* func0(char* param_1, int param_2) {\n  char xs_3389[0x32];\n  char* puVar9;\n  char* puVar8;\n  char* puVar10;\n  int iVar7;\n  int uVar2;\n  int uVar3;\n  bool bVar11;\n  char auStack_58[56];\n  char* puVar6;\n  char* puVar4;\n  char* DAT_0010403f = \"string\";\n  char DAT_00104041 = 'c';\n  char DAT_00102004 ='s';\n\n  __sprintf_chk(xs_3389, 1, 0x32, DAT_00102004, param_1);\n  puVar9 = xs_3389;\n  do {\n    puVar8 = puVar9;\n    uVar2 = *puVar8 + 0xfefefeff & ~*puVar8;\n    uVar3 = uVar2 & 0x80808080;\n    puVar9 = puVar8 + 1;\n  } while (uVar3 == 0);\n  bVar11 = (uVar2 & 0x8080) == 0;\n  if (bVar11) {\n    uVar3 = uVar3 >> 0x10;\n  }\n  if (bVar11) {\n    puVar9 = (char*)((long)puVar8 + 6);\n  }\n  puVar10 = (char*)((long)puVar9 + (-0x104043 - (ulong)CARRY1((byte)uVar3,(byte)uVar3)));\n  iVar7 = (int)puVar10;\n  if (iVar7 < param_2) {\n    if (iVar7 >> 1!= 0) {\n      puVar10 = xs_3389;\n      puVar6 = DAT_0010403f + iVar7;\n      do {\n        *puVar10 = *puVar6;\n        puVar10 = puVar10 + 1;\n        puVar6 = puVar6 + 1;\n      } while (puVar10!= DAT_00104041 + ((iVar7 >> 1) - 1));\n    }\n  }\n  else {\n    char* uVar5 = strcpy(auStack_58, xs_3389 + ((long)puVar10 - (long)param_2", "int func0(long param_1) {\n  int local_10 = 0;\n  int local_c = 0;\n  while (*(char *)(param_1 + local_c)!= '\\0') {\n    if ('@' < *(char *)(param_1 + local_c) && *(char *)(param_1 + local_c) < '[') {\n      local_10 += *(char *)(param_1 + local_c);\n    }\n    local_c++;\n  }\n  return local_10;\n}", "int func0(char *param_1) {\n  int iVar2 = 0;\n  char *pcVar3 = param_1;\n  \n  while (*pcVar3!= '\\0') {\n    if ((byte)(*pcVar3 + 0xbfU) < 0x1a) {\n      iVar2 += *pcVar3;\n    }\n    pcVar3++;\n  }\n  return iVar2;\n}", "int func0(char *param_1) {\n  char cVar1;\n  int iVar2 = 0;\n  \n  cVar1 = *param_1;\n  if (cVar1!= '\\0') {\n    while (cVar1!= '\\0') {\n      if ((byte)(cVar1 + 0xbfU) < 0x1a) {\n        iVar2 += cVar1;\n      }\n      cVar1 = *param_1++;\n    }\n  }\n  return iVar2;\n}", "int func0(char *param_1) {\n  char cVar1;\n  int iVar2 = 0;\n  \n  cVar1 = *param_1;\n  if (cVar1!= '\\0') {\n    while (cVar1!= '\\0') {\n      if ((byte)(cVar1 + 0xbfU) < 0x1a) {\n        iVar2 += cVar1;\n      }\n      cVar1 = *param_1++;\n    }\n  }\n  return iVar2;\n}", "int func0(long param_1,int param_2)\n{\n  bool bVar1 = false;\n  int iVar2, iVar3;\n  ushort **ppuVar4;\n  int local_3c = 0;\n  int local_38;\n  char str[256];\n  char *str_ptr = (char *)&str;\n  int i;\n\n  for (i = 0; param_1[i]!= '\\0'; i++) {\n    ppuVar4 = __ctype_b_loc();\n    if (((*ppuVar4)[param_1[i]] & 0x800) == 0) {\n      if (!bVar1 && local_3c > 0) {\n        bVar1 = true;\n        local_3c = 0;\n      }\n    }\n    else if (bVar1) {\n      str[local_3c] = param_1[i];\n      local_3c++;\n    }\n    else {\n      str[local_3c] = param_1[i];\n      local_3c++;\n    }\n  }\n  iVar2 = atoi(str);\n  iVar3 = atoi(str + local_3c);\n  return param_2 - iVar2 - iVar3;\n}", "int func0(char *param_1,int param_2)\n{\n  char *str = param_1;\n  char *str2 = NULL;\n  int count = 0;\n  int count2 = 0;\n  int num = 0;\n  int num2 = 0;\n  char c;\n  \n  while ((c = *str)!= '\\0') {\n    if ((c >= '0' && c <= '9') && count == 0) {\n      count = 1;\n    }\n    else if ((c >= '0' && c <= '9') && count == 1) {\n      num = num * 10 + (c - '0');\n      count = 1;\n    }\n    else if ((c >= '0' && c <= '9') && count == 1) {\n      num2 = num2 * 10 + (c - '0');\n      count = 1;\n    }\n    else if (count == 1) {\n      count = 0;\n    }\n    if (count == 1) {\n      str2 = str;\n    }\n    str++;\n  }\n  if (count == 1) {\n    str2 = str;\n  }\n  num = atoi(str2);\n  num2 = atoi(str);\n  return param_2 - num - num2;\n}", "int func0(char *param_1,int param_2) {\n  char *str = param_1;\n  int count = 0;\n  int num1 = 0;\n  int num2 = 0;\n  int i = 0;\n  char c;\n\n  while ((c = *str)!= '\\0') {\n    if (isalnum(c)) {\n      if (count % 2 == 0) {\n        num1 = num1 * 10 + (c - '0');\n      } else {\n        num2 = num2 * 10 + (c - '0');\n      }\n      count++;\n    }\n  }\n\n  if (count % 2!= 0) {\n    return param_2 - num1;\n  } else {\n    return param_2 - num1 - num2;\n  }\n}", "int func0(char *param_1,int param_2) {\n  char *str = param_1;\n  int count = 0;\n  int num1 = 0;\n  int num2 = 0;\n  int i = 0;\n  char c;\n\n  while ((c = *str)!= '\\0') {\n    if (isalnum(c)) {\n      if (count % 2 == 0) {\n        num1 = num1 * 10 + (c - '0');\n      } else {\n        num2 = num2 * 10 + (c - '0');\n      }\n      count++;\n    }\n  }\n\n  if (count % 2!= 0) {\n    return param_2 - num1;\n  } else {\n    return param_2 - num1 - num2;\n  }\n}", "int* func0(long param_1, int param_2, int* param_3) {\n  int max_val = 0x7fffffff;\n  int min_idx = -1;\n  int idx = 0;\n  \n  while (idx < param_2) {\n    int val = *(int *)(param_1 + idx * 4);\n    if ((val & 1) == 0 && (min_idx == -1 || val < max_val)) {\n      max_val = val;\n      min_idx = idx;\n    }\n    idx++;\n  }\n  if (min_idx == -1) {\n    param_3 = NULL;\n  } else {\n    param_3[0] = max_val;\n    param_3[1] = min_idx;\n  }\n  return param_3;\n}", "uint * func0(long param_1,int param_2,uint *param_3)\n{\n  if (param_2 < 1) {\n    return (uint *)0x0;\n  }\n  ulong uVar4 = 0;\n  ulong uVar6 = 0xffffffff;\n  uint uVar3 = 0x7fffffff;\n  while (param_2 - 1!= uVar4) {\n    uint uVar1 = *(uint *)(param_1 + uVar4 * 4);\n    if ((uVar1 & 1) == 0 && uVar1 <= (uint)uVar3) {\n      uVar6 = uVar4;\n      uVar3 = uVar1;\n    }\n    uVar4++;\n  }\n  if (uVar6 == 0xffffffff) {\n    return (uint *)0x0;\n  }\n  *param_3 = uVar3;\n  param_3[1] = (uint)uVar6;\n  return param_3;\n}", "uint * func0(long param_1,int param_2,uint *param_3)\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (param_2 > 0) {\n    uVar4 = 0xffffffff;\n    uVar2 = 0x7fffffff;\n    uVar3 = 0;\n    while (uVar3 < param_2) {\n      uVar1 = *(uint *)(param_1 + uVar3 * 4);\n      if (((uVar1 & 1) == 0) && ((uVar4 == 0xffffffff || uVar1 < uVar2))) {\n        uVar4 = uVar3;\n        uVar2 = uVar1;\n      }\n      uVar3++;\n    }\n    if (uVar4!= 0xffffffff) {\n      *param_3 = uVar2;\n      param_3[1] = uVar4;\n      return param_3;\n    }\n  }\n  return NULL;\n}", "uint * func0(long param_1,int param_2,uint *param_3)\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (param_2 > 0) {\n    uVar4 = 0xffffffff;\n    uVar2 = 0x7fffffff;\n    uVar3 = 0;\n    do {\n      uVar1 = *(uint *)(param_1 + uVar3 * 4);\n      if ((uVar1 & 1) == 0 && (uVar4 == 0xffffffff || uVar1 < uVar2)) {\n        uVar4 = uVar3;\n        uVar2 = uVar1;\n      }\n      bVar5 = param_2 - 1!= uVar3;\n      uVar3++;\n    } while (bVar5);\n    if (uVar4!= 0xffffffff) {\n      *param_3 = uVar2;\n      param_3[1] = uVar4;\n      return param_3;\n    }\n  }\n  return NULL;\n}", "int func0(long param_1,int param_2)\n{\n  int* array = (int*)calloc((param_2 + 1) * sizeof(int));\n  int max_val = -1;\n  for (int i = 0; i < param_2; i++) {\n    int offset = *(int*)(param_1 + i * 4);\n    array[offset] = array[offset] + 1;\n    if (offset <= array[offset] && max_val < offset) {\n      max_val = offset;\n    }\n  }\n  free(array);\n  return max_val;\n}", "int func0(int *param_1,int param_2)\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  \n  if (param_2 < 1) {\n    return -1;\n  }\n  piVar2 = param_1 + (param_2 - 1);\n  iVar5 = -1;\n  for (iVar3 = 0; iVar3 < param_2; iVar3++) {\n    iVar4 = *param_1;\n    piVar1 = (int *)((long)malloc(4));\n    *piVar1 = iVar4 + 1;\n    if ((iVar4 <= iVar4 + 1) && (iVar5 < iVar4)) {\n      iVar5 = iVar4;\n    }\n    free(piVar1);\n    param_1++;\n  }\n  return iVar5;\n}", "int func0(int *param_1,int param_2)\n{\n  int iVar1;\n  int *piVar2;\n  int iVar4;\n  int iVar5 = -1;\n  int *piVar3 = param_1 + (param_2 - 1);\n  \n  if (param_2 < 1) {\n    return iVar5;\n  }\n  \n  for (; param_1!= piVar3; param_1++) {\n    iVar4 = *param_1;\n    piVar2 = (int *)((long)malloc((long)(iVar4 + 1) * 4));\n    iVar1 = *piVar2 + 1;\n    *piVar2 = iVar1;\n    if ((iVar4 <= iVar1) && (iVar5 < iVar4)) {\n      iVar5 = iVar4;\n    }\n    free(piVar2);\n  }\n  return iVar5;\n}", "int func0(int *param_1,int param_2)\n{\n  int iVar1;\n  int *piVar2;\n  int iVar4;\n  int iVar5 = -1;\n  int *piVar3 = param_1 + (param_2 - 1);\n  \n  if (param_2 < 1) {\n    return iVar5;\n  }\n  \n  for (; param_1!= piVar3; param_1++) {\n    iVar4 = *param_1;\n    piVar2 = (int *)((long)malloc((long)(iVar4 + 1) * 4));\n    iVar1 = *piVar2 + 1;\n    *piVar2 = iVar1;\n    if ((iVar4 <= iVar1) && (iVar5 < iVar4)) {\n      iVar5 = iVar4;\n    }\n    free(piVar2);\n  }\n  return iVar5;\n}", "int sort_and_copy(int* arr1, int size, int* arr2) {\n  for (int i = 0; i < size - 1; i++) {\n    for (int j = i + 1; j < size; j++) {\n      if (arr1[i] < arr1[j]) {\n        int temp = arr1[i];\n        arr1[i] = arr1[j];\n        arr1[j] = temp;\n      }\n    }\n  }\n  int index1 = 0;\n  int index2 = 0;\n  int index3 = size - 1;\n  while (index1 <= index3) {\n    if (index1 == index3) {\n      arr2[index2] = arr1[index3];\n      index1++;\n      index2++;\n    } else {\n      index2++;\n      arr2[index2 - 1] = arr1[index1];\n      index1++;\n      index3--;\n      if (index2!= index3) {\n        arr2[index2] = arr1[index3];\n        index2++;\n      }\n    }\n  }\n  return 0;\n}", "void func0(int *param_1,int param_2,long param_3)\n{\n  int iVar1;\n  long lVar2;\n  int *piVar3;\n  int iVar4;\n  long lVar5;\n  \n  if (param_2 == 1) {\n    return;\n  }\n  lVar5 = 1;\n  piVar3 = param_1;\n  do {\n    iVar1 = (int)lVar5;\n    lVar2 = lVar5;\n    while (iVar1 < param_2) {\n      iVar1 = *piVar3;\n      if (param_1[lVar2] < iVar1) {\n        *piVar3 = param_1[lVar2];\n        param_1[lVar2] = iVar1;\n      }\n      lVar2 = lVar2 + 1;\n      iVar1 = (int)lVar2;\n    }\n    lVar5 = lVar5 + 1;\n    piVar3 = piVar3 + 1;\n  } while (lVar5!= (ulong)(param_2 - 2) + 2);\n  iVar4 = param_2 - 1;\n  lVar2 = (long)iVar4;\n  lVar5 = 0;\n  do {\n    iVar4 = (int)lVar5;\n    if ((int)lVar2 == iVar4) {\n      *(int *)(param_3 + (long)(iVar4 * 2) * 4) = param_1[iVar4];\n      return;\n    }\n    *(int *)(param_3 + lVar5 * 8) = param_1[lVar5];\n    *(int *)(param_3 + 4 + lVar5 * 8) = param_1[lVar2];\n    lVar5 = lVar5 + 1;\n    lVar2 = lVar2 + -1;\n  } while ((int)lVar5 <= (int)lVar2);\n  return;\n}", "void func0(int *param_1,int param_2,long param_3)\n{\n  int i;\n  int j;\n  int temp;\n  int *ptr;\n  int *ptr2;\n  int *ptr3;\n  int *ptr4;\n  int *ptr5;\n  int *ptr6;\n  int *ptr7;\n  int *ptr8;\n  int *ptr9;\n  int *ptr10;\n  int *ptr11;\n  int *ptr12;\n  int *ptr13;\n  int *ptr14;\n  int *ptr15;\n  int *ptr16;\n  int *ptr17;\n  int *ptr18;\n  int *ptr19;\n  int *ptr20;\n  int *ptr21;\n  int *ptr22;\n  int *ptr23;\n  int *ptr24;\n  int *ptr25;\n  int *ptr26;\n  int *ptr27;\n  int *ptr28;\n  int *ptr29;\n  int *ptr30;\n  int *ptr31;\n  int *ptr32;\n  int *ptr33;\n  int *ptr34;\n  int *ptr35;\n  int *ptr36;\n  int *ptr37;\n  int *ptr38;\n  int *ptr39;\n  int *ptr40;\n  int *ptr41;\n  int *ptr42;\n  int *ptr43;\n  int *ptr44;\n  int *ptr45;\n  int *ptr46;\n  int *ptr47;\n  int *ptr48;\n  int *ptr49;\n  int *ptr50;\n  int *ptr51;\n  int *ptr52;\n  int *ptr53;\n  int *ptr54;\n  int *ptr55;\n  int *ptr56;\n  int *ptr57;\n  int *ptr58;\n  int *ptr59;\n  int *ptr60;\n  int *ptr61;\n  int *ptr62;\n  int *ptr63;\n  int *ptr64;\n  int *ptr65;\n  int *ptr66;\n  int *ptr67;\n  int *ptr68;\n  int *ptr69;\n  int *ptr70;\n  int *ptr71;\n  int *ptr72;\n  int *ptr73;\n  int *ptr74;\n  int *ptr75;\n  int *ptr76;\n  int *ptr77;\n  int *ptr78;\n  int *ptr79;\n  int *ptr80;\n  int *", "void sort_and_copy(int *param_1,int param_2,long param_3)\n{\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  int *piVar4;\n  long lVar5;\n  int iVar6;\n  \n  iVar6 = param_2 - 1;\n  if (iVar6 < 1) {\n    if (iVar6!= 0) {\n      return 0;\n    }\n  }\n  else {\n    lVar5 = 1;\n    piVar4 = param_1;\n    do {\n      iVar2 = (int)lVar5;\n      lVar3 = lVar5;\n      while (iVar2 < param_2) {\n        iVar2 = *piVar4;\n        if (param_1[lVar3] < iVar2) {\n          *piVar4 = param_1[lVar3];\n          param_1[lVar3] = iVar2;\n        }\n        lVar3 = lVar3 + 1;\n        iVar2 = (int)lVar3;\n      }\n      lVar5 = lVar5 + 1;\n      piVar4 = piVar4 + 1;\n    } while ((ulong)(param_2 - 2) + 2!= lVar5);\n  }\n  lVar5 = 0;\n  iVar2 = 0;\n  do {\n    while( true ) {\n      *(int *)(param_3 + (long)iVar2 * 4) = param_1[lVar5];\n      if (iVar6!= (int)lVar5) break;\n      lVar5 = lVar5 + 1;\n      iVar2 = iVar2 + 1;\n      if (iVar6 < (int)lVar5) {\n        return 0;\n      }\n    }\n    iVar1 = iVar6 - 1;\n    lVar5 = lVar5 + 1;\n    *(int *)(param_3 + 4 + (long)iVar2 * 4) = param_1[iVar6];\n    iVar6 = iVar1;\n    iVar2 = iVar2 + 2;\n  } while ((int)lVar5 <= iVar1);\n  return 0;\n}", "float func0(float param_1, float param_2, float param_3) {\n  float fVar1 = DAT_00102188;\n  if ((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3) && (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) / DAT_0010218c;\n    fVar1 = sqrtf((fVar1 - param_3) * (fVar1 - param_1) * fVar1 * (fVar1 - param_2));\n    fVar1 = roundf(DAT_00102190 * fVar1);\n    fVar1 = fVar1 / DAT_00102190;\n  }\n  return fVar1;\n}", "float func0(float param_1, float param_2, float param_3) {\n  float fVar1;\n  if ((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3) && (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) * 0.000000001;\n    fVar1 = (fVar1 - param_1) * fVar1 * (fVar1 - param_2) * (fVar1 - param_3);\n    if (fVar1 < 0.0) {\n      fVar1 = sqrtf(fVar1);\n    }\n    fVar1 = roundf(0.000000001 * sqrtf(fVar1));\n    return fVar1 / 0.000000001;\n  }\n  return 0.000000001;\n}", "float func0(float param_1, float param_2, float param_3) {\n  float fVar1;\n  if ((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3) && (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) * _DAT_00102008;\n    fVar1 = (fVar1 - param_1) * fVar1 * (fVar1 - param_2) * (fVar1 - param_3);\n    if (fVar1 < 0.0) {\n      fVar1 = sqrtf(fVar1);\n    }\n    fVar1 = roundf(DAT_0010200c * fVar1);\n    return fVar1 / DAT_0010200c;\n  }\n  return DAT_00102004;\n}", "float func0(float param_1, float param_2, float param_3) {\n  float fVar1;\n  if ((param_3 < param_1 + param_2) && (param_2 < param_1 + param_3) && (param_1 < param_2 + param_3)) {\n    fVar1 = (param_1 + param_2 + param_3) * _DAT_00102008;\n    fVar1 = (fVar1 - param_1) * fVar1 * (fVar1 - param_2) * (fVar1 - param_3);\n    if (fVar1 < 0.0) {\n      fVar1 = sqrtf(fVar1);\n    }\n    fVar1 = roundf(DAT_0010200c * fVar1);\n    return fVar1 / DAT_0010200c;\n  }\n  return DAT_00102004;\n}", "int func0(long param_1, int param_2, int param_3) {\n  int local_10 = 0;\n  int local_c = 0;\n  while (true) {\n    if (param_2 / 2 <= local_c) {\n      if (param_2 % 2 == 1) {\n        local_10 += *(int *)(param_1 + (param_2 / 2) * 4);\n      }\n      return (local_10 >> 8) & 0xFF | (local_10 <= param_3? 1 : 0);\n    }\n    if (*(int *)(param_1 + local_c * 4)!= *(int *)(param_1 + ((param_2 - 1) - local_c) * 4)) break;\n    local_10 += *(int *)(param_1 + ((param_2 - 1) - local_c) * 4) + *(int *)(param_1 + local_c * 4);\n    local_c++;\n  }\n  return 0;\n}", "bool func0(long param_1,int param_2,int param_3)\n{\n  int iVar1;\n  long lVar2;\n  long lVar3;\n  int iVar4;\n  \n  if (param_2 < 2) {\n    iVar4 = 0;\n  }\n  else {\n    lVar3 = param_1 + (long)param_2 * 4;\n    lVar2 = 0;\n    iVar4 = 0;\n    do {\n      iVar1 = *(int *)(param_1 + lVar2 * 4);\n      if (iVar1!= *(int *)(lVar3 + -4)) {\n        return false;\n      }\n      iVar4 += iVar1 + *(int *)(lVar3 + -4);\n      lVar2++;\n      lVar3 -= 4;\n    } while (lVar2 < param_2 / 2);\n    if (param_2 % 2 == 1) {\n      iVar4 += *(int *)(param_1 + (long)(param_2 / 2) * 4);\n    }\n  }\n  return iVar4 <= param_3;\n}", "bool func0(long param_1,int param_2,int param_3)\n{\n  int iVar1;\n  long lVar2;\n  int *piVar3;\n  int iVar4;\n  \n  if (param_2 < 2) {\n    return false;\n  }\n  iVar4 = 0;\n  piVar3 = (int *)(param_1 + (long)(param_2 + -1) * 4);\n  lVar2 = 0;\n  do {\n    iVar1 = *(int *)(param_1 + lVar2 * 4);\n    if (iVar1!= *piVar3) {\n      return false;\n    }\n    lVar2++;\n    iVar4 += iVar1 * 2;\n    piVar3--;\n  } while (lVar2 < param_2 / 2);\n  return (param_2 % 2 == 0)? iVar4 <= param_3 : iVar4 + *(int *)(param_1 + (long)(param_2 / 2) * 4) <= param_3;\n}", "bool func0(long param_1,int param_2,int param_3)\n{\n  int iVar1;\n  long lVar2;\n  int *piVar3;\n  int iVar4;\n  \n  if (param_2 < 2) {\n    return false;\n  }\n  iVar4 = 0;\n  piVar3 = (int *)(param_1 + (long)(param_2 + -1) * 4);\n  lVar2 = 0;\n  do {\n    iVar1 = *(int *)(param_1 + lVar2 * 4);\n    if (iVar1!= *piVar3) {\n      return false;\n    }\n    lVar2++;\n    iVar4 += iVar1 * 2;\n    piVar3--;\n  } while (lVar2 < param_2 / 2);\n  return (param_2 % 2 == 0)? iVar4 <= param_3 : iVar4 + *(int *)(param_1 + (long)(param_2 / 2) * 4) <= param_3;\n}", "int func0(long param_1, int param_2) {\n  int local_10 = 0;\n  int local_c;\n  for (local_c = 0; local_c < param_2 / 2; local_c++) {\n    if (*(int *)(param_1 + local_c * 4)!= *(int *)(param_1 + (param_2 - 1 - local_c) * 4)) {\n      local_10++;\n    }\n  }\n  return local_10;\n}", "int func0(long param_1,int param_2) {\n  int iVar2 = 0;\n  if (param_2 < 2) {\n    return iVar2;\n  }\n  long lVar3 = param_1 + (long)param_2 * 4;\n  for (int i = 0; i < param_2 / 2; i++) {\n    iVar2 += (uint)*(int *)(param_1 + i * 4)!= *(int *)(lVar3 + -4);\n    lVar3 -= 4;\n  }\n  return iVar2;\n}", "int func0(long param_1,int param_2)\n{\n  int count = 0;\n  int i;\n  int *ptr;\n  int value;\n  \n  if (param_2 > 1) {\n    for (i = param_2 - 1, ptr = (int *)(param_1 + (long)i * 4); i > param_2 / 2; i--, ptr--) {\n      value = *ptr;\n      if (*(int *)(param_1 + i * 4)!= value) count++;\n    }\n  }\n  return count;\n}", "int func0(int *param_1,int param_2) {\n  int iVar1 = param_2 + -1;\n  int iVar14 = 0;\n  if (param_2 < 2) {\n    return iVar14;\n  }\n  if (param_2 < 8) {\n    return iVar14;\n  }\n  int uVar13 = param_2 / 2;\n  for (int i = 0; i < uVar13; i += 4) {\n    int iVar2 = param_1[iVar1 - i];\n    int iVar6 = param_1[i];\n    iVar14 += ~((iVar2 == param_1[iVar1 - i - 3]) & 1);\n    iVar14 += ~((iVar6 == param_1[i + 1]) & 1);\n    iVar14 += ~((iVar6 == param_1[i + 2]) & 1);\n    iVar14 += ~((iVar2 == param_1[i + 3]) & 1);\n  }\n  int uVar11 = uVar13 & 0xfffffffc;\n  if (param_1[uVar11]!= param_1[iVar1 - uVar11]) {\n    iVar14++;\n  }\n  if (uVar11 + 1 < uVar13 && param_1[iVar1 - uVar11 - 1]!= param_1[uVar11 + 1]) {\n    return iVar14 + 1;\n  }\n  return iVar14;\n}", "long func0(long param_1,int param_2,long param_3,int param_4)\n{\n  size_t sVar1;\n  int local_10;\n  int local_c;\n  \n  local_10 = 0;\n  local_c = 0;\n  for (int i = 0; i < param_2; i++) {\n    sVar1 = strlen(*(char **)(param_1 + i * 8));\n    local_10 += (int)sVar1;\n  }\n  for (int i = 0; i < param_4; i++) {\n    sVar1 = strlen(*(char **)(param_3 + i * 8));\n    local_c += (int)sVar1;\n  }\n  if (local_c <= local_10 && local_c < local_10) {\n    return param_3;\n  }\n  return param_1;\n}", "int func0(char **param_1,int param_2,char **param_3,int param_4)\n{\n  int i;\n  int len1 = 0;\n  int len2 = 0;\n  int min_len = 0;\n  \n  if (param_2 < 1) {\n    if (param_4 < 1) {\n      return param_1;\n    }\n  }\n  else {\n    for (i = 0; i < param_2; i++) {\n      int j = 0;\n      char *str = param_1[i];\n      while (*str!= '\\0') {\n        str++;\n        j++;\n      }\n      len1 += j;\n    }\n    if (param_4 < 1) {\n      return param_1;\n    }\n  }\n  \n  for (i = 0; i < param_4; i++) {\n    int j = 0;\n    char *str = param_3[i];\n    while (*str!= '\\0') {\n      str++;\n      j++;\n    }\n    len2 += j;\n  }\n  \n  min_len = (len1 <= len2)? len1 : len2;\n  \n  if (min_len == len1) {\n    return param_1;\n  }\n  else {\n    return param_3;\n  }\n}", "int func0(char **param_1,int param_2,char **param_3,int param_4) {\n  int total_len_1 = 0;\n  int total_len_2 = 0;\n  for (int i = 0; i < param_2; i++) {\n    total_len_1 += strlen(param_1[i]);\n  }\n  if (param_4 < 1) {\n    return param_1;\n  }\n  for (int i = 0; i < param_4; i++) {\n    total_len_2 += strlen(param_3[i]);\n  }\n  return total_len_1 <= total_len_2? param_1 : param_3;\n}", "int func0(char **param_1,int param_2,char **param_3,int param_4) {\n  int total_len_1 = 0;\n  int total_len_2 = 0;\n  for (int i = 0; i < param_2; i++) {\n    total_len_1 += strlen(param_1[i]);\n  }\n  if (param_4 < 1) {\n    return param_1;\n  }\n  for (int i = 0; i < param_4; i++) {\n    total_len_2 += strlen(param_3[i]);\n  }\n  return total_len_1 <= total_len_2? param_1 : param_3;\n}", "bool func0(int param_1) {\n  bool bVar1;\n  int local_10;\n  int local_1c;\n  int local_c;\n  \n  if (param_1 < 2) {\n    bVar1 = false;\n  }\n  else {\n    local_10 = 0;\n    local_1c = param_1;\n    for (local_c = 2; local_c * local_c <= local_1c; local_c++) {\n      while (local_1c % local_c == 0) {\n        local_1c /= local_c;\n        local_10++;\n      }\n    }\n    if (local_1c > 1) {\n      local_10++;\n    }\n    bVar1 = local_10 == 3;\n  }\n  return bVar1;\n}", "int func0(int param_1) {\n  int lVar1;\n  int iVar2 = 2;\n  int iVar3;\n  int iVar4 = 0;\n  \n  if (param_1 < 2) {\n    return 0;\n  }\n  if (3 < param_1) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while (iVar3 == 0) {\n        param_1 /= iVar2;\n        iVar4++;\n        iVar3 = (param_1 >> 31)? (iVar2 - 1) : (param_1 % iVar2);\n      }\n      iVar2++;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  return iVar4 == 3;\n}", "int func0(int param_1) {\n  int lVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  iVar4 = 0;\n  iVar2 = 2;\n  if (param_1 >= 3) {\n    do {\n      iVar3 = param_1 % iVar2;\n      while (iVar3 == 0) {\n        iVar4 = iVar4 + 1;\n        param_1 = param_1 / iVar2;\n        iVar3 = param_1 % iVar2;\n      }\n      iVar2 = iVar2 + 1;\n    } while (iVar2 * iVar2 <= param_1);\n  }\n  return iVar4 + (param_1 >= 2);\n}", "bool func0(int param_1) {\n  int iVar2 = 2;\n  int iVar3;\n  int iVar4 = 0;\n  if (param_1 < 4) {\n    return false;\n  }\n  do {\n    iVar3 = param_1 % iVar2;\n    while (iVar3 == 0) {\n      iVar4 = iVar4 + 1;\n      param_1 = param_1 / iVar2;\n      iVar3 = (iVar2 - 1) & (param_1 >> 0x1f)? (iVar2 - 1) : param_1 % iVar2;\n    }\n    iVar2 = iVar2 + 1;\n  } while (iVar2 * iVar2 <= param_1);\n  return iVar4 == (param_1 < 2? 2 : 3);\n}", "int func0(int param_1,int param_2)\n{\n  int local_10 = 1;\n  int local_c = 0;\n  \n  while (local_10 <= param_1 && local_c < 100) {\n    if (local_10 == param_1) {\n      return 1;\n    }\n    local_10 = local_10 * param_2;\n    local_c++;\n  }\n  return 0;\n}", "int func0(int param_1,int param_2)\n{\n  int iVar1 = 1;\n  int iVar2 = 0;\n  \n  if (param_1 < 1) {\n    return 0;\n  }\n  if (param_1!= 1) {\n    while(1) {\n      iVar1 = iVar1 * param_2;\n      iVar2 = iVar2 + 1;\n      if (iVar2 > 99 || param_1 < iVar1) break;\n      if (param_1 == iVar1) {\n        return 1;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}", "int func0(int param_1,int param_2) {\n  int iVar1 = 1;\n  int iVar2 = 0;\n  \n  if (param_1 < 1) {\n    return 0;\n  }\n  if (param_1!= 1) {\n    do {\n      iVar1 = iVar1 * param_2;\n      iVar2 = iVar2 + 1;\n      if (param_1 < iVar1) {\n        return 0;\n      }\n      if (99 < iVar2) {\n        return 0;\n      }\n    } while (param_1!= iVar1);\n  }\n  return 1;\n}", "int func0(int param_1,int param_2) {\n  int iVar1 = 1;\n  int iVar2 = 0;\n  \n  if (param_1 < 1) {\n    return 0;\n  }\n  if (param_1!= 1) {\n    do {\n      iVar1 = iVar1 * param_2;\n      iVar2 = iVar2 + 1;\n      if (param_1 < iVar1) {\n        return 0;\n      }\n      if (99 < iVar2) {\n        return 0;\n      }\n    } while (param_1!= iVar1);\n  }\n  return 1;\n}", "int func0(uint param_1) {\n  int uVar1, local_c = 0;\n  \n  while (1) {\n    uVar1 = param_1 >> 31;\n    if ((uVar1 ^ param_1) - uVar1 < local_c * local_c * local_c) {\n      return 0;\n    }\n    if (local_c * local_c * local_c == (uVar1 ^ param_1) - uVar1) break;\n    local_c++;\n  }\n  return 1;\n}", "int func0(int param_1) {\n  int iVar2 = (param_1 >> 31 ^ param_1) - (param_1 >> 31);\n  if (param_1 == 0) {\n    return 1;\n  }\n  int iVar3 = 1;\n  int iVar1 = 1;\n  while (iVar1 <= iVar2) {\n    if (iVar2 == iVar1) {\n      return 1;\n    }\n    iVar3++;\n    iVar1 = iVar3 * iVar3 * iVar3;\n  }\n  return 0;\n}", "int func0(int param_1) {\n  int iVar1 = 1;\n  int iVar2 = ((param_1 >> 31) ^ param_1) - (param_1 >> 31);\n  if (param_1!= 0) {\n    int iVar3 = 1;\n    while (iVar2!= iVar1) {\n      iVar3++;\n      iVar1 = iVar3 * iVar3 * iVar3;\n      if (iVar2 < iVar1) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n}", "int func0(int param_1) {\n  int iVar1 = 1;\n  int iVar2 = ((param_1 >> 31) ^ param_1) - (param_1 >> 31);\n  if (param_1!= 0) {\n    int iVar3 = 1;\n    while (iVar2!= iVar1) {\n      iVar3++;\n      iVar1 = iVar3 * iVar3 * iVar3;\n      if (iVar2 < iVar1) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n}", "int func0(char *param_1) {\n  int count = 0;\n  for (size_t i = 0; i < strlen(param_1); i++) {\n    if (strchr(\"2357BD\", param_1[i])!= NULL) {\n      count++;\n    }\n  }\n  return count;\n}", "int func0(char *param_1) {\n  int count = 0;\n  for (char *p = param_1; *p; p++) {\n    if (strchr(\"2357BD\", *p)) count++;\n  }\n  return count;\n}", "int func0(char *param_1) {\n  int count = 0;\n  for (size_t i = 0; i < strlen(param_1); i++) {\n    if (strchr(\"2357BD\", param_1[i])!= NULL) {\n      count++;\n    }\n  }\n  return count;\n}", "int count_digits(char *str) {\n  size_t len = strlen(str);\n  if (len == 0) return 0;\n  int count = 0;\n  for (char *p = str; p < str + len; p++) {\n    switch (*p) {\n      case '2': case '3': case '5': case '7': case 'B': case 'D':\n        count++;\n    }\n  }\n  return count;\n}", "char *func0(int param_1) {\n  char *dest = NULL;\n  char *ptr = malloc(0x40);\n  if (ptr == NULL) {\n    return NULL;\n  }\n  int i;\n  for (i = 0; i < 0x3e; i++) {\n    *(byte *)(ptr + i) = 0;\n  }\n  if (param_1 == 0) {\n    *(byte *)(ptr + 0x3e) = 0x30;\n  } else {\n    int j;\n    for (j = param_1; j > 0; j /= 2) {\n      char c = (char)(j >> 0x1f);\n      *(byte *)(ptr + (param_1 - j)) = ((char)j - c & 1U) + c + '0';\n    }\n  }\n  *(byte *)(ptr + param_1) = 0x62;\n  *(byte *)(ptr + param_1 - 1) = 100;\n  dest = malloc(0x41 - (param_1 - 1));\n  if (dest == NULL) {\n    free(ptr);\n    return NULL;\n  }\n  strcpy(dest, ptr + (param_1 - 1));\n  for (i = strlen(dest) - 1; i >= 0; i--) {\n    if (dest[i] == '\\0') break;\n    dest[i] = 0x6264;\n  }\n  free(ptr);\n  return dest;\n}", "char *func0(int param_1) {\n  char *dest = NULL;\n  if (param_1 == 0) {\n    dest = malloc(0x41);\n    if (dest!= NULL) {\n      *(dest + 0x3e) = '0';\n      *(dest + 0x3d) = 0x30;\n      *(dest + 0x3c) = 'd';\n      *(dest + 0x3b) = 0x62;\n      *(dest + 0x3a) = 0x62;\n      *(dest + 0x39) = 0;\n    }\n  } else {\n    int i;\n    for (i = 0; i < param_1; i++) {\n      *(dest + 0x3d - i) = (char)('0' + (param_1 >> (i * 2)) & 3);\n    }\n    *(dest + 0x3d - param_1) = 'd';\n    *(dest + 0x3c - param_1) = 0x62;\n    *(dest + 0x3b - param_1) = 0x62;\n    *(dest + 0x3a - param_1) = 0;\n  }\n  return dest;\n}", "char *func0(int param_1) {\n  char *dest = NULL;\n  char *ptr = malloc(0x40);\n  if (ptr == NULL) {\n    return dest;\n  }\n  memset(ptr, 0, 0x40);\n  if (param_1 == 0) {\n    *(ptr + 0x3e) = '0';\n    dest = malloc(5);\n    if (dest!= NULL) {\n      strcpy(dest, ptr + 0x3c);\n      *(dest + 4) = '\\0';\n    }\n  } else if (param_1 < 1) {\n    *(ptr + 0x3d) = '0';\n    dest = malloc(4);\n    if (dest!= NULL) {\n      strcpy(dest, ptr + 0x3e);\n      *(dest + 3) = '\\0';\n    }\n  } else {\n    int i;\n    for (i = 0; param_1!= 0; i++, param_1 >>= 1) {\n      *(ptr + i) = (char)('0' + (param_1 & 1));\n    }\n    *(ptr + i) = 'd';\n    dest = malloc(i + 2);\n    if (dest!= NULL) {\n      strcpy(dest, ptr);\n      *(dest + i) = 'b';\n      *(dest + i + 1) = '4';\n      *(dest + i + 2) = '\\0';\n    }\n  }\n  free(ptr);\n  return dest;\n}", "char *func0(int param_1) {\n  char *dest = NULL;\n  char *ptr = malloc(0x40);\n  if (ptr == NULL) {\n    return dest;\n  }\n  memset(ptr, 0, 0x40);\n  if (param_1 == 0) {\n    *(ptr + 0x3e) = '0';\n    dest = malloc(5);\n    if (dest!= NULL) {\n      strcpy(dest, ptr + 0x3c);\n      *(dest + 4) = '\\0';\n    }\n  } else if (param_1 < 1) {\n    *(ptr + 0x3d) = '0';\n    dest = malloc(4);\n    if (dest!= NULL) {\n      strcpy(dest, ptr + 0x3e);\n      *(dest + 3) = '\\0';\n    }\n  } else {\n    int i;\n    for (i = 0; param_1!= 0; i++, param_1 >>= 1) {\n      *(ptr + i) = (char)('0' + (param_1 & 1));\n    }\n    *(ptr + i) = 'd';\n    dest = malloc(i + 2);\n    if (dest!= NULL) {\n      strcpy(dest, ptr);\n      *(dest + i) = 'b';\n      *(dest + i + 1) = '4';\n      *(dest + i + 2) = '\\0';\n    }\n  }\n  free(ptr);\n  return dest;\n}", "int check_string(char *str) {\n  int len = strlen(str);\n  if (len < 3) {\n    return 0;\n  }\n  for (int i = 2; i < len; i++) {\n    if (str[i] == str[i - 1] || str[i] == str[i - 2]) {\n      return 0;\n    }\n  }\n  return 1;\n}", "int func0(char *str) {\n  int i;\n  for (i = strlen(str); i > 0; i--) {\n    if (str[i - 1] == str[0]) {\n      return 0;\n    }\n  }\n  for (i = 0; i < strlen(str) - 2; i++) {\n    if (str[i] == str[i + 2]) {\n      return 1;\n    }\n  }\n  return 0;\n}", "int check_string(char *str) {\n  size_t len = strlen(str);\n  if (len < 3) return 0;\n  char *end = str + len - 2;\n  while (str[1]!= str[2] && str[1]!= str[0]) {\n    if (str++ == end) return 1;\n  }\n  return 0;\n}", "int check_string(char *str) {\n  size_t len = strlen(str);\n  if (len < 3) return 0;\n  char *end = str + len - 2;\n  while (str[1]!= str[2] && str[1]!= str[0]) {\n    if (str++ == end) return 1;\n  }\n  return 0;\n}", "int func0(long param_1,int param_2) {\n  void *pvVar1;\n  int local_14;\n  float *ptr;\n  float value;\n  float *values[] = {\n    _DAT_00102100, _DAT_00102108, _DAT_00102110, _DAT_00102118, _DAT_00102120, _DAT_00102128, _DAT_00102130, _DAT_00102138, _DAT_00102140, _DAT_00102148, _DAT_00102150, _DAT_00102158\n  };\n  float *labels[] = {\n    &DAT_00102028, &DAT_00102025, &DAT_00102023, &DAT_00102020, &DAT_0010201d, &DAT_0010201b, &DAT_00102018, &DAT_00102015, &DAT_00102013, &DAT_00102010, &DAT_0010200d, &DAT_0010200b, &DAT_00102008\n  };\n\n  pvVar1 = malloc((long)param_2 << 3);\n  for (local_14 = 0; local_14 < param_2; local_14++) {\n    ptr = (float *)(param_1 + (long)local_14 * 4);\n    value = *ptr;\n    for (int i = 0; i < 12; i++) {\n      if (value <= values[i]) {\n        *(undefined **)((long)pvVar1 + (long)local_14 * 8) = labels[i];\n        break;\n      }\n    }\n  }\n  return pvVar1;\n}", "double func0(long param_1, int param_2) {\n  double dVar1 = DAT_00102100;\n  double dVar2 = DAT_00102108;\n  double dVar3 = DAT_00102110;\n  void *pvVar4 = malloc((long)param_2 << 3);\n  undefined *puVar5;\n  ulong uVar6 = 0;\n  bool bVar7;\n  double dVar8;\n\n  while (uVar6 < param_2) {\n    dVar8 = (double)*(float *)(param_1 + uVar6 * 4);\n    if (dVar8 < dVar1) {\n      if (dVar8 <= dVar2) {\n        if (dVar8 <= dVar3) {\n          if (dVar8 == _DAT_00102118) {\n            if (dVar8 <= _DAT_00102120) {\n              if (dVar8 <= _DAT_00102128) {\n                if (dVar8 <= _DAT_00102130) {\n                  if (dVar8 <= _DAT_00102138) {\n                    if (dVar8 <= _DAT_00102140) {\n                      if (dVar8 <= _DAT_00102148) {\n                        if (dVar8 <= _DAT_00102150) {\n                          puVar5 = (dVar8 <= DAT_00102158)? &DAT_00102024 : &DAT_00102021;\n                        }\n                        else {\n                          puVar5 = &DAT_0010201f;\n                        }\n                      }\n                      else {\n                        puVar5 = &DAT_00102019;\n                      }\n                    }\n                    else {\n                      puVar5 = &DAT_00102017;\n                    }\n                  }\n                  else {\n                    puVar5 = &DAT_00102014;\n                  }\n                }\n                else {\n                  puVar5 = &DAT_00102011;\n                }\n              }\n              else {\n                puVar5 = &DAT_0010200f;\n              }\n            }\n            else {\n              puVar5 = &DAT_0010200c;\n            }\n          }\n          else {\n            puVar5 = &DAT_00102009;\n          }\n        }\n        else {\n          puVar5 = &DAT_00102007;\n        }\n      }\n      else {\n        puVar5 = &DAT_00102004;\n      }\n    }\n   ", "double func0(long param_1, int param_2) {\n  double dVar1 = DAT_00102100;\n  double dVar2 = DAT_00102108;\n  double dVar3 = DAT_00102110;\n  void *pvVar4 = malloc((long)param_2 << 3);\n  int i;\n  for (i = 0; i < param_2; i++) {\n    double dVar7 = (double)*(float *)(param_1 + i * 4);\n    if (dVar1 <= dVar7 && dVar7 <= dVar2) {\n      if (dVar7 <= dVar3) {\n        if (dVar7 <= _DAT_00102118) {\n          if (dVar7 <= _DAT_00102120) {\n            if (_DAT_00102128 < dVar7) {\n              *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102004;\n            }\n            else if (dVar7 <= _DAT_02130) {\n              if (_DAT_00102138 < dVar7) {\n                *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102011;\n              }\n              else if (dVar7 <= _DAT_00102140) {\n                if (dVar7 <= _DAT_00102148) {\n                  if (dVar7 <= _DAT_00102150) {\n                    *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102021;\n                    if (dVar7 <= DAT_00102158) {\n                      *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102024;\n                    }\n                  }\n                  else {\n                    *(undefined **)((long)pvVar4 + i * 8) = &DAT_0010201f;\n                  }\n                }\n                else {\n                  *(undefined **)((long)pvVar4 + i * 8) = &DAT_0010201c;\n                }\n              }\n              else {\n                *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102019;\n              }\n            }\n            else {\n              *(undefined **)((long)pvVar4 + i * 8) = &DAT_0010200f;\n            }\n          }\n          else {\n            *(undefined **", "double func0(long param_1, int param_2) {\n  double dVar1 = DAT_00102100;\n  double dVar2 = DAT_00102108;\n  double dVar3 = DAT_00102110;\n  void *pvVar4 = malloc((long)param_2 << 3);\n  int i;\n  for (i = 0; i < param_2; i++) {\n    double dVar7 = (double)*(float *)(param_1 + i * 4);\n    if (dVar1 <= dVar7 && dVar7 <= dVar2) {\n      if (dVar7 <= dVar3) {\n        if (dVar7 <= _DAT_00102118) {\n          if (dVar7 <= _DAT_00102120) {\n            if (_DAT_00102128 < dVar7) {\n              *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102004;\n            }\n            else if (dVar7 <= _DAT_021030) {\n              if (_DAT_00102138 < dVar7) {\n                *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102011;\n              }\n              else if (dVar7 <= _DAT_00102140) {\n                if (dVar7 <= _DAT_00102148) {\n                  if (dVar7 <= _DAT_00102150) {\n                    *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102021;\n                    if (dVar7 <= DAT_00102158) {\n                      *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102024;\n                    }\n                  }\n                  else {\n                    *(undefined **)((long)pvVar4 + i * 8) = &DAT_0010201f;\n                  }\n                }\n                else {\n                  *(undefined **)((long)pvVar4 + i * 8) = &DAT_0010201c;\n                }\n              }\n              else {\n                *(undefined **)((long)pvVar4 + i * 8) = &DAT_00102019;\n              }\n            }\n            else {\n              *(undefined **)((long)pvVar4 + i * 8) = &DAT_0010200f;\n            }\n          }\n          else {\n            *(undefined **", "int is_prime(char *str) {\n  int len = strlen(str);\n  if (len < 2) return 0;\n  for (int i = 2; i * i <= len; i++) {\n    if (len % i == 0) return 0;\n  }\n  return 1;\n}", "int func0(char *str) {\n  int len = strlen(str);\n  int i;\n  for (i = 0; i < len; i++) {\n    if (str[i] == '\\0') break;\n  }\n  if (i == 0) return 1;\n  if (i < 4) return 1;\n  if (len % 2 == 0) return 0;\n  int sqrt_len = 2;\n  while (sqrt_len * sqrt_len < len) {\n    sqrt_len++;\n    if ((len >> 31) & (i >> 31) == 0) return 1;\n  }\n  return 0;\n}", "int func0(char *str) {\n  int len = strlen(str);\n  if (len < 2) return 0;\n  if (len < 4) {\n    if (len % 2 == 0) return 0;\n    int i = 2;\n    while (i * i <= len) {\n      if ((len >> 31 & 0x7fffffffffffffff) % i == 0) return 0;\n      i++;\n    }\n  }\n  return 1;\n}", "int func0(char *param_1) {\n  size_t len = strlen(param_1);\n  if (len < 2) return 0;\n  if (len < 4) {\n    if (len & 1) return 0;\n    for (int i = 2; i * i <= len; i++) {\n      if ((len >> 31 & 0x7fffffffffffffff) % i == 0) return 0;\n    }\n  }\n  return 1;\n}", "int func0(int param_1) {\n  if (param_1 < 2) {\n    return 0;\n  }\n  else if (param_1 == 2) {\n    return 1;\n  }\n  else {\n    int local_c = 2;\n    int result = 0x12;\n    while (local_c < param_1) {\n      result = result * 10;\n      local_c++;\n    }\n    return result;\n  }\n}", "int func0(int param_1) {\n  int iVar1 = 0;\n  int iVar2 = 0;\n  \n  if (param_1 > 1 && param_1 > 0) {\n    if (param_1 > 2) {\n      iVar2 = 2;\n      iVar1 = 0x12;\n      while (iVar2 < param_1) {\n        iVar1 = iVar1 * 10;\n        iVar2 = iVar2 + 1;\n      }\n    } else {\n      iVar1 = 0x12;\n    }\n  }\n  return iVar1;\n}", "int func0(int param_1) {\n  int iVar1 = 0;\n  int iVar2 = 0;\n  \n  if (param_1 > 1 && param_1!= 1) {\n    if (param_1!= 2) {\n      iVar2 = 2;\n      iVar1 = 0x12;\n      while (iVar2 < param_1) {\n        iVar2++;\n        iVar1 *= 10;\n      }\n    } else {\n      iVar1 = 0x12;\n    }\n  }\n  return iVar1;\n}", "int func0(int param_1) {\n  int iVar1 = 0;\n  int iVar2 = 0;\n  \n  if (param_1 > 1 && param_1!= 1) {\n    if (param_1!= 2) {\n      iVar2 = 2;\n      iVar1 = 0x12;\n      while (iVar2 < param_1) {\n        iVar2++;\n        iVar1 *= 10;\n      }\n    } else {\n      iVar1 = 0x12;\n    }\n  }\n  return iVar1;\n}", "char* func0(int param_1) {\n  char* result = (char*)malloc(0x21);\n  int sum = 0;\n  for (int i = 0; param_1[i]!= '\\0'; i++) {\n    sum += param_1[i] - 0x30;\n  }\n  if (sum == 0) {\n    result[0] = 0x30;\n  } else {\n    int i = 0;\n    while (sum > 0) {\n      int digit = sum % 2;\n      result[i++] = digit + '0';\n      sum /= 2;\n    }\n    result[i] = '\\0';\n  }\n  for (int i = 0; i < strlen(result) / 2; i++) {\n    char temp = result[i];\n    result[i] = result[strlen(result) - i - 1];\n    result[strlen(result) - i - 1] = temp;\n  }\n  return result;\n}", "int func0(char *param_1) {\n  char *str = param_1;\n  int len = 0;\n  char *buf = (char *)malloc(21);\n  int i = 0;\n  int sign = 1;\n  int num_digits = 0;\n  int j = 0;\n  int reversed = 0;\n  int offset = 0;\n  int temp = 0;\n  int fs_offset = *(int *)(0x28);\n\n  if (strlen(param_1) == 0) {\n    for (i = 0; i < 21; i++) {\n      buf[i] = 0x30;\n    }\n    return 1;\n  }\n\n  for (i = 0; i < strlen(param_1); i++) {\n    len += (param_1[i] - 0x30) & 1;\n  }\n\n  if (len == 0) {\n    for (i = 0; i < 21; i++) {\n      buf[i] = 0x30;\n    }\n    return 1;\n  }\n\n  for (i = 0; i < strlen(param_1); i++) {\n    num_digits = (len >> 0x1f) + 1;\n    buf[i] = (char)(len & 1) + (len >> 0x1f) + 0x30;\n    len = len / 2;\n  }\n\n  if (num_digits > 1) {\n    for (i = num_digits - 1; i > 0; i--) {\n      temp = buf[i];\n      buf[i] = buf[i - 1];\n      buf[i - 1] = temp;\n    }\n  }\n\n  if (num_digits > 1) {\n    for (i = 0; i < (num_digits >> 1); i++) {\n      temp = buf[i];\n      buf[i] = buf[num_digits - 1 - i];\n      buf[num_digits - 1 - i] = temp;\n    }\n  }\n\n  if (num_digits > 1) {\n    for (i = 0; i < (num_digits >> 1); i++) {\n      temp = buf[i];\n      buf[i] = buf[num_digits - 1 - i];\n      buf[num_digits - 1 - i] = temp;\n    }\n  }\n\n  buf[num_digits] = 0;\n  return 0", "char* func0(undefined4 param_1) {\n  char* str = malloc(0x21);\n  if (param_1[0] == '\\0') {\n    for (int i = 0; i < 0x21; i++) {\n      str[i] = 0x30;\n    }\n  } else {\n    int sum = 0;\n    for (int i = 0; param_1[i]!= '\\0'; i++) {\n      sum += (int)param_1[i];\n    }\n    if (sum == 0) {\n      for (int i = 0; i < 0x21; i++) {\n        str[i] = 0x30;\n      }\n    } else {\n      int i = 0;\n      while (param_1[i]!= '\\0') {\n        i++;\n      }\n      str = malloc(0x21);\n      int j = 0;\n      while (sum > 0) {\n        str[j++] = (char)((sum & 1) + 0x30);\n        sum >>= 1;\n      }\n      str[j] = 0;\n      if (i % 2 == 0) {\n        int k = j / 2;\n        while (k > 0) {\n          char temp = str[k];\n          str[k] = str[j - k];\n          str[j - k] = temp;\n          k--;\n        }\n      }\n    }\n  }\n  str[0] = 0;\n  if (str!= NULL) {\n    return str;\n  } else {\n    return NULL;\n  }\n}", "void func0(undefined4 param_1)\n{\n  char* str = malloc(0x21);\n  if (param_1[0] == '\\0') {\n    for (int i = 0; i < 0x21; i++) {\n      str[i] = '0';\n    }\n  } else {\n    int len = 0;\n    if (param_1[1]!= '\\0') {\n      len = strlen(param_1);\n      for (int i = 0; i < 5; i++) {\n        if (param_1[i]!= '\\0') {\n          len = i;\n        }\n      }\n    }\n    str[0] = '0';\n    for (int i = 1; i <= len; i++) {\n      str[i] = (param_1[len - i] & 1) + '0';\n    }\n    str[len + 1] = '\\0';\n    if (len == 0) {\n      for (int i = 0; i < 0x21; i++) {\n        str[i] = '0';\n      }\n    } else {\n      int half = len / 2;\n      for (int i = 0; i < half; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n      }\n    }\n  }\n  if (str[0] == '\\0') {\n    free(str);\n  }\n  return str;\n}", "int func0(long param_1,int param_2) {\n  int local_10 = 0;\n  for (int local_c = 0; local_c * 2 + 1 < param_2; local_c++) {\n    if (*(uint *)(param_1 + (local_c * 2 + 1) * 4) & 1 == 0) {\n      local_10 += *(int *)(param_1 + (local_c * 2 + 1) * 4);\n    }\n  }\n  return local_10;\n}", "int func0(long param_1,int param_2) {\n  uint *puVar1;\n  int iVar2;\n  \n  if (param_2 < 2) {\n    iVar2 = 0;\n  }\n  else {\n    puVar1 = (uint *)(param_1 + 4);\n    iVar2 = 0;\n    while (puVar1!= (uint *)(param_1 + 0xc + (param_2 - 2) * 4)) {\n      if ((*puVar1 & 1) == 0) {\n        iVar2 += *puVar1;\n      }\n      puVar1 += 2;\n    }\n  }\n  return iVar2;\n}", "int func0(long param_1,int param_2)\n{\n  uint *puVar1;\n  int iVar2;\n  \n  if (param_2 > 1) {\n    puVar1 = (uint *)(param_1 + 4);\n    iVar2 = 0;\n    while (puVar1!= (uint *)(param_1 + 0xc + (param_2 - 2) * 4)) {\n      if ((*puVar1 & 1) == 0) {\n        iVar2 += *puVar1;\n      }\n      puVar1 += 2;\n    }\n    return iVar2;\n  }\n  return 0;\n}", "int func0(long param_1,int param_2)\n{\n  int iVar8 = 0;\n  int iVar9 = 0;\n  int iVar10 = 0;\n  int iVar11 = 0;\n  int iVar6 = 0;\n  int uVar7 = param_2 - 2;\n  if (uVar7 < 8) {\n    iVar6 = 0;\n  }\n  else {\n    long lVar5 = param_1;\n    do {\n      iVar8 += (-(uint)((*(uint *)(lVar5 + 4) & 0x10020) == 0) & *(uint *)(lVar5 + 4));\n      iVar9 += (-(uint)((*(uint *)(lVar5 + 0xc) & 0x10020) == 0) & *(uint *)(lVar5 + 0xc));\n      iVar10 += (-(uint)((*(uint *)(lVar5 + 0x14) & 0x10020) == 0) & *(uint *)(lVar5 + 0x14));\n      iVar11 += (-(uint)((*(uint *)(lVar5 + 0x1c) & 0x10020) == 0) & *(uint *)(lVar5 + 0x1c));\n      lVar5 += 0x20;\n    } while (lVar5!= (ulong)(uVar7 >> 3) * 0x20 + param_1);\n    iVar6 = (uVar7 >> 3) * 4;\n    uVar7 &= 0xfffffff8;\n    iVar8 += iVar10 + iVar9 + iVar11;\n  }\n  uVar7 = *(uint *)(param_1 + 4 + (long)(int)uVar7 * 4);\n  iVar6 *= 2;\n  if ((uVar7 & 1) == 0) {\n    iVar8 += uVar7;\n  }\n  if (iVar6 + 3 < param_2) {\n    uVar7 = *(uint *)(param_1 + 4 + (long)(iVar6 + 2) * 4);\n    if ((uVar7 & 1) == 0) {\n      iVar8 += uVar7;\n    }\n    if (iVar6 + 5 < param_2) {\n      uVar7 = *(uint *)(param_1 + 4 + (long)(", "char *func0(char *param_1) {\n  char cVar1;\n  size_t sVar2;\n  void *pvVar3;\n  long in_FS_OFFSET;\n  int local_6c;\n  int local_68;\n  int local_64;\n  int local_60;\n  int local_5c;\n  int local_58;\n  char acStack_48[56];\n  long local_10;\n\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar2 = strlen(param_1);\n  pvVar3 = malloc((long)((int)sVar2 + 2));\n  local_6c = 0;\n  local_68 = 0;\n  for (local_64 = 0; local_64 <= (int)sVar2; local_64++) {\n    if ((param_1[local_64] =='') || (param_1[local_64] == '\\0')) {\n      for (local_60 = 0; local_60 < local_68 - 1; local_60++) {\n        while (local_5c = local_60 + 1, local_5c < local_68) {\n          if (acStack_48[local_5c] < acStack_48[local_60]) {\n            cVar1 = acStack_48[local_60];\n            acStack_48[local_60] = acStack_48[local_5c];\n            acStack_48[local_5c] = cVar1;\n          }\n        }\n      }\n      if (local_6c > 0) {\n        *(char *)((long)pvVar3 + (long)local_6c - 1) ='';\n        local_6c++;\n      }\n      for (local_58 = 0; local_58 < local_68; local_58++) {\n        *(char *)((long)local_6c + (long)pvVar3) = acStack_48[local_58];\n        local_6c++;\n      }\n      local_68 = 0;\n    } else {\n      acStack_48[local_68] = param_1[local_64];\n      local_68++;\n    }\n  }\n  *(char *)((long)pvVar3 + (long)local_6c - 1) = '\\0';\n  if (local_10 ==", "void *func0(byte *param_1) {\n  ulong uVar1;\n  byte bVar2;\n  char cVar3;\n  void *pvVar4;\n  char *pcVar5;\n  long lVar6;\n  ulong uVar7;\n  long lVar8;\n  int iVar9;\n  byte *pbVar10;\n  byte *pbVar11;\n  int iVar12;\n  int iVar13;\n  long in_FS_OFFSET;\n  byte local_78[56];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  uVar7 = 0xffffffffffffffff;\n  pbVar11 = param_1;\n  while (uVar7 > 0) {\n    uVar7--;\n    bVar2 = *pbVar11;\n    pbVar11++;\n  }\n  uVar1 = ~uVar7 - 1;\n  pvVar4 = malloc((long)((int)~uVar7 + 1));\n  if (uVar1 < 0) {\n    iVar9 = 0;\n  } else {\n    pbVar11 = param_1 + (uVar1 & 0xffffffff) + 1;\n    iVar13 = 0;\n    iVar9 = 0;\n    while (param_1!= pbVar11) {\n      if ((*param_1 & 0xdf) == 0) {\n        if (iVar13 > 1) {\n          for (iVar12 = 0; iVar12 < iVar13; iVar12++) {\n            pcVar5 = (char *)local_78 + iVar12;\n            for (cVar3 = *pcVar5; pcVar5[1] < cVar3; pcVar5++) {\n              *pcVar5 = pcVar5[1];\n              cVar3 = pcVar5[1];\n            }\n          }\n        }\n        if (iVar9 > 0) {\n          *(undefined *)((long)pvVar4 + iVar9) = 0x20;\n          iVar9++;\n        }\n        iVar12 = 0;\n        if (iVar13 > 0) {\n          lVar8 = iVar9;\n          lVar6 = lVar8;\n          while (lVar8 + 1 + iVar13 - 1!= lVar6) {\n            *(byte *)((long)pvVar4 + lVar6) = local_78[lVar6 - l", "char* func0(char* str) {\n  int len = strlen(str);\n  char* sorted = (char*)malloc(len + 2);\n  char* sorted_ptr = sorted;\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int temp;\n  char local_68[56];\n  int local_30;\n  \n  local_30 = *(int*)(__stack_chk_guard);\n  for (int i = 0; i < len; i++) {\n    if ((str[i] & 0xDF) == 0) {\n      for (int j = 0; j < i; j++) {\n        if (local_68[j] < str[i]) {\n          temp = local_68[j];\n          local_68[j] = str[i];\n          str[i] = temp;\n        }\n      }\n      if (j!= 0) {\n        sorted[k] = 0x20;\n        k++;\n      }\n      for (int j = 0; j < i; j++) {\n        sorted[k] = local_68[j];\n        k++;\n      }\n      i++;\n    } else {\n      local_68[i] = str[i];\n    }\n  }\n  sorted[k] = 0;\n  if (local_30 == *(int*)(__stack_chk_guard)) {\n    return sorted;\n  }\n  abort();\n}", "int* func0(char* param_1) {\n  int iVar1;\n  uint uVar2;\n  char* pbVar3;\n  char cVar4;\n  size_t sVar5;\n  char* pcVar7;\n  long lVar8;\n  int iVar10;\n  int iVar13;\n  long in_FS_OFFSET;\n  char local_78[56];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar5 = strlen(param_1);\n  char* result = (char*)malloc(sVar5 + 2);\n  if (sVar5 > 0) {\n    int i;\n    for (i = 0; i < sVar5; i++) {\n      if ((param_1[i] & 0xdf)!= 0) {\n        local_78[i] = param_1[i];\n      }\n    }\n    for (i = 0; i < sVar5; i++) {\n      for (int j = i + 1; j < sVar5; j++) {\n        if (local_78[i] > local_78[j]) {\n          char temp = local_78[i];\n          local_78[i] = local_78[j];\n          local_78[j] = temp;\n        }\n      }\n    }\n    int count = 0;\n    for (i = 0; i < sVar5; i++) {\n      if (local_78[i] == 0x20) {\n        count++;\n      }\n    }\n    for (i = 0; i < sVar5; i++) {\n      if (local_78[i]!= 0x20) {\n        result[count++] = local_78[i];\n      }\n    }\n    result[sVar5] = '\\0';\n  }\n  *result = '\\0';\n  if (local_40!= *(long *)(in_FS_OFFSET + 0x28)) {\n    exit(1);\n  }\n  return (int*)result;\n}", "void* func0(long param_1, int param_2, long param_3, int param_4, int* param_5) {\n  void* pvVar1 = malloc(800);\n  int local_2c = 0;\n  for (int local_28 = 0; local_28 < param_2; local_28++) {\n    int local_24 = *(int*)(param_3 + local_28 * 4);\n    while (local_24 > -1) {\n      if (param_4 == *(int*)(*(long*)(param_1 + local_28 * 8) + local_24 * 4)) {\n        void* pvVar2 = malloc(8);\n        *(void**)((long)local_2c * 8 + (long)pvVar1) = pvVar2;\n        **(int**)((long)pvVar1 + (long)local_2c * 8) = local_28;\n        *(int*)(*(long*)((long)pvVar1 + (long)local_2c * 8) + 4) = local_24;\n        local_2c++;\n      }\n      local_24--;\n    }\n  }\n  *param_5 = local_2c;\n  return pvVar1;\n}", "int func0(long *param_1,int param_2,long param_3,int param_4,int *param_5) {\n  void *pvVar1 = malloc(800);\n  int iVar5 = 0;\n  if (param_2 < 1) {\n    return pvVar1;\n  }\n  for (int uVar6 = 0; uVar6 < param_2; uVar6++) {\n    int iVar3 = *(int *)(param_3 + uVar6 * 4) + -1;\n    if (iVar3 >= 0) {\n      long lVar4 = (long)iVar3 << 2;\n      while (iVar3 >= 0) {\n        if (*(int *)(*param_1 + lVar4) == param_4) {\n          undefined4 *puVar2 = malloc(8);\n          *(undefined4 **)((long)pvVar1 + (long)iVar5 * 8) = puVar2;\n          *puVar2 = (int)uVar6;\n          puVar2[1] = iVar3;\n          iVar5++;\n        }\n        iVar3--;\n        lVar4 -= 4;\n      }\n    }\n    param_1++;\n  }\n  *param_5 = iVar5;\n  return pvVar1;\n}", "int func0(int param_1, int param_2, int param_3, int param_4, int *param_5) {\n  int i;\n  int *array = malloc(800 / sizeof(int));\n  int count = 0;\n  if (param_2 < 1) {\n    return 0;\n  }\n  for (i = 0; i < param_2; i++) {\n    int index = *(int *)(param_3 + i * 4) - 1;\n    if (index >= 0) {\n      int j;\n      int *ptr = array + count;\n      for (j = index; j >= 0; j--) {\n        if (*(int *)(param_1 + j * 4) == param_4) {\n          ptr[1] = j;\n          *(int **)(array + count * 8) = ptr;\n          ptr[0] = i;\n          count++;\n          break;\n        }\n      }\n    }\n  }\n  *param_5 = count;\n  return array;\n}", "int func0(int param_1, int param_2, int param_3, int param_4, int *param_5) {\n  int i;\n  int *array = malloc(800 / sizeof(int));\n  int count = 0;\n  if (param_2 < 1) {\n    return 0;\n  }\n  for (i = 0; i < param_2; i++) {\n    int index = *(int *)(param_3 + i * 4) - 1;\n    if (index >= 0) {\n      int j;\n      int *ptr = array + count;\n      for (j = index; j >= 0; j--) {\n        if (*(int *)(param_1 + j * 4) == param_4) {\n          ptr[1] = j;\n          *(int **)(array + count * 8) = ptr;\n          ptr[0] = i;\n          count++;\n          break;\n        }\n      }\n    }\n  }\n  *param_5 = count;\n  return array;\n}", "int func(int *param_1,int param_2,void **param_3,int *param_4) {\n  if (param_2 == 0) {\n    *param_3 = NULL;\n  } else {\n    *param_4 = param_2;\n    *param_3 = malloc(param_2 * 4);\n    if (*param_3 == NULL) {\n      exit(1);\n    }\n    for (int i = 0; i < param_2; i++) {\n      ((int*)*param_3)[i] = param_1[i];\n    }\n    int iVar1 = param_1[0];\n    int iVar2 = param_1[param_2 - 1];\n    for (int i = 0; i < param_2 - 1; i++) {\n      for (int j = i + 1; j < param_2; j++) {\n        if ((iVar1 + iVar2) % 2 == 1) {\n          if (((int*)*param_3)[i] < ((int*)*param_3)[j]) {\n            int temp = ((int*)*param_3)[i];\n            ((int*)*param_3)[i] = ((int*)*param_3)[j];\n            ((int*)*param_3)[j] = temp;\n          }\n        } else if (((int*)*param_3)[i] < ((int*)*param_3)[j]) {\n          int temp = ((int*)*param_3)[i];\n          ((int*)*param_3)[i] = ((int*)*param_3)[j];\n          ((int*)*param_3)[j] = temp;\n        }\n      }\n    }\n  }\n  return 0;\n}", "void func0(int *param_1,int param_2,void **param_3,int *param_4)\n{\n  int *piVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  void *pvVar6;\n  long lVar7;\n  long lVar8;\n  int iVar9;\n  long lVar10;\n  \n  *param_4 = param_2;\n  if (param_2 == 0) {\n    *param_3 = NULL;\n  }\n  else {\n    pvVar6 = malloc(param_2 * 4);\n    *param_3 = pvVar6;\n    if (pvVar6 == NULL) {\n      exit(1);\n    }\n    if (param_2 > 0) {\n      for (lVar7 = 0; lVar7 < param_2 * 4; lVar7 += 4) {\n        *(int *)((long)*param_3 + lVar7) = *(int *)((long)param_1 + lVar7);\n      }\n    }\n    iVar2 = *param_1;\n    iVar3 = param_1[param_2 - 1];\n    if (param_2 > 1) {\n      for (lVar7 = 0, lVar10 = 0; lVar7 < param_2 * 4; lVar7 += 4) {\n        for (iVar9 = 0; iVar9 < param_2; iVar9++) {\n          if ((iVar2 + iVar3) % 2 == 1) {\n            piVar1 = (int *)((long)*param_3 + lVar7);\n            iVar4 = *piVar1;\n            iVar5 = *(int *)((long)*param_3 + lVar7 + 4);\n            if (iVar5 < iVar4) {\n              *piVar1 = iVar5;\n              *(int *)((long)*param_3 + lVar7 + 4) = iVar4;\n            }\n          }\n          else {\n            piVar1 = (int *)((long)*param_3 + lVar7);\n            iVar4 = *piVar1;\n            iVar5 = *(int *)((long)*param_3 + lVar7 + 4);\n            if (iVar4 < iVar5) {\n              *piVar1 = iVar5;\n              *(int *)((long)*param_3 + lVar7 + 4)", "int* func0_part_0(int* param_1, int param_2, int** param_3) {\n  int* piVar4 = (int*)malloc(param_2 * 4);\n  *param_3 = piVar4;\n  if (piVar4 == NULL) {\n    exit(1);\n  }\n  for (ulong uVar6 = 0; uVar6 < param_2; uVar6++) {\n    piVar4[uVar6] = param_1[uVar6];\n  }\n  if (param_2 < 2) {\n    return NULL;\n  }\n  for (int iVar1 = *param_1, iVar2 = param_1[param_2 - 1], lVar9 = 1, iVar5 = 0, lVar7 = 1; lVar9 <= param_2; lVar9++, iVar5++, lVar7++) {\n    if (iVar5 < param_2) {\n      if ((iVar1 + iVar2) % 2 == 1) {\n        if (iVar5 > piVar4[lVar7]) {\n          piVar4[lVar7] = iVar5;\n        }\n      } else {\n        if (iVar5 < piVar4[lVar7]) {\n          piVar4[lVar7] = iVar5;\n        }\n      }\n    }\n  }\n  return piVar4;\n}", "int* func0_part_0(int *param_1, int param_2, int **param_3) {\n  int *dest = (int*)malloc(param_2 * sizeof(int));\n  *param_3 = dest;\n  if (!dest) {\n    exit(1);\n  }\n  if (param_2 > 0) {\n    memcpy(dest, param_1, (param_2 - 1) * sizeof(int));\n  }\n  int first = *param_1;\n  int last = param_1[param_2 - 1];\n  for (int i = 1; i < param_2; i++) {\n    for (int j = 0; j < param_2; j++) {\n      if ((first + last) % 2!= 1) {\n        if (dest[j] < dest[i]) {\n          int temp = dest[j];\n          dest[j] = dest[i];\n          dest[i] = temp;\n        }\n      } else {\n        if (dest[i] < dest[j]) {\n          int temp = dest[i];\n          dest[i] = dest[j];\n          dest[j] = temp;\n        }\n      }\n    }\n  }\n  return dest;\n}", "char* func0(char* param_1, char* param_2) {\n  for (int i = 0; param_1[i]!= '\\0'; i++) {\n    int iVar1 = param_1[i] - 93;\n    param_2[i] = (iVar1 + (iVar1 / 26) * -26) + 'a';\n  }\n  param_2[i] = '\\0';\n  return param_2;\n}", "char* func0(char *param_1, long param_2) {\n  char cVar1 = *param_1;\n  long lVar2 = 0;\n  \n  if (cVar1 == '\\0') {\n    return param_2;\n  }\n  \n  do {\n    *(char *)(param_2 + lVar2) = ((cVar1 - 93) + ((cVar1 - 93) / 26) * -26) + 'a';\n    lVar2++;\n    cVar1 = param_1[lVar2];\n  } while (cVar1!= '\\0');\n  \n  *(char *)(param_2 + lVar2) = '\\0';\n  return param_2;\n}", "char* func0(char *param_1, undefined *param_2) {\n  char cVar1;\n  int lVar2 = 0;\n  \n  while ((cVar1 = param_1[lVar2])!= '\\0') {\n    param_2[lVar2] = (char)((cVar1 - 157) + ((cVar1 - 157) / 26) * -26 + 'a');\n    lVar2++;\n  }\n  param_2[lVar2] = '\\0';\n  return param_2;\n}", "char* func0(char *param_1, undefined *param_2) {\n  char cVar1;\n  int lVar2 = 0;\n  \n  while ((cVar1 = param_1[lVar2])!= '\\0') {\n    param_2[lVar2] = (char)((cVar1 - 157) + ((cVar1 - 157) / 26) * -26 + 'a');\n    lVar2++;\n  }\n  param_2[lVar2] = '\\0';\n  return param_2;\n}", "int find_min(int* arr, int size) {\n  if (size < 2) {\n    return -1;\n  }\n  int max = INT_MAX;\n  int min = INT_MAX;\n  for (int i = 0; i < size; i++) {\n    if (arr[i] < max) {\n      min = max;\n      max = arr[i];\n    } else if (arr[i] < min && arr[i]!= max) {\n      min = arr[i];\n    }\n  }\n  return (min == INT_MAX)? -1 : min;\n}", "int findMin(int *arr, int size) {\n  if (size < 2) {\n    return -1;\n  }\n  int min = 0x7fffffff;\n  int tempMin = 0x7fffffff;\n  int *end = arr + size - 1;\n  while (arr!= end) {\n    int current = *arr;\n    tempMin = min;\n    min = tempMin;\n    if (min <= current && current < tempMin) {\n      min = current;\n    }\n    arr++;\n    tempMin = min;\n  }\n  if (min == 0x7fffffff) {\n    return -1;\n  }\n  return min;\n}", "int findMin(int *arr, int n) {\n  if (n < 1) return -1;\n  int *piVar1 = arr + (n - 1);\n  int max = 0x7fffffff;\n  int min = 0x7fffffff;\n  for (int *p = arr; p!= piVar1; p++) {\n    int val = *p;\n    if (val < min) {\n      min = val;\n    }\n    if (val > max) {\n      max = val;\n    }\n  }\n  return (min == 0x7fffffff)? -1 : min;\n}", "int findMin(int *arr, int size) {\n  if (size < 2) return -1;\n  int min = 0x7fffffff;\n  int current = 0x7fffffff;\n  int *end = arr + size - 1;\n  while (arr!= end) {\n    int val = *arr;\n    if (current <= val) break;\n    min = current;\n    current = val;\n    arr++;\n    if (arr == end) break;\n  }\n  if (current < min) min = current;\n  if (min!= 0x7fffffff) return min;\n  return -1;\n}", "int func0(long param_1) {\n  bool is_upper = true;\n  bool is_first_upper = false;\n  ushort **ctype_table = __ctype_b_loc();\n  int count = 0;\n  int i = 0;\n  \n  while (param_1[i]!= '\\0') {\n    if (((*ctype_table)[param_1[i]] & 0x2000)!= 0 && is_first_upper) {\n      is_first_upper = false;\n      count++;\n    }\n    if (param_1[i] == 'I' && is_upper) {\n      is_first_upper = true;\n    } else {\n      if ((*ctype_table)[param_1[i]] & 0x2000 == 0) {\n        is_first_upper = false;\n      }\n    }\n    if ((*ctype_table)[param_1[i]] & 0x2000 == 0) {\n      is_upper = false;\n    }\n    if (param_1[i] == '.' || param_1[i] == '?' || param_1[i] == '!') {\n      is_upper = true;\n    }\n    i++;\n  }\n  return count;\n}", "int func0(byte *param_1) {\n  bool bVar1 = false, bVar2 = false;\n  ushort uVar3 = 0;\n  ushort **ppuVar4 = __ctype_b_loc();\n  byte bVar5 = *param_1;\n  int iVar6 = 0;\n  \n  if (bVar5!= 0) {\n    uVar3 = (*ppuVar4)[(char)bVar5] & 0x2000;\n    param_1++;\n    while (bVar5!= 0) {\n      if (bVar5 == 0x49 && uVar3!= 0) {\n        bVar2 = true;\n      }\n      else if (bVar5 < 0x40 && (0x8000400200000000U >> (bVar5 & 0x3f) & 1)!= 0) {\n        bVar1 = true;\n      }\n      else {\n        bVar1 = false;\n        bVar2 = false;\n      }\n      if (bVar2 && uVar3!= 0) {\n        iVar6++;\n        bVar2 = false;\n      }\n      uVar3 = (*ppuVar4)[(char)bVar5] & 0x2000;\n      bVar5 = *param_1;\n      param_1++;\n    }\n  }\n  return iVar6;\n}", "int func0(byte *param_1) {\n  bool bVar1 = false;\n  bool bVar2;\n  byte bVar3 = 1;\n  ushort **ppuVar4 = __ctype_b_loc();\n  int iVar6 = 0;\n  byte bVar5 = *param_1;\n  if (bVar5 == 0) {\n    return 0;\n  }\n  param_1++;\n  do {\n    while ((bVar2 = (bVar5 == 0x49) && bVar3) &&\n           (*(byte *)((long)*ppuVar4 + (long)(char)bVar5 * 2 + 1) & 0x20)!= 0) {\n      iVar6 = (iVar6 + 1) - (uint)!bVar1;\n      if (!bVar2) break;\n      bVar3 = 1;\n      bVar1 = true;\n      bVar5 = *param_1;\n      param_1++;\n    }\n    if (bVar2) continue;\n    bVar1 = false;\n    if ((bVar5 < 0x40) && ((0x8000400200000000U >> (bVar5 & 0x3f) & 1)!= 0)) {\n      bVar3 = 1;\n    }\n    bVar5 = *param_1;\n    param_1++;\n  } while (bVar5!= 0);\n  return iVar6;\n}", "int func0(byte *param_1) {\n  bool bVar1 = false;\n  bool bVar2;\n  byte bVar3 = 1;\n  ushort **ppuVar4 = __ctype_b_loc();\n  int iVar6 = 0;\n  byte bVar5 = *param_1;\n  if (bVar5 == 0) {\n    return 0;\n  }\n  param_1++;\n  do {\n    while ((bVar2 = (bVar5 == 0x49) && bVar3) &&\n           (*(byte *)((long)*ppuVar4 + (long)(char)bVar5 * 2 + 1) & 0x20)!= 0) {\n      iVar6 = (iVar6 + 1) - (uint)!bVar1;\n      if (!bVar2) break;\n      bVar3 = 1;\n      bVar1 = true;\n      bVar5 = *param_1;\n      param_1++;\n    }\n    if (bVar2) continue;\n    bVar1 = false;\n    if ((bVar5 < 0x40) && ((0x8000400200000000U >> (bVar5 & 0x3f) & 1)!= 0)) {\n      bVar3 = 1;\n    }\n    bVar5 = *param_1;\n    param_1++;\n  } while (bVar5!= 0);\n  return iVar6;\n}", "int func0(float a, float b, float c) {\n  float rounded_a = round(a);\n  float rounded_b = round(b);\n  float rounded_c = round(c);\n  \n  if (rounded_a == a && rounded_b == b && rounded_c == c) {\n    if ((a + b == c) || (a + c == b) || (b + c == a)) {\n      return 1;\n    }\n  }\n  return 0;\n}", "bool func0(float param_1,float param_2,float param_3)\n{\n  bool bVar1;\n  float fVar2;\n  \n  fVar2 = roundf(param_1);\n  if (fVar2 == param_1) {\n    fVar2 = roundf(param_2);\n    if (fVar2 == param_2) {\n      fVar2 = roundf(param_3);\n      bVar1 = fVar2 == param_3 && param_2 + param_3 == param_1;\n    }\n    else {\n      bVar1 = false;\n    }\n  }\n  else {\n    bVar1 = false;\n  }\n  return bVar1;\n}", "bool func0(float param_1, float param_2, float param_3) {\n  float fVar1 = roundf(param_1);\n  return (fVar1 == param_1) && (fVar1 == roundf(param_2)) && (fVar1 == roundf(param_3)) && (param_2 + param_3 == param_1);\n}", "bool func0(float param_1, float param_2, float param_3) {\n  float fVar1 = roundf(param_1);\n  return (fVar1 == param_1) && (fVar1 == roundf(param_2)) && (fVar1 == roundf(param_3)) && (param_2 + param_3 == param_1);\n}", "char func0(char *str, char *dest) {\n  int i;\n  char c;\n  int *ctype = __ctype_b_loc();\n  \n  for (i = 0; str[i]!= '\\0'; i++) {\n    c = str[i];\n    if ((*ctype)[c] & 0x200) {\n      c = toupper(c);\n    } else if ((*ctype)[c] & 0x100) {\n      c = tolower(c);\n    }\n    if (\"aeiouAEIOU\"[i] == c) {\n      if (i < 10) {\n        c += 2;\n      }\n    }\n    dest[i] = c;\n  }\n  return 0;\n}", "int toLowercase(char *str, long len) {\n  const ushort *ctype = __ctype_b_loc();\n  const int *tolower = __ctype_tolower_loc();\n  const int *toupper = __ctype_toupper_loc();\n  char *result = (char *)str;\n  char c;\n  int i;\n  int count = 0;\n\n  for (i = 0; str[i]!= '\\0'; i++) {\n    c = str[i];\n    if (c == '\\0') {\n      break;\n    }\n    if ((ctype[c] & 0x200) == 0) {\n      if ((ctype[c] & 0x100)!= 0) {\n        c = tolower[c];\n      }\n    } else {\n      c = toupper[c];\n    }\n    while (c!= '\\0' && c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O' && c!= 'U') {\n      c++;\n    }\n    if (c!= '\\0') {\n      c += (c >= 'a' && c <= 'z')? 2 : 0;\n    }\n    result[i] = c;\n    count++;\n  }\n  result[count] = '\\0';\n  return count;\n}", "char* toLower(char* str, char* result) {\n  const unsigned char* ppuVar1 = __ctype_b_loc();\n  int lVar6 = 0;\n  while (*str!= '\\0') {\n    if ((*ppuVar1)[*str] & 0x200) {\n      *str = *(char *)(*__ctype_toupper_loc() + *str);\n    } else if ((*ppuVar1)[*str] & 0x100) {\n      *str = *(char *)(*__ctype_tolower_loc() + *str);\n    }\n    if (*str == 'a') {\n      if (lVar6 < 10) {\n        *str = *str + 2;\n      }\n      break;\n    }\n    if (lVar6 < 9) {\n      switch (*str) {\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n        case 'E':\n        case 'O':\n        case 'U':\n          *str = *str + 2;\n          break;\n      }\n    }\n    result[lVar6] = *str;\n    lVar6++;\n    str++;\n  }\n  result[lVar6] = '\\0';\n  return result;\n}", "char* toLower(char* str, char* result) {\n  const unsigned char* ppuVar1 = __ctype_b_loc();\n  int lVar6 = 0;\n  while (*str!= '\\0') {\n    if ((*ppuVar1)[*str] & 0x200) {\n      *str = *(char *)(*__ctype_toupper_loc() + *str);\n    } else if ((*ppuVar1)[*str] & 0x100) {\n      *str = *(char *)(*__ctype_tolower_loc() + *str);\n    }\n    if (*str == 'a') {\n      if (lVar6 < 10) {\n        *str = *str + 2;\n      }\n      break;\n    }\n    if (lVar6 < 9) {\n      switch (*str) {\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n        case 'E':\n        case 'O':\n        case 'U':\n          *str = *str + 2;\n          break;\n      }\n    }\n    result[lVar6] = *str;\n    lVar6++;\n    str++;\n  }\n  result[lVar6] = '\\0';\n  return result;\n}", "int func0(long param_1, int param_2) {\n  int iVar1;\n  bool bVar2;\n  int iVar3;\n  int local_20 = 0;\n  int local_1c = 0;\n  int local_18 = 0;\n  int local_10;\n\n  while (param_2 > local_18) {\n    if (param_2 <= local_18) {\n      for (local_20 = local_20; local_20 > 0; local_20 /= 10) {\n        local_1c += local_20 % 10;\n      }\n      return local_1c;\n    }\n    iVar1 = *(int *)(param_1 + (long)local_18 * 4);\n    iVar3 = local_20;\n    if (iVar1 > 1) {\n      bVar2 = true;\n      for (local_10 = 2; local_10 * local_10 <= iVar1; local_10++) {\n        if (iVar1 % local_10 == 0) {\n          bVar2 = false;\n          break;\n        }\n      }\n      if (bVar2 && iVar1 <= local_20) {\n        iVar3 = local_20;\n      }\n    }\n    local_20 = iVar3;\n    local_18++;\n  }\n}", "int func0(uint *param_1,int param_2) {\n  uint *puVar1 = param_1 + (param_2 - 1);\n  uint uVar2;\n  bool bVar3;\n  int iVar4 = 0;\n  uint uVar5 = 0;\n  uint uVar6 = 0;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  \n  while (param_1!= puVar1) {\n    uVar2 = *param_1;\n    if (uVar2 > 1) {\n      if (uVar2 < 4) {\n        bVar3 = uVar5 < uVar2;\n        uVar5 = uVar6;\n        if (bVar3) {\n          uVar5 = uVar2;\n          uVar6 = uVar2;\n        }\n      }\n      else if (uVar2 & 1) {\n        while (uVar2 < iVar4 * iVar4) {\n          iVar4++;\n        }\n        while (uVar2 % iVar4!= 0) {\n          iVar4++;\n        }\n      }\n    }\n    param_1++;\n  }\n  \n  if (uVar5 < 1) {\n    return 0;\n  }\n  \n  while (uVar5 > 0) {\n    iVar4 += uVar5 % 10;\n    bVar3 = uVar5 < 10;\n    uVar5 /= 10;\n  }\n  \n  return iVar4;\n}", "int func0(uint *param_1,int param_2) {\n  if (param_2 < 1) return 0;\n  uint max = 0;\n  uint *end = param_1 + (param_2 - 1) + 1;\n  while (param_1!= end) {\n    uint num = *param_1;\n    if (num > 1) {\n      if (num < 4) {\n        max = (max < num)? num : max;\n      } else if (num & 1) {\n        int i = 2;\n        while (num < i * i) {\n          i++;\n        }\n        while (num % i!= 0) {\n          i++;\n        }\n      }\n    }\n    param_1++;\n    if (param_1 == end) {\n      int sum = 0;\n      while (max!= 0) {\n        sum += max % 10;\n        max /= 10;\n      }\n      return sum;\n    }\n  }\n}", "int func0(uint *param_1,int param_2) {\n  if (param_2 < 1) return 0;\n  uint max = 0;\n  uint *end = param_1 + (param_2 - 1) + 1;\n  while (param_1!= end) {\n    uint num = *param_1;\n    if (num > 1) {\n      if (num < 4) {\n        max = (max < num)? num : max;\n      } else if (num & 1) {\n        int i = 2;\n        while (num < i * i) {\n          i++;\n          if (num % i == 0) goto loop_start;\n        }\n      }\n    }\n    param_1++;\n    if (param_1 == end) {\n      int sum = 0;\n      while (max!= 0) {\n        sum += max % 10;\n        max /= 10;\n      }\n      return sum;\n    }\n  loop_start:;\n  }\n}", "int func0(long param_1, int param_2) {\n  int lVar1;\n  int uVar2;\n  int local_20 = 0;\n  int local_1c = 0;\n  int local_18;\n  int local_14;\n  \n  if (param_2 == 0) {\n    uVar2 = 0;\n  }\n  else {\n    for (local_18 = 0; local_18 < param_2; local_18++) {\n      long lVar3 = *(long *)(param_1 + local_18 * 0x10);\n      for (local_14 = 0; local_14 < strlen((char *)lVar3); local_14++) {\n        if (!iswctype(*(wchar_t *)(lVar3 + local_14), Wctype::space)) {\n          return 0;\n        }\n        if (iswctype(*(wchar_t *)(lVar3 + local_14), Wctype::alnum)) {\n          local_1c = 1;\n        }\n        if (iswctype(*(wchar_t *)(lVar3 + local_14), Wctype::digit)) {\n          local_20 = 1;\n        }\n        if (local_20 + local_1c == 2) {\n          return 0;\n        }\n      }\n    }\n    uVar2 = 1;\n  }\n  return uVar2;\n}", "int func0(byte **param_1,int param_2)\n{\n  ushort uVar1;\n  ushort **ppuVar2;\n  byte bVar3;\n  byte *pbVar4;\n  int iVar5;\n  int iVar6;\n  \n  if (param_2 < 1) {\n    return 1;\n  }\n  iVar6 = 0;\n  iVar5 = 0;\n  for (int i = 0; i < param_2; i++) {\n    pbVar4 = param_1[i];\n    bVar3 = *pbVar4;\n    if (bVar3!= 0) {\n      ppuVar2 = __ctype_b_loc();\n      while (bVar3!= 0) {\n        uVar1 = (*ppuVar2)[bVar3];\n        if ((uVar1 & 0x400) == 0) {\n          return 0;\n        }\n        if ((uVar1 & 0x100) == 0) {\n          if ((uVar1 & 0x200)!= 0) {\n            iVar5 = 1;\n          }\n        }\n        else {\n          iVar6 = 1;\n          if ((uVar1 & 0x200)!= 0) {\n            return 0;\n          }\n        }\n        if (iVar5 + iVar6 == 2) {\n          return 0;\n        }\n        bVar3 = *pbVar4;\n        pbVar4++;\n      }\n    }\n  }\n  return 1;\n}", "int func0_part_0(char **str, int len) {\n  if (len < 1) {\n    return 1;\n  }\n  for (int i = 0; i < len - 1; i++) {\n    char *p = str[i];\n    char c = *p;\n    if (c!= 0) {\n      const char *ctype = __ctype_b_loc();\n      for (char *q = p; *q!= 0; q++) {\n        char code = *q;\n        if ((ctype[code] & 0x400) == 0) {\n          return 0;\n        }\n        if ((ctype[code] & 0x100) == 0) {\n          if ((ctype[code] & 0x200)!= 0) {\n            return 1;\n          }\n        } else {\n          if ((ctype[code] & 0x200)!= 0) {\n            return 0;\n          }\n          return 2;\n        }\n      }\n    }\n  }\n  return 1;\n}\n\nint func0(int len) {\n  if (len!= 0) {\n    return func0_part_0(NULL, len);\n  }\n  return 0;\n}", "int func0(char **str, int len) {\n  if (len == 0) return 0;\n  if (len < 1) return 1;\n  int i = 0;\n  char *ptr = str[len - 1];\n  while (true) {\n    char c = *ptr;\n    if (c!= 0) {\n      const unsigned short *ctype = __ctype_b_loc();\n      while (c!= 0) {\n        if ((*ctype)[c] & 0x400) return 0;\n        if ((*ctype)[c] & 0x100) {\n          if ((*ctype)[c] & 0x200) i++;\n        } else {\n          if ((*ctype)[c] & 0x200) return 0;\n          i++;\n        }\n        if (i == 2) return 0;\n        c = *(++ptr);\n      }\n    }\n    ptr = str[i];\n    if (ptr == str[len - 1]) return 1;\n    i++;\n  }\n}", "int func0(int param_1, int *param_2) {\n  int iVar1;\n  bool bVar2;\n  void *pvVar3;\n  int local_20;\n  int local_1c;\n  \n  pvVar3 = malloc(param_1 * 4);\n  *param_2 = 0;\n  local_20 = 2;\n  while (param_1 > local_20) {\n    if (param_1 <= local_20) {\n      return pvVar3;\n    }\n    bVar2 = true;\n    local_1c = 0;\n    while (true) {\n      if (*param_2 > local_1c || (iVar1 = *(int *)((char*)pvVar3 + local_1c * 4), local_20 < iVar1 * iVar1)) {\n        break;\n      }\n      if (local_20 % iVar1 == 0) break;\n      local_1c++;\n    }\n    bVar2 = false;\n    if (bVar2) {\n      *(int *)((char*)*param_2 * 4 + (char*)pvVar3) = local_20;\n      *param_2++;\n    }\n    local_20++;\n  }\n  return pvVar3;\n}", "int* func0(int param_1, int* param_2) {\n  int* result = (int*)malloc(param_1 * 4);\n  *param_2 = 0;\n  int i = 2;\n  while (i < param_1) {\n    int j = *param_2;\n    if (j > 0) {\n      for (int k = 0; k < j; k++) {\n        int squared = result[k];\n        if (i * i > squared) break;\n        if (i % squared == 0) return result;\n        k++;\n      }\n    }\n    result[j] = i;\n    *param_2 = j + 1;\n    i++;\n  }\n  return result;\n}", "int* func0(int param_1, int* param_2) {\n  int* piVar2 = (int*)malloc((long)param_1 << 2);\n  *param_2 = 0;\n  int iVar5 = 0;\n  int iVar4 = 2;\n  if (param_1 < 3) {\n    return piVar2;\n  }\n  while (iVar5 < param_1) {\n    if (iVar5 > 0) {\n      int* piVar3 = piVar2;\n      while (piVar3!= piVar2 + iVar5) {\n        int iVar1 = *piVar3;\n        if (iVar4 < iVar1 * iVar1) break;\n        if (iVar4 % iVar1 == 0) goto LAB_00101786;\n        piVar3++;\n      }\n    }\n    piVar2[iVar5] = iVar4;\n    *param_2 = iVar5 + 1;\n    iVar4++;\n    if (iVar4 == param_1) {\n      return piVar2;\n    }\n    iVar5 = *param_2;\n  }\nLAB_00101786:\n  return piVar2;\n}", "int* func0(int param_1, int* param_2) {\n  int* piVar2 = (int*)malloc((long)param_1 << 2);\n  *param_2 = 0;\n  int iVar6 = 0;\n  int iVar5 = 2;\n  while (iVar5 < param_1) {\n    if (iVar6!= 0) {\n      for (int i = 0; i < iVar6; i++) {\n        int iVar1 = piVar2[i];\n        if (iVar5 < iVar1 * iVar1) break;\n        if (iVar5 % iVar1 == 0) return piVar2;\n      }\n    }\n    piVar2[iVar6] = iVar5;\n    *param_2 = iVar6 + 1;\n    iVar6++;\n    iVar5++;\n  }\n  return piVar2;\n}", "int func0(uint param_1,uint param_2)\n{\n  uint local_1 = param_1 >> 0x1f ^ param_1;\n  uint local_2 = local_1 - local_1;\n  uint local_3 = param_2 >> 0x1f ^ param_2;\n  uint local_4 = local_3 - local_3;\n  return (local_2 % 10) * (local_4 % 10);\n}", "int func0(uint param_1,uint param_2)\n{\n  uint t1 = param_1 ^ (param_1 >> 31);\n  uint t2 = t1 - (param_1 >> 31);\n  uint t3 = t2 % 10;\n  uint t4 = param_2 ^ (param_2 >> 31);\n  uint t5 = t4 - (param_2 >> 31);\n  uint t6 = t5 % 10;\n  return (int)t3 * (int)t6;\n}", "int func0(uint param_1,uint param_2)\n{\n  uint temp = param_2 ^ (param_2 >> 31);\n  uint temp2 = temp - (param_2 >> 31);\n  uint temp3 = param_1 ^ (param_1 >> 31);\n  uint temp4 = temp3 - (param_1 >> 31);\n  return (temp2 % 10) * (temp4 % 10);\n}", "int func0(uint param_1,uint param_2)\n{\n  uint temp = param_2 ^ (param_2 >> 31);\n  uint temp2 = temp - (param_2 >> 31);\n  uint temp3 = param_1 ^ (param_1 >> 31);\n  uint temp4 = temp3 - (param_1 >> 31);\n  return (temp2 % 10) * (temp4 % 10);\n}", "int count_vowels(char *str) {\n  int count = 0;\n  int i = 0;\n  while (str[i]!= '\\0') {\n    if (i * 2 >= strlen(str)) break;\n    char *vowel = strchr(\"AEIOU\", str[i * 2]);\n    if (vowel!= NULL) count++;\n    i++;\n  }\n  return count;\n}", "int countVowels(char *str) {\n  if (*str == '\\0') return 0;\n  int count = 0;\n  for (int i = 0; str[i]!= '\\0'; i++) {\n    if (str[i] == 'A' || str[i] == 'E' || str[i] == 'I' || str[i] == 'O' || str[i] == 'U') {\n      count++;\n    }\n  }\n  return count;\n}", "int count_vowels(char *str) {\n  int count = 0;\n  for (size_t i = 0; str[i]; i++) {\n    switch (str[i]) {\n      case 'A':\n      case 'E':\n      case 'I':\n      case 'O':\n      case 'U':\n        count++;\n    }\n  }\n  return count;\n}", "int count_vowels(char *str) {\n  int count = 0;\n  for (size_t i = 0; str[i]; i++) {\n    switch (str[i]) {\n      case 'A':\n      case 'E':\n      case 'I':\n      case 'O':\n      case 'U':\n        count++;\n    }\n  }\n  return count;\n}", "int func0(char *param_1) {\n  double dVar1 = atof(param_1);\n  if (dVar1 >= 0.0) {\n    dVar1 = floor(DAT_001020a0 + dVar1);\n  } else {\n    dVar1 = ceil(dVar1 - DAT_001020a0);\n  }\n  return (int)dVar1;\n}", "double func0(char *param_1) {\n  double dVar1 = strtod(param_1, (char **)0x0);\n  if (dVar1 < 0.0) {\n    dVar1 -= 0x00102098;\n    if ((dVar1 & 0x000000f0) < 0x000000e0) {\n      dVar1 = (~0x000000f0 & (ulong)dVar1 | (ulong)((dVar1 + (-(dVar1 < dVar1) & 0x000000f8))));\n    }\n  } else {\n    dVar1 += 0x00102098;\n    if ((dVar1 & 0x000000f0) < 0x000000e0) {\n      dVar1 = (~0x000000f0 & (ulong)dVar1 | (ulong)((dVar1 - (-(dVar1 < (long)dVar1) & 0x000000f8))));\n    }\n  }\n  return dVar1;\n}", "int func0(char *param_1) {\n  double dVar1 = strtod(param_1, (char **)0x0);\n  if (dVar1 < 0.0) {\n    dVar1 += 0x00102098;\n    if ((dVar1 & 0x000000f0) < 0x000000e0) {\n      return (int)(~0x000000f0 & (ulong)dVar1 | (ulong)((dVar1 + (-(dVar1 < dVar1) & 0x000000e8))));\n    }\n  } else {\n    dVar1 += 0x00102098;\n    if ((dVar1 & 0x000000f0) < 0x000000e0) {\n      return (int)(~0x000000f0 & (ulong)dVar1 | (ulong)((dVar1 - ((dVar1 < (double)(long)dVar1) & 0x000000e8))));\n    }\n  }\n  return (int)dVar1;\n}", "int func0(char *param_1) {\n  double dVar1 = strtod(param_1, (char **)0x0);\n  if (dVar1 < 0.0) {\n    dVar1 += 0x00102098;\n    if ((dVar1 & 0x000000f0) < 0x000000e0) {\n      return (int)(~0x000000f0 & (ulong)dVar1 | (ulong)((dVar1 + (-(dVar1 < dVar1) & 0x000000e8))));\n    }\n  } else {\n    dVar1 += 0x00102098;\n    if ((dVar1 & 0x000000f0) < 0x000000e0) {\n      return (int)(~0x000000f0 & (ulong)dVar1 | (ulong)((dVar1 - ((dVar1 < (double)(long)dVar1) & 0x000000e8))));\n    }\n  }\n  return (int)dVar1;\n}", "int* func0(int param_1) {\n  int* piVar1 = (int*)malloc((param_1 << 2));\n  *piVar1 = param_1;\n  for (int local_14 = 1; local_14 < param_1; local_14++) {\n    piVar1[local_14] = piVar1[local_14 - 1] + 2;\n  }\n  return piVar1;\n}", "int func0(int param_1) {\n  int *piVar2 = malloc((param_1 << 2));\n  *piVar2 = param_1;\n  if (param_1 > 1) {\n    int *piVar1 = piVar2 + (param_1 - 2) + 1;\n    while (piVar2!= piVar1) {\n      piVar2[1] = *piVar2 + 2;\n      piVar2++;\n    }\n  }\n  free(piVar2);\n  return 0;\n}", "uint* func0(uint param_1) {\n  ulong size = (ulong)param_1;\n  uint* arr = (uint*)malloc(size << 2);\n  arr[0] = param_1;\n  if (param_1 > 1) {\n    uint* end = arr + (param_1 - 2) + 1;\n    for (uint* i = arr + 1; i!= end; i++) {\n      *i = (int)size + 2;\n      size = (ulong)*i;\n    }\n  }\n  return arr;\n}", "int* func0(int param_1) {\n  int* piVar1 = (int*)malloc((param_1 << 2));\n  *piVar1 = param_1;\n  if (param_1 > 1) {\n    int iVar2 = param_1 + 2;\n    while (iVar2!= param_1 * 3) {\n      *(piVar1 + 1) = iVar2;\n      iVar2 += 2;\n      piVar1++;\n    }\n  }\n  return piVar1;\n}", "void *func0(char *param_1, int *param_2) {\n  int count = 10;\n  void *array = malloc(0x50);\n  int array_size = 0;\n  char *str = malloc(strlen(param_1) + 1);\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int temp = 0;\n  char *token = NULL;\n\n  for (int l = 0; param_1[l]!= '\\0'; l++) {\n    if (param_1[l] =='' || param_1[l] == ',') {\n      if (j > 0) {\n        str[j] = '\\0';\n        token = strdup(str);\n        *(char **)(temp * 8 + (long)array) = token;\n        j = 0;\n        temp++;\n        if (count <= temp) {\n          count <<= 1;\n          array = realloc(array, count * 8);\n        }\n      }\n    } else {\n      str[j] = param_1[l];\n      j++;\n    }\n  }\n  if (j > 0) {\n    str[j] = '\\0';\n    token = strdup(str);\n    *(char **)(temp * 8 + (long)array) = token;\n    temp++;\n  }\n  free(str);\n  *param_2 = temp;\n  return array;\n}", "char **func0(char *str, int *len) {\n  char *ptr = malloc(50);\n  int i = 0;\n  char *token = str;\n  char *token_list[10];\n  int token_count = 0;\n  int max_tokens = 10;\n  int new_max_tokens = 20;\n  char *new_ptr = malloc(80);\n  char *current_token = malloc(10);\n  int current_token_len = 0;\n  int j = 0;\n  int k = 0;\n  int temp_len = 0;\n  int temp_count = 0;\n  int temp_max_tokens = 10;\n  char *temp_ptr = malloc(80);\n  char *temp_current_token = malloc(10);\n  int temp_current_token_len = 0;\n\n  while (*token!= '\\0') {\n    if (*token =='' || *token == ',') {\n      if (i > 0) {\n        token_list[i - 1][current_token_len] = '\\0';\n        token_count = i;\n        if (token_count >= max_tokens) {\n          max_tokens *= 2;\n          new_ptr = realloc(ptr, max_tokens * 8);\n          token_list = realloc(token_list, max_tokens * sizeof(char *));\n        }\n        token_list[i - 1] = strdup(token_list[i - 1]);\n        token_list[i] = strdup(token_list[i - 1]);\n        token_list[i - 1] = NULL;\n        i++;\n      }\n    } else {\n      current_token[current_token_len] = *token;\n      current_token_len++;\n    }\n    token++;\n  }\n\n  if (i > 0) {\n    token_list[i - 1][current_token_len] = '\\0';\n    token_count = i;\n    if (token_count >= max_tokens) {\n      max_tokens *= 2;\n      new_ptr = realloc(ptr, max_tokens * 8);\n      token_list = realloc(token_list, max_tokens * sizeof(char *));\n    }\n    token_list[i - 1] = strdup(token_list[i - 1]);\n  }\n\n  *len = token_count;\n  return ptr;\n}", "void* func0(char* param_1, int* param_2) {\n  char* ptr = malloc(0x50);\n  size_t len = strlen(param_1);\n  char* str = malloc(len + 1);\n  char c = *param_1;\n  if (c == '\\0') {\n    return ptr;\n  }\n  int i = 0;\n  int count = 0;\n  int capacity = 10;\n  char* next = param_1 + 1;\n  while (c!= '\\0') {\n    if (c =='' || c == ',') {\n      if (i!= 0) {\n        str[i] = '\\0';\n        char* new_str = strdup(str);\n        *(char**)((long)ptr + count * 8) = new_str;\n        count++;\n        if (count >= capacity) {\n          capacity *= 2;\n          ptr = realloc(ptr, capacity * 8);\n        }\n      }\n    } else {\n      str[i] = c;\n      i++;\n    }\n    c = *next;\n    next++;\n  }\n  if (i!= 0) {\n    str[i] = '\\0';\n    char* new_str = strdup(str);\n    *(char**)((long)ptr + count * 8) = new_str;\n    count++;\n  }\n  free(str);\n  *param_2 = count;\n  return ptr;\n}", "void* func0(char* param_1, int* param_2) {\n  char* ptr = malloc(0x50);\n  size_t len = strlen(param_1);\n  char* str = malloc(len + 1);\n  char c = *param_1;\n  if (c == '\\0') {\n    return ptr;\n  }\n  int i = 0;\n  int count = 0;\n  int capacity = 10;\n  char* next = param_1 + 1;\n  while (c!= '\\0') {\n    if (c =='' || c == ',') {\n      if (i!= 0) {\n        str[i] = '\\0';\n        char* new_str = strdup(str);\n        *(char**)((long)ptr + count * 8) = new_str;\n        count++;\n        if (count >= capacity) {\n          capacity *= 2;\n          ptr = realloc(ptr, capacity << 3);\n        }\n      }\n    } else {\n      str[i] = c;\n      i++;\n    }\n    c = *next;\n    next++;\n  }\n  if (i!= 0) {\n    str[i] = '\\0';\n    char* new_str = strdup(str);\n    *(char**)((long)ptr + count * 8) = new_str;\n    count++;\n  }\n  free(str);\n  *param_2 = count;\n  return ptr;\n}", "int func0(int param_1, int param_2) {\n  if (param_2 < param_1 || (param_2 == param_1 && param_2 % 2 == 1)) {\n    return -1;\n  }\n  return param_2 - 1;\n}", "int func0(int param_1, int param_2) {\n  if (param_2 < param_1) return -1;\n  if (param_2!= param_1) return param_2 - (param_2 % 2);\n  if (param_2 % 2 == 1) param_2 = -1;\n  return param_2;\n}", "int func0(int param_1, int param_2) {\n  if (param_2 < param_1) return -1;\n  if (param_2!= param_1) return param_2 - (param_2 % 2);\n  if (param_2 % 2 == 1) param_2 = -1;\n  return param_2;\n}", "int func0(int param_1, int param_2) {\n  if (param_2 < param_1) return -1;\n  if (param_2!= param_1) return param_2 - (param_2 % 2);\n  if (param_2 % 2 == 1) param_2 = -1;\n  return param_2;\n}", "undefined * func0(int param_1,int param_2)\n{\n  if (param_2 < param_1) {\n    return (undefined *)&DAT_00102008;\n  }\n  else {\n    int local_18 = (param_1 + param_2) / 2;\n    char *puVar3 = (char *)malloc(0x21);\n    *puVar3 = 0;\n    puVar3[0x20] = 0;\n    int local_14 = 0x1f;\n    while (local_18 > 0) {\n      char cVar2 = (char)(local_18 >> 0x1f);\n      local_14--;\n      puVar3[local_14] = ((char)local_18 - cVar2 & 1U) + cVar2 + '0';\n      local_18 = local_18 / 2;\n    }\n    return (undefined *)(puVar3 + local_14 + 1);\n  }\n}", "int func0(int param_1, int param_2) {\n  if (param_2 < param_1) {\n    return 0x4004;\n  }\n  int iVar5 = (param_1 + param_2) - (param_1 + param_2 >> 31);\n  char *puVar3 = (char *)malloc(0x21);\n  *puVar3 = 0;\n  puVar3[0x20] = 0;\n  int lVar2 = 0x1e;\n  do {\n    int lVar4 = lVar2;\n    int iVar6 = iVar5 >> 1;\n    char cVar1 = (char)(iVar5 >> 31);\n    puVar3[lVar4 + 1] = ((char)iVar6 - cVar1 & 1U) + cVar1 + '0';\n    iVar5 = iVar6 - (iVar5 >> 31);\n    lVar2 = lVar4 - 1;\n  } while (iVar6 > 1);\n  return (char *)(puVar3 + lVar2 + 1);\n}", "undefined * func0(int param_1,int param_2)\n{\n  if (param_2 < param_1) {\n    return (undefined *)&DAT_00102004;\n  }\n  return func0_part_0(param_1, param_2);\n}", "undefined * func0(int param_1,int param_2)\n{\n  if (param_2 < param_1) {\n    return (undefined *)&DAT_00102004;\n  }\n  int iVar4 = (param_1 + param_2) - (param_1 + param_2 >> 31);\n  undefined *puVar1 = (undefined *)malloc(0x21);\n  *puVar1 = 0;\n  puVar1[0x20] = 0;\n  int iVar5 = iVar4;\n  int iVar2 = 0x1e;\n  do {\n    iVar5 >>= 1;\n    puVar1[iVar2 + 1] = ((char)(iVar5 & 0x7f) + (char)(iVar4 & 1) + (char)(iVar4 >> 31) + '0');\n    iVar2--;\n    iVar4 = -(iVar4 >> 31) + iVar5;\n  } while (iVar5 > 0);\n  return puVar1 + iVar2 + 1;\n}", "void func0(long param_1,int param_2,void **param_3,int *param_4)\n{\n  void *pvVar3 = malloc(param_2 * 4);\n  *param_3 = pvVar3;\n  *param_4 = 0;\n  for (int i = 0; i < param_2; i++) {\n    uint local_18 = *(uint *)(param_1 + i * 4);\n    bool bVar2 = local_18 == 0;\n    while (local_18 > 0 &&!bVar2) {\n      bVar2 = (local_18 & 1) == 0;\n      local_18 /= 10;\n    }\n    if (!bVar2) {\n      *(uint *)((long)*param_3 + *param_4 * 4) = local_18;\n      *param_4 += 1;\n    }\n  }\n  for (int i = 0; i < *param_4 - 1; i++) {\n    for (int j = 0; j < *param_4 - i - 1; j++) {\n      if (*(uint *)((long)*param_3 + (j + 1) * 4) < *(uint *)((long)*param_3 + j * 4)) {\n        uint uVar1 = *(uint *)((long)*param_3 + j * 4);\n        *(uint *)((long)*param_3 + j * 4) = *(uint *)((long)*param_3 + (j + 1) * 4);\n        *(uint *)((long)*param_3 + (j + 1) * 4) = uVar1;\n      }\n    }\n  }\n  return *param_4;\n}", "void func0(uint *param_1,int param_2,void **param_3,int *param_4)\n{\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  bool bVar5;\n  void *pvVar6;\n  long lVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  \n  pvVar6 = malloc(param_2 * sizeof(uint));\n  *param_3 = pvVar6;\n  *param_4 = 0;\n  if (param_2 > 0) {\n    puVar2 = param_1 + param_2 - 1;\n    while (param_1 <= puVar2) {\n      uVar10 = *param_1;\n      uVar9 = uVar10;\n      if (uVar10 < 1) {\n        if (uVar10!= 0) break;\n      }\n      else {\n        while ((uVar9 & 1) == 0) {\n          bVar5 = 9 < uVar9;\n          uVar9 = uVar9 / 10;\n        }\n        *(uint *)((long)*param_3 + (*param_4) * 4) = uVar10;\n        (*param_4)++;\n      }\n      param_1++;\n    }\n    if (*param_4 > 1) {\n      uVar10 = 0;\n      while (uVar10 < *param_4) {\n        lVar7 = 0;\n        iVar8 = 0;\n        if (*param_4 - uVar10 > 1) {\n          while (iVar8 < *param_4 - uVar10) {\n            int *piVar1 = (int *)((long)*param_3 + lVar7);\n            iVar3 = *piVar1;\n            lVar7 += 4;\n            int iVar5 = *(int *)((long)*param_3 + lVar7);\n            if (iVar5 < iVar3) {\n              *piVar1 = iVar5;\n              *(int *)((long)*param_3 + lVar7) = iVar3;\n            }\n            iVar8++;\n          }\n        }\n        uVar10++;\n      }\n    }\n  }\n  return *param_4;\n}", "int func0(uint *param_1,int param_2,int **param_3,int *param_4) {\n  int *piVar2 = (int *)malloc(param_2 * sizeof(int));\n  *param_3 = piVar2;\n  *param_4 = 0;\n  if (param_2 > 0) {\n    int iVar9 = 0;\n    uint *puVar1 = param_1 + param_2 - 1;\n    while (param_1 < puVar1) {\n      uint uVar3 = *param_1;\n      if (uVar3 == 0) {\n        param_1++;\n        continue;\n      }\n      if (uVar3 > 0) {\n        int iVar4 = uVar3;\n        int bVar8 = uVar3 & 1;\n        while (iVar4 >= 10) {\n          iVar4 /= 10;\n          bVar8 = iVar4 & 1;\n        }\n        if (bVar8 == 0) {\n          param_1++;\n          continue;\n        }\n      }\n      param_1++;\n      iVar9++;\n      piVar2[iVar9 - 1] = uVar3;\n      *param_4 = iVar9;\n    }\n    if (iVar9 > 1) {\n      for (int uVar3 = iVar9 - 2; uVar3 >= 0; uVar3--) {\n        int *piVar6 = piVar2 + uVar3;\n        while (piVar6 < piVar2 + iVar9) {\n          int iVar9 = *piVar6;\n          if (piVar6[1] < iVar9) {\n            piVar6[1] = iVar9;\n            piVar6[0] = *piVar6;\n          }\n          piVar6 += 2;\n        }\n      }\n    }\n  }\n  return iVar9;\n}", "int func0(uint *param_1,int param_2,int **param_3,int *param_4) {\n  int *piVar2 = (int *)malloc(param_2 * sizeof(int));\n  *param_3 = piVar2;\n  *param_4 = 0;\n  if (param_2 > 0) {\n    int iVar9 = 0;\n    uint *puVar1 = param_1 + (param_2 - 1);\n    while (puVar1 >= param_1) {\n      uint uVar3 = *param_1;\n      if (uVar3 == 0) {\n        param_1++;\n        if (puVar1 == param_1) break;\n      } else if (uVar3 > 0) {\n        int iVar4 = uVar3;\n        while (iVar4 > 0) {\n          int bVar8 = iVar4 % 10;\n          iVar4 /= 10;\n          if (bVar8 == 0) break;\n        }\n        if (iVar4 == 0) {\n          param_1++;\n          iVar9++;\n          piVar2[iVar9 - 1] = uVar3;\n          *param_4 = iVar9;\n        }\n      }\n      param_1++;\n      puVar1--;\n    }\n    if (iVar9 > 0) {\n      for (int uVar3 = iVar9 - 2; uVar3 >= 0; uVar3--) {\n        for (int uVar5 = uVar3 + 1; uVar5 < iVar9; uVar5++) {\n          if (piVar2[uVar5] < piVar2[uVar5 - 1]) {\n            int temp = piVar2[uVar5];\n            piVar2[uVar5] = piVar2[uVar5 - 1];\n            piVar2[uVar5 - 1] = temp;\n          }\n        }\n      }\n    }\n  }\n  free(piVar2);\n  return iVar9;\n}", "int func0(long param_1,int param_2,void **param_3,int *param_4) {\n  int i,j;\n  int count = 0;\n  char *arr[10];\n  for (i = 0; i < param_2 - 1; i++) {\n    for (j = 0; j < param_2 - i - 1; j++) {\n      if (*(int *)(param_1 + (j + 1) * 4) < *(int *)(param_1 + j * 4)) {\n        int temp = *(int *)(param_1 + j * 4);\n        *(int *)(param_1 + j * 4) = *(int *)(param_1 + (j + 1) * 4);\n        *(int *)(param_1 + (j + 1) * 4) = temp;\n      }\n    }\n  }\n  for (i = param_2 - 1; i >= 0; i--) {\n    if (0 < *(int *)(param_1 + i * 4) && *(int *)(param_1 + i * 4) < 10) {\n      count++;\n    }\n  }\n  char **ptr = malloc(count * 8);\n  *param_3 = ptr;\n  for (i = param_2 - 1, j = 0; i >= 0 && j < count; i--, j++) {\n    if (0 < *(int *)(param_1 + i * 4) && *(int *)(param_1 + i * 4) < 10) {\n      *(char **)(ptr + j) = (char *)(&DAT_00102009 + *(int *)(param_1 + i * 4));\n    }\n  }\n  *param_4 = count;\n  return count;\n}", "int func0(int *param_1,int param_2,void **param_3,int *param_4) {\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  void *pvVar4;\n  int iVar5;\n  long lVar6;\n  char *local_88[11];\n  local_88[0] = \"\";\n  local_88[1] = \"Four\";\n  local_88[2] = \"Five\";\n  local_88[3] = \"Three\";\n  local_88[4] = \"Six\";\n  local_88[5] = \"Seven\";\n  local_88[6] = \"Eight\";\n  local_88[7] = \"Nine\";\n  local_88[8] = \"Ten\";\n  local_88[9] = \"Eleven\";\n  local_88[10] = \"Twelve\";\n  param_2 = param_2 - 1;\n  if (param_2 < 1) {\n    *param_4 = 0;\n    if (param_2!= 0) {\n      pvVar4 = malloc(0);\n      *param_3 = pvVar4;\n      return;\n    }\n  }\n  else {\n    for (iVar5 = param_2; iVar5 > 0; iVar5--) {\n      for (piVar2 = param_1; piVar2!= param_1 + iVar5; piVar2++) {\n        if (piVar2[1] < *piVar2) {\n          *piVar2 = piVar2[1];\n          piVar2[1] = *piVar2;\n        }\n      }\n    }\n    *param_4 = 0;\n  }\n  for (lVar6 = param_2; lVar6 >= 0; lVar6--) {\n    if (*param_1 + lVar6 - 1 < 9) {\n      *param_4 = *param_4 + 1;\n    }\n  }\n  pvVar4 = malloc(*param_4 * 8);\n  *param_3 = pvVar4;\n  for (iVar5 = 0; iVar5 < param_2; iVar5++) {\n    if (*param_4 > iVar5) {\n      if (*param_1 + iVar5 < 9) {\n        *(char **)((long)*param_3 + iVar5 * 8)", "int func0(int *param_1,int param_2,void **param_3,int *param_4) {\n  int i;\n  int count = 0;\n  int max = 0;\n  int j;\n  int *piVar1;\n  char *str;\n  char *strs[4] = {\"\", \"One\", \"Two\", \"Three\"};\n  char *local_50 = \"Seven\";\n  char *local_48 = \"Eight\";\n  for (i = param_2 - 1; i >= 0; i--) {\n    for (j = 0; j < i; j++) {\n      if (param_1[j] > param_1[j + 1]) {\n        param_1[j] = param_1[j + 1];\n        param_1[j + 1] = param_1[j];\n      }\n    }\n  }\n  for (i = 0; i < param_2; i++) {\n    if (param_1[i] < 9) {\n      count++;\n    }\n  }\n  *param_4 = count;\n  *param_3 = malloc(count * 8);\n  for (i = param_2 - 1, j = 0; i >= 0; i--, j++) {\n    if (param_1[i] < 9) {\n      *(char **)((long)*param_3 + j * 8) = strs[param_1[i]];\n    }\n  }\n  return 0;\n}", "int func0(int *param_1,int param_2,void **param_3,int *param_4) {\n  int *piVar1;\n  long lVar2;\n  void *pvVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  long lVar7;\n  uint uVar8;\n  char *local_88[4];\n  local_88[0] = \"\";\n  local_88[1] = \"Four\";\n  local_88[2] = \"Six\";\n  local_88[3] = \"Three\";\n  int arr[10];\n  for (int i = 0; i < param_2; i++) {\n    arr[i] = i + 1;\n  }\n  if (param_2 < 1) {\n    *param_4 = 0;\n    if (param_2!= 0) {\n      *param_3 = malloc(0);\n      return;\n    }\n  }\n  else {\n    for (int i = param_2 - 1; i > 0; i--) {\n      for (int j = 0; j < i; j++) {\n        if (arr[j] < arr[j + 1]) {\n          int temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp;\n        }\n      }\n    }\n    *param_4 = 0;\n  }\n  int count = 0;\n  for (int i = 0; i < param_2; i++) {\n    if (arr[i] < 9) {\n      count++;\n    }\n  }\n  *param_4 = count;\n  pvVar3 = malloc(count * 8);\n  *param_3 = pvVar3;\n  for (int i = param_2 - 1; i >= 0; i--) {\n    if (arr[i] < 9) {\n      *(char **)((long)pvVar3 + (i * 8)) = local_88[arr[i]];\n    }\n  }\n  return;\n}", "void *func0(int param_1) {\n  void *pvVar1 = malloc(param_1 * 4);\n  int local_1c = 0;\n  int local_18 = 1;\n  for (int local_14 = 1; local_14 <= param_1; local_14++) {\n    local_1c += local_14;\n    local_18 *= local_14;\n    if (local_14 % 2 == 0) {\n      *(int *)((long)local_14 * 4 - 4 + (long)pvVar1) = local_18;\n    } else {\n      *(int *)((long)local_14 * 4 - 4 + (long)pvVar1) = local_1c;\n    }\n  }\n  return pvVar1;\n}", "int func0(int param_1) {\n  int* pvVar1 = (int*)malloc(param_1 * 4);\n  if (param_1 > 0) {\n    int iVar2 = 0;\n    int iVar4 = 1;\n    for (int uVar3 = 1; uVar3 < param_1 + 1; uVar3++) {\n      iVar2 += uVar3;\n      iVar4 *= uVar3;\n      int iVar5 = (uVar3 & 1)!= 0? iVar2 : iVar4;\n      pvVar1[uVar3 - 1] = iVar5;\n    }\n  }\n  free(pvVar1);\n  return 0;\n}", "int func0(int param_1) {\n  int* pvVar1 = (int*)malloc(param_1 * 8);\n  if (param_1 > 0) {\n    int iVar2 = 0;\n    int iVar3 = 1;\n    int iVar4 = 1;\n    for (int uVar3 = 1; uVar3 < param_1 + 1; uVar3++) {\n      iVar4 = iVar3 * iVar3;\n      iVar2 = iVar2 + iVar3;\n      int iVar5 = (uVar3 & 1)!= 0? iVar2 : iVar4;\n      pvVar1[uVar3 - 1] = iVar5;\n      iVar3++;\n    }\n  }\n  free(pvVar1);\n  return 0;\n}", "int func0(int param_1) {\n  int* pvVar1 = (int*)malloc(param_1 * 8);\n  if (param_1 > 0) {\n    int iVar2 = 0;\n    int iVar3 = 1;\n    int iVar4 = 1;\n    for (int uVar3 = 1; uVar3 < param_1 + 1; uVar3++) {\n      iVar4 = iVar3 * iVar3;\n      iVar2 = iVar2 + iVar3;\n      int iVar5 = (uVar3 & 1)!= 0? iVar2 : iVar4;\n      pvVar1[uVar3 - 1] = iVar5;\n      iVar3++;\n    }\n  }\n  free(pvVar1);\n  return 0;\n}", "int* func0(int param_1) {\n  int* piVar1 = (int*)malloc(8);\n  *piVar1 = 0;\n  piVar1[1] = 0;\n  for (int i = 1; i <= param_1; i++) {\n    int local_1c = 0;\n    int local_18 = i;\n    while (local_18!= 0) {\n      local_1c = local_1c * 10 + local_18 % 10;\n      local_18 /= 10;\n    }\n    if (i == local_1c) {\n      if (i % 2 == 0) {\n        *piVar1 += 1;\n      } else {\n        piVar1[1] += 1;\n      }\n    }\n  }\n  return piVar1;\n}", "int func0(int param_1) {\n  int *piVar3 = (int *)malloc(8);\n  *piVar3 = 0;\n  piVar3[1] = 0;\n  if (param_1 > 0) {\n    int uVar5 = 1;\n    while (uVar5 <= param_1) {\n      int uVar4 = 0;\n      int uVar2 = uVar5;\n      if (uVar5 == 0) {\n        (*piVar3)++;\n      } else {\n        while (uVar2!= 0) {\n          int uVar1 = uVar2 / 10;\n          uVar4 = (uVar2 % 10) + (uVar4 * 10);\n          uVar2 = uVar1;\n        }\n        if (uVar4 == uVar5) {\n          if (uVar5 % 2 == 0) {\n            (*piVar3)++;\n          }\n          piVar3[1]++;\n        }\n      }\n      uVar5++;\n    }\n  }\n  free(piVar3);\n  return 0;\n}", "int func0(int param_1) {\n  int* result = malloc(sizeof(int) * 2);\n  result[0] = 0;\n  result[1] = 0;\n  for (int i = 1; i <= param_1; i++) {\n    int sum = 0;\n    int num = i;\n    while (num!= 0) {\n      sum = num % 10 + sum * 10;\n      num = num / 10;\n    }\n    if (i == sum) {\n      if (i % 2 == 0) {\n        result[0]++;\n      } else {\n        result[1]++;\n      }\n    }\n  }\n  free(result);\n  return result[0] + result[1];\n}", "int func0(int param_1) {\n  int* result = malloc(sizeof(int) * 2);\n  result[0] = 0;\n  result[1] = 0;\n  for (int i = 1; i <= param_1; i++) {\n    int sum = 0;\n    int num = i;\n    while (num!= 0) {\n      sum = num % 10 + sum * 10;\n      num = num / 10;\n    }\n    if (i == sum) {\n      if (i % 2 == 0) {\n        result[0]++;\n      } else {\n        result[1]++;\n      }\n    }\n  }\n  free(result);\n  return result[0] + result[1];\n}", "int func0(long param_1,int param_2)\n{\n  int count = 0;\n  for (int i = 0; i < param_2; i++) {\n    int value = *(int *)(param_1 + i * 4);\n    if (value < 1) {\n      int sum = 0;\n      int mask = value >> 0x1f;\n      for (int digit = (value ^ mask) - mask; digit >= 9; digit /= 10) {\n        sum += digit % 10;\n      }\n      if (sum > digit) {\n        count++;\n      }\n    } else {\n      count++;\n    }\n  }\n  return count;\n}", "int func0(uint *param_1,int param_2) {\n  if (param_2 < 1) {\n    return 0;\n  }\n  int count = 0;\n  for (uint *ptr = param_1; ptr!= param_1 + (param_2 - 1) + 1; ptr++) {\n    uint value = *ptr;\n    if (value < 1) {\n      int temp = (value ^ (value >> 0x1f)) - (value >> 0x1f);\n      if (temp < 9) {\n        int sum = 0;\n        while (temp > 0) {\n          int digit = temp % 10;\n          sum += digit;\n          temp /= 10;\n        }\n        count += (sum - temp) > 0;\n      }\n    } else {\n      count++;\n    }\n  }\n  return count;\n}", "int func0(int *param_1,int param_2)\n{\n  int count = 0;\n  int *end = param_1 + param_2;\n  while (param_1!= end)\n  {\n    int value = *param_1;\n    if (value < 1)\n    {\n      if (value < -9)\n      {\n        int sum = 0;\n        int digit;\n        int temp;\n        while (value < 0)\n        {\n          digit = value % 10;\n          sum += digit;\n          value /= 10;\n        }\n        count += (value < sum);\n      }\n    }\n    else\n    {\n      count++;\n    }\n    param_1++;\n  }\n  return count;\n}", "int func0(int *param_1,int param_2)\n{\n  int count = 0;\n  int i;\n  for (i = 0; i < param_2; i++) {\n    int num = param_1[i];\n    if (num < 1) {\n      if (num < -9) {\n        int sum = 0;\n        int digit;\n        while (num < 0) {\n          digit = num % 10;\n          sum += digit;\n          num /= 10;\n        }\n        count += (num < 0);\n      }\n    } else {\n      count++;\n    }\n  }\n  return count;\n}", "int func0(int *arr, int n) {\n  int count = 0;\n  if (n == 0) {\n    return 1;\n  }\n  for (int i = 1; i < n; i++) {\n    if (arr[i] < arr[i - 1]) {\n      count++;\n    }\n  }\n  if (arr[0] < arr[n - 1]) {\n    count++;\n  }\n  return count < 2? 1 : 0;\n}", "bool func0(int *param_1,int param_2)\n{\n  bool bVar1 = true;\n  int iVar3 = 0;\n  int *piVar2 = param_1;\n  \n  if (param_2!= 0) {\n    if (param_2 < 2) {\n      iVar3 = 0;\n    }\n    else {\n      do {\n        iVar3 += (uint)(piVar2[1] < *piVar2);\n        piVar2++;\n      } while (piVar2!= param_1 + param_2 - 2);\n    }\n    bVar1 = (iVar3 + (uint)(*param_1 < param_1[param_2 - 1])) < 2;\n  }\n  return bVar1;\n}", "int func0_part_0(int *param_1,int param_2)\n{\n  int count = 0;\n  int *ptr = param_1;\n  int prev = 0;\n  \n  if (param_2 < 2) {\n    return 0;\n  }\n  else {\n    while (ptr!= param_1 + param_2 - 1) {\n      int curr = *ptr;\n      ptr++;\n      if (*ptr < curr) {\n        count++;\n      }\n      prev = curr;\n    }\n  }\n  return (count + (*param_1 < prev)) < 2;\n}\n\nint func0(int param_1,int param_2)\n{\n  if (param_2!= 0) {\n    return func0_part_0(param_1, param_2);\n  }\n  return 1;\n}", "int func0(int *param_1,int param_2) {\n  int iVar11 = 0;\n  int iVar12 = 0;\n  int iVar13 = 0;\n  int iVar14 = 0;\n  int iVar10;\n  int uVar1;\n  int *piVar2;\n  int *piVar3;\n  int *piVar4;\n  int *piVar5;\n  int *piVar6;\n  int *piVar7;\n  int *piVar8;\n  int *piVar9;\n\n  if (param_2 == 0) {\n    return 1;\n  }\n  if (param_2 < 2) {\n    return 0;\n  }\n  uVar1 = param_2 - 1;\n  if (param_2 - 2U < 3) {\n    iVar11 = 0;\n    iVar10 = 1;\n  }\n  else {\n    piVar9 = param_1;\n    do {\n      iVar10 = *piVar9;\n      piVar3 = piVar9 + 1;\n      piVar4 = piVar9 + 2;\n      piVar5 = piVar9 + 3;\n      piVar2 = piVar9 + 1;\n      piVar6 = piVar9 + 2;\n      piVar7 = piVar9 + 3;\n      piVar8 = piVar9 + 4;\n      piVar9 = piVar9 + 4;\n      iVar11 = iVar11 + (iVar10 < *piVar2);\n      iVar12 = iVar12 + (iVar10 < *piVar6);\n      iVar13 = iVar13 + (iVar10 < *piVar7);\n      iVar14 = iVar14 + (iVar10 < *piVar8);\n    } while (piVar9!= param_1 + (uVar1 >> 2) * 4);\n    iVar10 = (uVar1 & 0xfffffffc) + 1;\n    iVar11 = iVar11 + iVar13 + iVar12 + iVar14;\n    if (uVar1 == (uVar1 & 0xfffffffc)) {\n      iVar12 = iVar10;\n      if ((iVar10 + 1 < uVar1) && (iVar10 < param_2)) {\n        iVar12 = param_1[iVar10];\n        iVar11 = iVar11 + (iVar12 < (param_1 + iVar10)[-1", "int func0(long param_1,int param_2,long param_3,int param_4)\n{\n  int count1 = 0;\n  int count2 = 0;\n  for (int i = 0; i < param_2; i++) {\n    if ((*(uint *)(param_1 + (long)i * 4) & 1) == 0) {\n      count1++;\n    }\n  }\n  for (int j = 0; j < param_4; j++) {\n    if ((*(uint *)(param_3 + (long)j * 4) & 1) == 0) {\n      count2++;\n    }\n  }\n  return count1 < count2? &DAT_00102008 : &DAT_0010200c;\n}", "undefined1 * func0(uint *param_1,int param_2,long param_3,int param_4)\n{\n  uint *puVar1;\n  int iVar2;\n  undefined1 *puVar3;\n  long lVar4;\n  \n  if (param_2 < 1) {\n    if (param_4 < 1) {\n      return &DAT_00102004;\n    }\n  }\n  else {\n    puVar1 = param_1 + (param_2 - 1);\n    iVar2 = 0;\n    while (param_1!= puVar1) {\n      iVar2 += (*param_1 & 1) == 0;\n      param_1++;\n    }\n    if (param_4 < 1) return &DAT_00102004;\n  }\n  lVar4 = 0;\n  while (lVar4 < param_4) {\n    iVar2 += (*(uint *)(param_3 + lVar4 * 4) & 1) == 0;\n    lVar4++;\n  }\n  if (param_2 <= iVar2) return &DAT_00102004;\n  return &DAT_00102008;\n}", "int func0(uint *param_1,int param_2,long param_3,int param_4)\n{\n  uint *puVar1;\n  int iVar2;\n  int count = 0;\n  long lVar4;\n  \n  if (param_2 < 1) {\n    if (param_4 < 1) {\n      return 0x2007;\n    }\n  }\n  else {\n    puVar1 = param_1 + (param_2 - 1);\n    iVar2 = 0;\n    while (param_1!= puVar1) {\n      iVar2 += (*param_1 & 1) == 0;\n      param_1++;\n    }\n    if (param_4 < 1) {\n      goto LAB_001014ff;\n    }\n  }\n  lVar4 = 0;\n  while (lVar4 < param_4) {\n    iVar2 += (*(uint *)(param_3 + lVar4 * 4) & 1) == 0;\n    lVar4++;\n  }\nLAB_001014ff:\n  int result = iVar2 < param_2? 0x2004 : 0x2007;\n  return result;\n}", "int func0(uint *param_1,uint param_2,uint *param_3,uint param_4) {\n  int count = 0;\n  int i;\n  int j;\n  int k;\n  int l;\n  uint *ptr;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint var6;\n  uint var7;\n  int var8;\n  int var9;\n  int var10;\n  int var11;\n  int var12;\n  \n  if (param_2 < 1) {\n    if (param_4 < 1) {\n      return 0x1002007;\n    }\n  }\n  else {\n    if (param_2 - 1 < 4) {\n      var7 = 0;\n      var8 = 0;\n      for (i = 0; i < param_2; i++) {\n        var8 += (param_1[i] & 1) == 0;\n      }\n    }\n    else {\n      var8 = 0;\n      var9 = 0;\n      var10 = 0;\n      var11 = 0;\n      ptr = param_1;\n      for (i = 0; i < param_2 / 4; i++) {\n        var7 = *ptr;\n        ptr2 = ptr + 1;\n        ptr3 = ptr + 2;\n        ptr4 = ptr + 3;\n        ptr = ptr + 4;\n        var8 += (var7 & 0x3f) == 0;\n        var9 += (*ptr2 & 0x3f) == 0;\n        var10 += (*ptr3 & 0x3f) == 0;\n        var11 += (*ptr4 & 0x3f) == 0;\n      }\n      var7 = param_2 & 0xfffffffc;\n      var8 += var10 + var9 + var11;\n      if (param_2 & 3) {\n        for (i = 0; i < 4; i++) {\n          var8 += (param_1[var7 + i] & 1) == 0;\n        }\n      }\n    }\n    if (param_4 < 1) {\n      goto label_1;\n    }\n  }\n  var7 = 1;\n  if (param_4 > 0) {\n    var7", "int func0(char *str, long param2, int *result, long param4) {\n  int max = 0;\n  int count = 0;\n  int index = 0;\n  char *ptr = str;\n  int arr[13];\n  int max_index = 0;\n  int char_code;\n\n  for (int i = 0; i < 13; i++) {\n    arr[i] = 0;\n  }\n\n  while (*ptr!= '\\0') {\n    if (*ptr!='') {\n      char_code = *ptr - 0x61;\n      arr[char_code]++;\n      if (max < arr[char_code]) {\n        max = arr[char_code];\n        max_index = char_code;\n      }\n    }\n    ptr++;\n  }\n\n  for (int i = 0; i < 13; i++) {\n    *(param2 + i * 4) = arr[i];\n    if (max == arr[i]) {\n      *(param4 + count) = i + 'a';\n      count++;\n    }\n  }\n\n  *result = max;\n  *(param4 + count) = '\\0';\n  return 0;\n}", "int func0(char *str, long size, int *max, long arr) {\n  int max_val = 0;\n  int i;\n  for (int j = 0; j < 13; j++) {\n    arr[j] = 0;\n  }\n  char c = *str;\n  if (c == '\\0') {\n    return 0;\n  }\n  for (; c!= '\\0'; str++, c = *str) {\n    if (c!='') {\n      int index = (c - 0x61) * 4;\n      int val = *(int *)(arr + index) + 1;\n      *(int *)(arr + index) = val;\n      if (max_val < val) {\n        max_val = val;\n      }\n    }\n  }\n  for (i = 0; i < 0x1a; i++) {\n    int val = *(int *)(arr + i * 4);\n    if (val == max_val) {\n      *(char *)(arr + i) = (char)(i + 'a');\n    }\n    *(int *)(size + i * 4) = val;\n  }\n  *max = max_val;\n  *(char *)(arr + i) = '\\0';\n  return max_val;\n}", "int func0(char *str, long size, int *max_len, long buffer) {\n  int max = 0;\n  int len = 0;\n  int i = 0;\n  int j = 0;\n  char *p = str;\n  char *q = buffer;\n  char c;\n\n  for (i = 0; i < 13; i++) {\n    *q = 0;\n    q++;\n  }\n\n  c = *str;\n  if (c == '\\0') {\n    max = 0;\n  } else {\n    for (i = 0; i < strlen(str); i++) {\n      if (c!='') {\n        j = *(int*)((long)&max + (long)(c - 97) * 4) + 1;\n        *(int*)((long)&max + (long)(c - 97) * 4) = j;\n        if (len < j) {\n          len = j;\n        }\n      }\n      c = *(str + i + 1);\n      str++;\n    }\n  }\n\n  for (i = 0; i < size; i += 4) {\n    *(int*)(size + i) = max;\n  }\n\n  for (i = 0; i < len; i++) {\n    *q = i + 'a';\n    q++;\n  }\n\n  *max_len = len;\n  *q = '\\0';\n\n  return 0;\n}", "int process_string(char *str, long size, int *max_count, long output) {\n    int max = 0;\n    int count = 0;\n    int i;\n    char *ptr = str;\n    char *output_ptr = output;\n\n    for (i = 0; i < 13; i++) {\n        *(output + i) = 0;\n    }\n\n    while (*ptr!= '\\0') {\n        while (*ptr =='') {\n            ptr++;\n            if (*ptr == '\\0') break;\n        }\n\n        if (*ptr == '\\0') break;\n\n        int index = *ptr - 0x61;\n        int value = *(int *)((long)output + index * 4) + 1;\n        *(int *)((long)output + index * 4) = value;\n\n        if (max < value) {\n            max = value;\n        }\n\n        ptr++;\n    }\n\n    for (i = 0; i < 26; i++) {\n        int value = *(int *)((long)output + i * 4);\n        if (value == max) {\n            *(output_ptr + i) = i + 'a';\n            output_ptr++;\n            count++;\n        }\n    }\n\n    *max_count = max;\n    *output_ptr = '\\0';\n\n    return count;\n}", "char *func0(char *param_1,char *param_2,char *param_3,char *param_4)\n{\n  int len = strlen(param_1);\n  char *s = malloc(len + 1);\n  int i;\n  for (i = 0; param_1[i]!= '\\0'; i++) {\n    bool found = false;\n    for (char *p = param_2; *p!= '\\0'; p++) {\n      if (param_1[i] == *p) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      s[i] = param_1[i];\n    }\n  }\n  s[len] = '\\0';\n  int mid = len / 2;\n  bool isPalindrome = true;\n  for (i = 0; i < mid; i++) {\n    if (s[i]!= s[len - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  strcpy(param_3, s);\n  char *result = isPalindrome? \"True\" : \"False\";\n  strcpy(param_4, result);\n  free(s);\n  return NULL;\n}", "char* func0(char *param_1, char *param_2, char *param_3, char *param_4) {\n  int len = 0;\n  char *str = malloc(strlen(param_1) + 1);\n  if (*param_1 == '\\0') {\n    strcpy(param_3, \"\");\n    strcpy(param_4, \"True\");\n    free(str);\n    return param_4;\n  }\n  char *ptr = param_2;\n  char *src = param_1 + 1;\n  for (char *dst = str; *ptr!= '\\0'; ptr++, src++, dst++) {\n    if (*ptr!= *src) {\n      break;\n    }\n  }\n  if (*ptr == '\\0') {\n    strcpy(param_3, str);\n  } else {\n    for (char *dst = str; *src!= '\\0'; src++, dst++) {\n      *dst = *src;\n    }\n    *dst = '\\0';\n    if (strlen(str) < strlen(param_1)) {\n      for (int i = strlen(str); i < strlen(param_1); i++) {\n        if (param_1[i]!= param_1[i - strlen(str)]) {\n          strcpy(param_3, str);\n          strcpy(param_4, \"False\");\n          free(str);\n          return param_4;\n        }\n      }\n    }\n    strcpy(param_3, str);\n  }\n  strcpy(param_4, \"True\");\n  free(str);\n  return param_4;\n}", "char* func0(char *param_1, char *param_2, void *param_3, char *param_4) {\n    size_t len = strlen(param_1);\n    uint* hash = (uint*)malloc((len + 1) * sizeof(uint));\n    uint* ptr = hash;\n    char c = *param_1;\n    if (c!= '\\0') {\n        char c2 = *param_2;\n        int i = 0;\n        char c3 = c2;\n        char* str1 = param_2;\n        char* str2 = param_1 + 1;\n        while (c3!= '\\0') {\n            while (c3 == '\\0') {\n                *ptr = c;\n                c = *str2;\n                c3 = c2;\n                str1 = param_2;\n                str2 = str2 + 1;\n                if (c == '\\0') break;\n            }\n            if (c == c3) break;\n            c3 = str1[1];\n            str1 = str1 + 1;\n        }\n        c = *str2;\n        str2 = str2 + 1;\n        c3 = c2;\n        str1 = param_2;\n    }\n    *ptr = 0;\n    ptr = hash;\n    while (*ptr!= 0) {\n        uint val = *ptr + 0xfefefeff & ~*ptr;\n        if (val & 0x80808080) break;\n        ptr = ptr + 1;\n    }\n    bool isZero = (val & 0x8080) == 0;\n    if (isZero) {\n        val = val >> 0x10;\n    }\n    if (isZero) {\n        ptr = ptr + 6;\n    }\n    uint* end = (uint*)((-3 - (ulong)val % 256) - (uint*)hash);\n    int len2 = (int)end;\n    if (len2 > 1) {\n        int i = 0;\n        char* str = (char*)((len2 - 1) + (uint*)hash);\n        while (i < len2 >> 1) {\n            if (*((uint*)hash + i)!= *str) {\n                memcpy(param_3, hash, len2);\n                return strcpy(param_4, \"False\");\n            }\n            i = i + 1", "char* func0(char *param_1, char *param_2, void *param_3, char *param_4) {\n    size_t len = strlen(param_1);\n    uint* hash = (uint*)malloc((len + 1) * sizeof(uint));\n    uint* ptr = hash;\n    char c = *param_1;\n    if (c!= '\\0') {\n        char c2 = *param_2;\n        int i = 0;\n        char c3 = c2;\n        char* str1 = param_2;\n        char* str2 = param_1 + 1;\n        while (c3!= '\\0') {\n            while (c3 == '\\0') {\n                *ptr = c;\n                c = *str2;\n                c3 = c2;\n                str1 = param_2;\n                str2 = str2 + 1;\n                if (c == '\\0') break;\n            }\n            if (c == c3) break;\n            c3 = str1[1];\n            str1 = str1 + 1;\n        }\n        c = *str2;\n        str2 = str2 + 1;\n        c3 = c2;\n        str1 = param_2;\n    }\n    *ptr = 0;\n    ptr = hash;\n    while (*ptr!= 0) {\n        uint val = *ptr + 0xfefefeff & ~*ptr;\n        if (val & 0x80808080) break;\n        ptr = ptr + 1;\n    }\n    bool isZero = (val & 0x8080) == 0;\n    if (isZero) {\n        val = val >> 0x10;\n    }\n    if (isZero) {\n        ptr = ptr + 6;\n    }\n    uint* end = (uint*)((-3 - (ulong)val % 256) - (uint*)hash);\n    int len2 = (int)end;\n    if (len2 > 1) {\n        int i = 0;\n        char* str = (char*)((len2 - 1) + (uint*)hash);\n        while (i < len2 >> 1) {\n            if (*((uint*)hash + i)!= *str) {\n                memcpy(param_3, hash, len2);\n                return strcpy(param_4, \"False\");\n            }\n            i = i + 1", "void* func0(long param_1, int param_2) {\n  void* pvVar1 = malloc(param_2 * 8);\n  for (int i = 0; i < param_2; i++) {\n    int count = 0;\n    for (int j = 0; j < strlen((char*)param_1 + i * 8); j++) {\n      if (( '/' < (char)((char*)param_1 + i * 8 + j) && (char)((char*)param_1 + i * 8 + j) < ':' ) &&\n          ((char)((char*)param_1 + i * 8 + j) - '0') % 2 == 1) {\n        count++;\n      }\n    }\n    void* pvVar2 = malloc(100);\n    *(void**)((long)pvVar1 + i * 8) = pvVar2;\n    sprintf((char*)((long)pvVar1 + i * 8), \"the number of odd elements %d in the string %d of the %d input.\", count, count, count);\n  }\n  return pvVar1;\n}", "void* func0(long param_1, int param_2) {\n  char* result = malloc(param_2 * 8);\n  if (param_2 > 0) {\n    int count = 0;\n    for (int i = 0; i < param_2; i++) {\n      char* str = (char*)((char*)param_1 + i * 8);\n      int odd_count = 0;\n      for (char* c = str; *c!= '\\0'; c++) {\n        if ((*c - '0') < 10 && (*c - '0') % 2 == 1) {\n          odd_count++;\n        }\n      }\n      char* temp = malloc(100);\n      sprintf(temp, \"the number of odd elements %d in the string %d of the %d input.\", odd_count, odd_count, odd_count);\n      *(void**)((char*)result + i * 8) = temp;\n    }\n  }\n  return result;\n}", "void* func0(long param_1, int param_2) {\n  void* result = malloc(param_2 * 8);\n  if (param_2 > 0) {\n    int count = 0;\n    for (long i = 0; i < param_2; i++) {\n      char* str = (char*)malloc(100);\n      char* ptr = (char*)param_1 + i * 8;\n      int num = 0;\n      while (*ptr!= 0) {\n        if ((*ptr - 0x30) < 10) {\n          num += (*ptr & 1) == 0? 1 : -1;\n        }\n        ptr++;\n      }\n      sprintf(str, \"the number of odd elements %d in the string %d of the %d input.\", num, num, num);\n      *(void**)(((char*)result) + i * 8) = str;\n    }\n  }\n  return result;\n}", "void* func0(long param_1, int param_2) {\n  void* result = malloc(param_2 * 8);\n  if (param_2 > 0) {\n    int count = 0;\n    for (int i = 0; i < param_2; i++) {\n      char* str = (char*)malloc(100);\n      char* ptr = (char*)param_1 + i * 8;\n      int num = 0;\n      while (*ptr!= 0) {\n        if ((*ptr - 0x30) < 10) {\n          num += (*ptr & 1) == 0? 1 : -1;\n        }\n        ptr++;\n      }\n      sprintf(str, \"the number of odd elements %d in the string %d of the %d input.\", num, num, num);\n      *(void**)(((char*)result) + i * 8) = str;\n    }\n  }\n  return result;\n}", "long func0(long *param_1,int param_2) {\n  long local_10 = param_1[0];\n  long local_18 = param_1[0];\n  for (int local_1c = 1; local_1c < param_2; local_1c++) {\n    local_18 = (local_18 < 0)? local_18 + param_1[local_1c] : param_1[local_1c];\n    local_10 = (local_18 < local_10)? local_18 : local_10;\n  }\n  return local_10;\n}", "long func0(long *param_1,int param_2)\n{\n  long lVar1 = *param_1;\n  long lVar2 = lVar1;\n  if (param_2 > 1) {\n    for (long *plVar3 = param_1 + 1; plVar3!= param_1 + param_2; plVar3++) {\n      if (lVar1 < 0) {\n        lVar1 += *plVar3;\n      } else {\n        lVar1 = *plVar3;\n      }\n      lVar2 = (lVar1 < lVar2)? lVar1 : lVar2;\n    }\n  }\n  return lVar2;\n}", "long func0(long *param_1,int param_2)\n{\n  long lVar2 = *param_1;\n  if (param_2 > 1) {\n    long lMin = lVar2;\n    for (long *p = param_1 + 1; p!= param_1 + param_2; p++) {\n      long l = *p;\n      if (l < 0) l = l + *p;\n      if (l < lMin) lMin = l;\n    }\n    return lMin;\n  }\n  return lVar2;\n}", "long func0(long *param_1,int param_2)\n{\n  long lVar4 = *param_1;\n  if (param_2 < 2) return lVar4;\n  long lVar2 = lVar4;\n  long lVar1 = *(param_1 + 1);\n  for (param_1 += 2; param_1 + (param_2 - 2) + 2!= param_1 + param_2; param_1++)\n  {\n    if (lVar2 < 0) lVar1 += lVar2;\n    if (lVar1 < lVar4) lVar4 = lVar1;\n    lVar2 = lVar1;\n    lVar1 = *param_1;\n  }\n  return lVar4;\n}", "int func0(long param_1, int param_2, ulong param_3, int param_4) {\n  int iVar1;\n  int iVar2 = (int)param_3;\n  int local_14, local_c, local_10;\n  uint local_18 = 0;\n  \n  for (local_14 = 0; local_14 < param_2; local_14++) {\n    local_10 = 0;\n    for (local_c = 0; local_c < iVar2; local_c++) {\n      local_10 += *(int *)((param_1 + local_14 * 8) + local_c * 4);\n    }\n    if (local_10 > 0) {\n      iVar1 = param_4 + local_10 - 1;\n      local_18 += iVar1 / param_4;\n      param_3 = (int)(iVar1 % param_4);\n    }\n  }\n  return (uint)local_18 << 32 | param_3;\n}", "int func0(int **param_1,int param_2,ulong param_3,int param_4) {\n  int *piVar1;\n  int **ppiVar2;\n  int iVar3;\n  int iVar5;\n  uint uVar7;\n  uint uVar8;\n  ulong result = 0;\n  \n  if (param_2 > 0) {\n    ppiVar2 = param_1 + (param_2 - 1) + 1;\n    iVar3 = (int)param_3;\n    uVar8 = 0;\n    for (param_1; param_1!= ppiVar2; param_1++) {\n      if (iVar3 > 0) {\n        piVar1 = *param_1;\n        for (iVar3; iVar3 > 0; iVar3--) {\n          uVar7 = (int)param_3 + *piVar1;\n          param_3 = (ulong)uVar7;\n          piVar1++;\n        }\n        if (uVar7 > 0) {\n          iVar5 = (uVar7 - 1) + param_4;\n          param_3 = (long)iVar5 % (long)param_4 & 0xffffffff;\n          uVar8 += iVar5 / param_4;\n        }\n      }\n    }\n    result = (uVar8 << 0x40) | (param_3 << 0x20) | (param_3 & 0xffff);\n  } else {\n    result = (param_3 << 0x40) | (param_3 << 0x20) | (param_3 & 0xffff);\n  }\n  return result;\n}", "int func0(int **param_1,int param_2,int param_3,int param_4) {\n  int iVar5 = 0;\n  int *piVar3 = *param_1;\n  int *piVar1 = piVar3 + (param_3 - 1) + 1;\n  for (; piVar3!= piVar1; piVar3++) {\n    int iVar4 = 0;\n    for (int *p = piVar3; p!= piVar1; p++) {\n      iVar4 += *p;\n    }\n    if (iVar4 > 0) {\n      iVar5 += (iVar4 + param_4 - 1) / param_4;\n    }\n  }\n  for (int *p = param_1; p!= param_1 + param_2; p++) {\n    if (param_3 > 0) {\n      piVar3 = *p;\n      piVar1 = piVar3 + (param_3 - 1) + 1;\n      for (; piVar3!= piVar1; piVar3++) {\n        int iVar4 = 0;\n        for (int *q = piVar3; q!= piVar1; q++) {\n          iVar4 += *q;\n        }\n        if (iVar4 > 0) {\n          iVar5 += (iVar4 + param_4 - 1) / param_4;\n        }\n      }\n    }\n  }\n  return iVar5;\n}", "int func0(int **param_1,int param_2,uint param_3,int param_4) {\n  int sum = 0;\n  for (int i = 0; i < param_2; i++) {\n    int *ptr = param_1[i];\n    int total = 0;\n    if (param_3 < 4) {\n      for (int j = 0; j < param_3; j++) {\n        total += ptr[j];\n      }\n    } else {\n      for (int j = 0; j < param_3; j += 4) {\n        total += ptr[j] + ptr[j + 1] + ptr[j + 2] + ptr[j + 3];\n      }\n      for (int j = param_3 & 0xfffffffc; j < param_3; j++) {\n        total += ptr[j];\n      }\n    }\n    if (total > 0) {\n      sum += (total - 1 + param_4) / param_4;\n    }\n  }\n  return sum;\n}", "int compare_and_swap(long arr[], int n) {\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      int count1 = 0, count2 = 0;\n      int temp = arr[i];\n      int num1 = arr[i] & 0xFFFFFFFF;\n      int num2 = arr[j] & 0xFFFFFFFF;\n      for (int k = num1; k > 0; k >>= 1) {\n        count1 += k & 1;\n      }\n      for (int k = num2; k > 0; k >>= 1) {\n        count2 += k & 1;\n      }\n      if (count1 < count2 || (count1 == count2 && temp < arr[j])) {\n        int temp2 = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp2;\n      }\n    }\n  }\n  return 0;\n}", "int func0(uint *param_1,int param_2) {\n  if (param_2 < 1) {\n    return 0;\n  }\n  int i;\n  for (i = 0; i < param_2; i++) {\n    uint uVar1 = param_1[i];\n    uint uVar2 = param_1[i];\n    if (uVar1 < 1) {\n      if (uVar2 < 1) {\n        continue;\n      }\n      int count1 = 0;\n      while (uVar1 > 0) {\n        count1 += uVar1 & 1;\n        uVar1 >>= 1;\n      }\n      int count2 = 0;\n      while (uVar2 > 0) {\n        count2 += uVar2 & 1;\n        uVar2 >>= 1;\n      }\n      if (count1 <= count2) {\n        continue;\n      }\n    }\n    else {\n      int count1 = 0;\n      while (uVar1 > 0) {\n        count1 += uVar1 & 1;\n        uVar1 >>= 1;\n      }\n      if (uVar2 < 1) {\n        continue;\n      }\n      int count2 = 0;\n      while (uVar2 > 0) {\n        count2 += uVar2 & 1;\n        uVar2 >>= 1;\n      }\n      if (count1 > count2) {\n        continue;\n      }\n    }\n    param_1[i] = uVar2;\n    param_1[i] = uVar1;\n  }\n  return 1;\n}", "int func0(uint *param_1,int param_2) {\n  if (param_2 < 1) {\n    return 0;\n  }\n  for (int i = 0; i < param_2; i++) {\n    uint uVar1 = param_1[i];\n    uint uVar2 = param_1[i + 1];\n    if (uVar1 < 1) {\n      if (uVar2 > 0) {\n        return 0;\n      }\n    } else {\n      int count1 = 0;\n      int count2 = 0;\n      while (uVar1 > 0) {\n        count1 += uVar1 & 1;\n        uVar1 >>= 1;\n      }\n      while (uVar2 > 0) {\n        count2 += uVar2 & 1;\n        uVar2 >>= 1;\n      }\n      if (count1 == count2) {\n        param_1[i] = uVar2;\n        param_1[i + 1] = uVar1;\n      }\n    }\n  }\n  return 1;\n}", "int func0(uint *param_1,int param_2) {\n  int i;\n  int j;\n  int k;\n  int sum1 = 0;\n  int sum2 = 0;\n  for (i = 0; i < param_2; i++) {\n    uint uVar1 = param_1[i];\n    uint uVar2 = param_1[i + 1];\n    if (uVar1 < 1) {\n      if (uVar2 > 0) {\n        continue;\n      }\n      if (uVar2 < uVar1) {\n        continue;\n      }\n    } else {\n      while (uVar1 > 0) {\n        sum1 += uVar1 & 1;\n        uVar1 >>= 1;\n      }\n      if (uVar2 > 0) {\n        while (uVar2 > 0) {\n          sum2 += uVar2 & 1;\n          uVar2 >>= 1;\n        }\n      }\n      if (sum1 == sum2) {\n        continue;\n      }\n      if (sum1 <= sum2) {\n        continue;\n      }\n      param_1[i] = uVar2;\n      param_1[i + 1] = uVar1;\n    }\n  }\n  return 0;\n}", "void* func0(char* param_1, int param_2, int* param_3) {\n    size_t sVar1 = strlen(param_1);\n    char* s = (char*)malloc(sVar1 + 1);\n    int local_48 = 0;\n    int local_44 = 0;\n    int local_40 = 0;\n    int local_3c = 0;\n    void* local_38 = NULL;\n\n    for (local_3c = 0; local_3c <= sVar1; local_3c++) {\n        if ((((*__ctype_b_loc())[param_1[local_3c]] & 0x2000) == 0) && (param_1[local_3c]!= '\\0')) {\n            s[local_3c - local_40] = param_1[local_3c];\n            char* pcVar5 = strchr(\"aeiouAEIOU\", (int)param_1[local_3c]);\n            if (pcVar5 == NULL) {\n                if (((*__ctype_b_loc())[param_1[local_3c]] & 0x400)!= 0) {\n                    local_48++;\n                }\n            }\n        } else {\n            if (local_48 == param_2) {\n                s[local_3c - local_40] = '\\0';\n                local_38 = realloc(local_38, (local_44 + 1) * 8);\n                size_t sVar3 = strlen(s);\n                void* pvVar4 = malloc(sVar3 + 1);\n                *(void**) ((long)local_44 * 8 + (long)local_38) = pvVar4;\n                strcpy(*(char**) (local_38 + (long)local_44 * 8), s);\n                local_44++;\n            }\n            local_40 = local_3c + 1;\n            local_48 = 0;\n        }\n    }\n    free(s);\n    *param_3 = local_44;\n    return local_38;\n}", "void* func0(char* param_1, int param_2, int* param_3) {\n  int i;\n  int count = 0;\n  int vowel_count = 0;\n  int* vowels = NULL;\n  char* word = NULL;\n  char* current_char = NULL;\n  char* vowel = NULL;\n  int j;\n  int len = strlen(param_1);\n  char* temp = (char*)malloc(len + 1);\n  char* pCtype = __ctype_b_loc();\n  for (i = 0; i < len; i++) {\n    if (*pCtype[i] & 0x20) {\n      if (param_1[i]!= 0) {\n        temp[i - count] = param_1[i];\n        vowel = strchr(\"aeiouAEIOU\", param_1[i]);\n        if (vowel == NULL) {\n          vowel_count++;\n        }\n      } else {\n        break;\n      }\n    } else {\n      if (param_2 == vowel_count) {\n        temp[i - count] = '\\0';\n        count++;\n        vowels = (int*)realloc(vowels, count * 8);\n        current_char = temp;\n        for (j = 0; j < len - i; j++) {\n          temp[j] = current_char[j];\n        }\n        temp = (char*)malloc(len - i + 1);\n        strcpy(temp, current_char);\n      }\n      count = i + 1;\n      vowel_count = 0;\n    }\n  }\n  free(temp);\n  *param_3 = count;\n  return vowels;\n}", "void* func0(char* str, int len, int* count) {\n    char* ptr = NULL;\n    size_t size = strlen(str);\n    uint* src = (uint*)malloc(size + 1);\n    ushort** ppu = __ctype_b_loc();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    ushort* pu = *ppu;\n    int vowels = 0;\n    int local_count = 0;\n    bool is_valid = false;\n\n    for (i = 0; i < size; i++) {\n        char c = str[i];\n        if (((*(byte*)((long)pu + (long)(char)c * 2 + 1) & 0x20) == 0) && (c!= 0)) {\n            src[i - j] = c;\n            char* vowel = strchr(\"aeiouAEIOU\", c);\n            if (vowel == NULL) {\n                vowels = (vowels + 1) - ((pu[c] & 0x400) == 0);\n            }\n        } else {\n            if (len == vowels) {\n                local_count++;\n                src[i - j] = 0;\n                ptr = realloc(ptr, local_count * 8);\n                uint* p = src;\n                do {\n                    uint* q = p;\n                    uint u = *q + 0xfefefeff & ~*q;\n                    uint v = u & 0x80808080;\n                    p++;\n                } while (v == 0);\n                bool b = (u & 0x8080) == 0;\n                if (b) {\n                    v = v >> 0x10;\n                }\n                if (b) {\n                    p = (uint*)((long)q + 6);\n                }\n                size_t dest_size = (long)p + ((long)src - (ulong)CARRY1((byte)v, (byte)v)) + -2;\n                char* dest = malloc(dest_size);\n                *(void**)((long)ptr + ((long)local_count * 8 - 8)) = dest;\n                memcpy(dest, src, dest_size);\n            }\n            vowels = 0;\n            j = i + 1;\n        }\n    }\n    free(src);\n    *count = local_count;\n    return ptr;\n}", "void* func0(char* str, int len, int* count) {\n    char* ptr = NULL;\n    size_t size = strlen(str);\n    uint* src = (uint*)malloc(size + 1);\n    ushort** ppu = __ctype_b_loc();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    ushort* pu = *ppu;\n    int vowels = 0;\n    int local_count = 0;\n    bool is_valid = false;\n\n    for (i = 0; i < size; i++) {\n        char c = str[i];\n        if (((*(byte*)((long)pu + (long)(char)c * 2 + 1) & 0x20) == 0) && (c!= 0)) {\n            src[i - j] = c;\n            char* vowel = strchr(\"aeiouAEIOU\", c);\n            if (vowel == NULL) {\n                vowels = (vowels + 1) - ((pu[c] & 0x400) == 0);\n            }\n        } else {\n            if (len == vowels) {\n                local_count++;\n                src[i - j] = 0;\n                ptr = realloc(ptr, local_count * 8);\n                uint* p = src;\n                do {\n                    uint* q = p;\n                    uint u = *q + 0xfefefeff & ~*q;\n                    uint v = u & 0x80808080;\n                    p++;\n                } while (v == 0);\n                bool b = (u & 0x8080) == 0;\n                if (b) {\n                    v = v >> 0x10;\n                }\n                if (b) {\n                    p = (uint*)((long)q + 6);\n                }\n                size_t dest_size = (long)p + ((long)src - (ulong)CARRY1((byte)v, (byte)v)) + -2;\n                char* dest = malloc(dest_size);\n                *(void**)((long)ptr + ((long)local_count * 8 - 8)) = dest;\n                memcpy(dest, src, dest_size);\n            }\n            vowels = 0;\n            j++;\n        }\n    }\n    free(src);\n    *count = local_count;\n    return ptr;\n}", "char *func0(char *param_1) {\n  size_t len = strlen(param_1);\n  int i = len - 2;\n  while (i >= 0) {\n    char *c = strchr(\"AEIOUaeiou\", param_1[i]);\n    if (c!= NULL && (strchr(\"AEIOUaeiou\", param_1[i + 1]) == NULL && strchr(\"AEIOUaeiou\", param_1[i - 1]) == NULL)) {\n      return param_1 + i;\n    }\n    i--;\n  }\n  return NULL;\n}", "char *func0(char *param_1) {\n  int i;\n  char c;\n  char *p;\n  int len;\n  char *result = malloc(1);\n  *result = '\\0';\n  len = strlen(param_1);\n  for (i = len - 1; i >= 0; i--) {\n    c = param_1[i];\n    p = strchr(\"AEIOUaeiou\", c);\n    if (p && (strchr(\"AEIOUaeiou\", param_1[i + 1]) == NULL || strchr(\"AEIOUaeiou\", param_1[i - 1]) == NULL)) {\n      *result = c;\n      break;\n    }\n  }\n  return result;\n}", "char *func0(char *param_1) {\n  size_t len = strlen(param_1);\n  int i = len - 2;\n  if (i > 0) {\n    char *p = param_1 + i;\n    while (param_1 + i - 1!= p) {\n      char c = *p;\n      if (strchr(\"AEIOUaeiou\", c)!= NULL && \n          strchr(\"AEIOUaeiou\", p[1]) == NULL && \n          strchr(\"AEIOUaeiou\", p[-1]) == NULL) {\n        break;\n      }\n      p--;\n    }\n    char c = *p;\n    out_2757[0] = c;\n  }\n  return out_2757;\n}", "char *func0(char *param_1) {\n  size_t len = strlen(param_1);\n  int i = len - 2;\n  if (i > 0) {\n    char *p = param_1 + i;\n    while (param_1 + i - 1!= p) {\n      char c = *p;\n      if (strchr(\"AEIOUaeiou\", c)!= NULL && \n          strchr(\"AEIOUaeiou\", p[1]) == NULL && \n          strchr(\"AEIOUaeiou\", p[-1]) == NULL) {\n        break;\n      }\n      p--;\n    }\n    char c = *p;\n    out_2757[0] = c;\n  }\n  return out_2757;\n}", "int func0(char *param_1, char *param_2) {\n  int balance1 = 0;\n  int balance2 = 0;\n  bool valid1 = true;\n  bool valid2 = true;\n  int len1 = strlen(param_1);\n  int len2 = strlen(param_2);\n  \n  for (int i = 0; i < len1; i++) {\n    if (param_1[i] == '(') {\n      balance1++;\n    }\n    else if (param_1[i] == ')') {\n      balance1--;\n    }\n    if (balance1 < 0) {\n      valid1 = false;\n    }\n  }\n  for (int i = 0; i < len2; i++) {\n    if (param_2[i] == '(') {\n      balance2++;\n    }\n    else if (param_2[i] == ')') {\n      balance2--;\n    }\n    if (balance2 < 0) {\n      valid2 = false;\n    }\n  }\n  if (balance1 == 0 && balance2 == 0 && valid1 && valid2) {\n    return 0x2008;\n  }\n  else {\n    for (int i = 0; i < len2; i++) {\n      if (param_2[i] == '(') {\n        balance2++;\n      }\n      else if (param_2[i] == ')') {\n        balance2--;\n      }\n      if (balance2 < 0) {\n        valid2 = false;\n      }\n    }\n    for (int i = 0; i < len1; i++) {\n      if (param_1[i] == '(') {\n        balance1++;\n      }\n      else if (param_1[i] == ')') {\n        balance1--;\n      }\n      if (balance1 < 0) {\n        valid1 = false;\n      }\n    }\n    if (balance1 == 0 && balance2 == 0 && valid1 && valid2) {\n      return 0x2008;\n    }\n    else {\n      return 0x200c;\n    }\n  }\n}", "int func0(char *param_1, char *param_2) {\n  int length1 = strlen(param_1);\n  int length2 = strlen(param_2);\n  int balance1 = 0;\n  int balance2 = 0;\n  bool isValid = true;\n\n  for (int i = 0; i < length1; i++) {\n    if (param_1[i] == '(') {\n      balance1++;\n    } else if (param_1[i] == ')') {\n      balance1--;\n    }\n    if (balance1 < 0) {\n      isValid = false;\n      break;\n    }\n  }\n\n  if (!isValid) {\n    return 0;\n  }\n\n  for (int i = 0; i < length2; i++) {\n    if (param_2[i] == '(') {\n      balance2++;\n    } else if (param_2[i] == ')') {\n      balance2--;\n    }\n    if (balance2 < 0) {\n      isValid = false;\n      break;\n    }\n  }\n\n  if (!isValid) {\n    return 0;\n  }\n\n  for (int i = 0; i < length2; i++) {\n    if (param_2[i] == '(') {\n      balance2++;\n    } else if (param_2[i] == ')') {\n      balance2--;\n    }\n    if (balance2 == 0) {\n      break;\n    }\n  }\n\n  if (balance2!= 0) {\n    return 0;\n  }\n\n  for (int i = 0; i < length1; i++) {\n    if (param_1[i] == '(') {\n      balance1++;\n    } else if (param_1[i] == ')') {\n      balance1--;\n    }\n    if (balance1 == 0) {\n      break;\n    }\n  }\n\n  if (balance1!= 0) {\n    return 0;\n  }\n\n  return 1;\n}", "int func0(char *param_1, char *param_2) {\n  int count1 = strlen(param_1);\n  int count2 = strlen(param_2);\n  if (count1 < 1) {\n    if (count2 < 1) return 0;\n    char *end = param_2 + count2 - 1;\n    int balance = 0;\n    for (char *p = param_2; p <= end; p++) {\n      if (*p == '(') balance++;\n      else if (*p == ')') balance--;\n      if (balance < 0) return 0;\n    }\n    if (balance == 0) return 4;\n  } else {\n    if (count2 < 1) return 0;\n    char *end = param_1 + count1 - 1;\n    int balance = 0;\n    for (char *p = param_1; p <= end; p++) {\n      if (*p == '(') balance++;\n      else if (*p == ')') balance--;\n      if (balance < 0) return 0;\n    }\n    if (balance == 0) {\n      if (count2 == 0) return 4;\n      char *p = param_2;\n      int balance2 = 0;\n      while (*p!= '(') {\n        balance2--;\n        if (balance2 < 0) return 8;\n        p++;\n      }\n      balance2++;\n      while (*p!= ')') {\n        balance2--;\n        if (balance2 < 0) return 8;\n        p++;\n      }\n      if (balance2 == 0) return 4;\n    }\n  }\n  return 8;\n}", "int func0(char *param_1, char *param_2) {\n    int count1 = strlen(param_1);\n    int count2 = strlen(param_2);\n    if (count1 < 1) {\n        if (count2 < 1) {\n            return 0;\n        }\n        int balance = 0;\n        for (char *p = param_2; p < param_2 + count2; p++) {\n            if (*p == '(') {\n                balance++;\n            } else if (*p == ')') {\n                balance--;\n                if (balance < 0) {\n                    return 0;\n                }\n            }\n        }\n        return 1;\n    } else {\n        if (count2 < 1) {\n            int balance = 0;\n            for (char *p = param_1; p < param_1 + count1; p++) {\n                if (*p == '(') {\n                    balance++;\n                } else if (*p == ')') {\n                    balance--;\n                    if (balance < 0) {\n                        return 0;\n                    }\n                }\n            }\n            return 1;\n        }\n        int balance1 = 0;\n        int balance2 = 0;\n        for (char *p = param_1; p < param_1 + count1; p++) {\n            if (*p == '(') {\n                balance1++;\n            } else if (*p == ')') {\n                balance1--;\n                if (balance1 < 0) {\n                    return 0;\n                }\n            }\n        }\n        for (char *p = param_2; p < param_2 + count2; p++) {\n            if (*p == '(') {\n                balance2++;\n            } else if (*p == ')') {\n                balance2--;\n                if (balance2 < 0) {\n                    return 0;\n                }\n            }\n        }\n        return balance1 == 0 && balance2 == 0;\n    }\n}", "int func0(long* arr, int len, int copy_len, long copy_arr) {\n  int i, j;\n  int* temp = arr;\n  \n  for (i = 0; i < len - 1; i++) {\n    for (j = 0; j < len - i - 1; j++) {\n      if (*(int*)(arr + (j + 1) * 4) < *(int*)(arr + j * 4)) {\n        int temp_val = *(int*)(arr + j * 4);\n        *(int*)(arr + j * 4) = *(int*)(arr + (j + 1) * 4);\n        *(int*)(arr + (j + 1) * 4) = temp_val;\n      }\n    }\n  }\n  \n  for (i = 0; i < copy_len; i++) {\n    *(int*)(copy_arr + i * 4) = *(int*)(arr + (i + len - copy_len) * 4);\n  }\n  \n  return 0;\n}", "int func0(int *param_1,int param_2,int param_3,long param_4)\n{\n  int iVar1;\n  int *piVar2;\n  ulong uVar3;\n  int iVar4;\n  bool bVar5;\n  \n  iVar4 = param_2 - 1;\n  if (iVar4 > 0) {\n    for (iVar4 = param_2 - 1; iVar4 > 0; iVar4--) {\n      for (piVar2 = param_1; piVar2 < param_1 + iVar4; piVar2++) {\n        iVar1 = *piVar2;\n        if (*(piVar2 + 1) < iVar1) {\n          *piVar2 = *(piVar2 + 1);\n          *(piVar2 + 1) = iVar1;\n        }\n      }\n    }\n  }\n  if (param_3 > 0) {\n    for (uVar3 = 0; uVar3 < param_3; uVar3++) {\n      *(int *)(param_4 + uVar3 * 4) = param_1[param_2 - param_3 + uVar3];\n    }\n  }\n  return 0;\n}", "int bubble_sort(int *arr, int n, int k, long offset) {\n  for (int i = n - 2; i >= 0; i--) {\n    int *ptr = arr;\n    for (int j = 0; j < i; j++) {\n      if (*(ptr + 1) < *ptr) {\n        *(ptr + 1) = *ptr;\n        *ptr = *(ptr + 1);\n      }\n      ptr++;\n    }\n  }\n  for (int i = 0; i < k; i++) {\n    *(int *)(offset + i * 4) = arr[(n - k) + i];\n  }\n  return 0;\n}", "void func0(int *param_1,int param_2,uint param_3,int *param_4)\n{\n  int i;\n  for (i = param_2 - 2; i >= 0; i--) {\n    for (int j = 0; j < i + 1; j++) {\n      if (param_1[j + 1] < param_1[j]) {\n        param_1[j] = param_1[j + 1];\n        param_1[j + 1] = param_1[j];\n      }\n    }\n  }\n  if (param_3 > 0) {\n    for (int j = 0; j < param_3; j++) {\n      param_4[j] = param_1[param_2 + j];\n    }\n    if (param_3 & 3) {\n      param_4[param_3 - 1] = param_1[param_2 + param_3 - 1];\n      if (param_3 > 4) {\n        param_4[param_3 - 2] = param_1[param_2 + param_3 - 2];\n        if (param_3 > 8) {\n          param_4[param_3 - 3] = param_1[param_2 + param_3 - 3];\n        }\n      }\n    }\n  }\n  return param_3;\n}", "int func0(long param_1,int param_2) {\n  int local_10 = 0;\n  for (int local_c = 0; local_c * 2 < param_2; local_c++) {\n    if (*(int *)(param_1 + (long)(local_c * 2) * 4) % 2 == 1) {\n      local_10 += *(int *)(param_1 + (long)(local_c * 2) * 4);\n    }\n  }\n  return local_10;\n}", "int func0(int *param_1,int param_2) {\n  if (param_2 < 1) {\n    return 0;\n  }\n  int iVar2 = 0;\n  int *piVar1 = param_1 + (param_2 - 1) / 2 * 2 + 2;\n  for (; param_1!= piVar1; param_1 += 2) {\n    if (*param_1 % 2 == 1) {\n      iVar2 += *param_1;\n    }\n  }\n  return iVar2;\n}", "int func0(int *param_1,int param_2) {\n  int iVar2 = 0;\n  int *piVar1 = param_1 + (param_2 - 1) / 2 * 2 + 2;\n  while (param_1!= piVar1) {\n    if (*param_1 % 2 == 1) {\n      iVar2 += *param_1;\n    }\n    param_1 += 2;\n  }\n  return iVar2;\n}", "int func0(uint *param_1,int param_2) {\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint uVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  \n  if (param_2 < 1) {\n    iVar8 = 0;\n  }\n  else {\n    uVar6 = param_2 - 1;\n    if (uVar6 < 8) {\n      iVar7 = 0;\n      iVar8 = 0;\n      uVar6 = 0;\n    }\n    else {\n      iVar8 = 0;\n      iVar9 = 0;\n      iVar10 = 0;\n      iVar11 = 0;\n      puVar5 = param_1;\n      do {\n        uVar1 = *puVar5;\n        uVar2 = puVar5[2];\n        uVar3 = puVar5[4];\n        uVar4 = puVar5[6];\n        puVar5 = puVar5 + 8;\n        iVar8 = iVar8 + (-(uint)((uVar1 - ((int)uVar1 >> 0x1f) & 0x00000010) +\n                                 ((int)uVar1 >> 0x1f) == 0x00000010) & uVar1);\n        iVar9 = iVar9 + (-(uint)((uVar2 - ((int)uVar2 >> 0x1f) & 0x00000014) +\n                                 ((int)uVar2 >> 0x1f) == 0x00000014) & uVar2);\n        iVar10 = iVar10 + (-(uint)((uVar3 - ((int)uVar3 >> 0x1f) & 0x00000018) +\n                                   ((int)uVar3 >> 0x1f) == 0x00000018) & uVar3);\n        iVar11 = iVar11 + (-(uint)((uVar4 - ((int)uVar4 >> 0x1f) & 0x0000001c) +\n                                   ((int)uVar4 >> 0x1f) == 0x0000001c) & uVar4);\n      } while (puVar5!= param", "int func0(long param_1, int param_2) {\n  int local_10 = 0;\n  for (int local_c = 0; local_c < param_2; local_c++) {\n    int value = *(int *)(param_1 + local_c * 4);\n    if (-100 < value && value < 100) {\n      local_10 += value;\n    }\n  }\n  return local_10;\n}", "int func0(int *param_1,int param_2) {\n  int iVar2 = 0;\n  if (param_2 < 1) {\n    return iVar2;\n  }\n  for (int i = 0; param_1 + i!= param_1 + (param_2 - 1) + 1; i++) {\n    if (*param_1 + 99 < 199) {\n      iVar2 += *param_1;\n    }\n    param_1++;\n  }\n  return iVar2;\n}", "int func0(int *param_1,int param_2) {\n  int sum = 0;\n  int *end = param_1 + param_2;\n  for (int *p = param_1; p < end; p++) {\n    if (*p < 98) {\n      sum += *p;\n    }\n  }\n  return sum;\n}", "int func0(uint *param_1,uint param_2)\n{\n  uint uVar9;\n  int iVar10 = 0;\n  int iVar11 = 0;\n  int iVar12 = 0;\n  int iVar13 = 0;\n  int iVar14 = 0;\n  int iVar15 = 0;\n  int iVar16 = 0;\n  int iVar17 = 0;\n  int iVar18 = 0;\n  int iVar19 = 0;\n  int iVar20 = 0;\n  int iVar21 = 0;\n  int iVar22 = 0;\n  int iVar23 = 0;\n  int iVar24 = 0;\n  int iVar25 = 0;\n  int iVar26 = 0;\n  int iVar27 = 0;\n  int iVar28 = 0;\n  int iVar29 = 0;\n  int iVar30 = 0;\n  int iVar31 = 0;\n  int iVar32 = 0;\n  int iVar33 = 0;\n  int iVar34 = 0;\n  int iVar35 = 0;\n  int iVar36 = 0;\n  int iVar37 = 0;\n  int iVar38 = 0;\n  int iVar39 = 0;\n  int iVar40 = 0;\n  int iVar41 = 0;\n  int iVar42 = 0;\n  int iVar43 = 0;\n  int iVar44 = 0;\n  int iVar45 = 0;\n  int iVar46 = 0;\n  int iVar47 = 0;\n  int iVar48 = 0;\n  int iVar49 = 0;\n  int iVar50 = 0;\n  int iVar51 = 0;\n  int iVar52 = 0;\n  int iVar53 = 0;\n  int iVar54 = 0;\n  int iVar55 = 0;\n  int iVar56 = 0;\n  int iVar57 = 0;\n  int iVar58 = 0;\n  int iVar59 = 0;\n  int iVar60 = 0;\n  int iVar61 = 0;\n  int iVar62 = 0;\n  int iVar63 = 0;\n  int iVar64 = 0;\n  int iVar65 = 0;\n  int iVar66 = 0;\n  int iVar67 = 0;\n  int iVar68 = 0;\n  int iVar69 = 0;\n  int iVar70 = 0;\n  int iVar71", "int func0(int param_1, int* param_2, int* param_3) {\n  int iVar1;\n  int local_18 = 10;\n  *param_3 = 1;\n  *param_2 = 1;\n  while (param_1!= 1) {\n    if (param_1 % 2 == 1) {\n      if (local_18 <= *param_3) {\n        local_18 <<= 1;\n        *param_2 = (int*)realloc(*param_2, local_18 * 4);\n      }\n      iVar1 = *param_3;\n      *param_3 = iVar1 + 1;\n      (*param_2)[iVar1] = param_1;\n      param_1 = param_1 * 3 + 1;\n    }\n    else {\n      param_1 = param_1 / 2;\n    }\n  }\n  for (int local_14 = 1; local_14 < *param_3; local_14++) {\n    iVar1 = (*param_2)[local_14];\n    int local_10 = local_14;\n    while (local_10 > 0 && (*param_2)[local_10] > iVar1) {\n      (*param_2)[local_10 + 1] = (*param_2)[local_10];\n      local_10--;\n    }\n    (*param_2)[local_10 + 1] = iVar1;\n  }\n  return *param_3;\n}", "void func0(uint param_1, int *param_2, int *param_3) {\n  *param_3 = 1;\n  *param_2 = 1;\n  if (param_1!= 1) {\n    uint uVar4 = param_1;\n    int iVar6 = 10;\n    do {\n      int iVar1 = uVar4;\n      int iVar2 = uVar4 >> 31;\n      if ((iVar1 + iVar2 & 1) - iVar2 == 1) {\n        if (iVar6 <= *param_3) {\n          iVar6 *= 2;\n          param_2 = realloc(param_2, iVar6 * sizeof(int));\n        }\n        iVar2 = *param_3;\n        *param_3 += 1;\n        param_2[iVar2] = iVar1;\n        uVar4 = (uVar4 * 3 + 1) & 0xFFFFFFFF;\n      } else {\n        uVar4 = (uint)((iVar1 + (int)(uVar4 >> 31)) >> 1);\n      }\n    } while (uVar4!= 1);\n  }\n  if (*param_3 > 1) {\n    int *piVar5 = param_2;\n    int iVar6 = 0;\n    do {\n      int iVar2 = piVar5[1];\n      int *piVar3 = piVar5;\n      int iVar1 = iVar6;\n      if (iVar6 >= 0) {\n        do {\n          if (*piVar3 <= iVar2) break;\n          piVar3[1] = *piVar3;\n          iVar1 -= 1;\n          piVar3 -= 1;\n        } while (iVar1!= -1);\n      }\n      param_2[iVar1 + 1] = iVar2;\n      piVar5 += 1;\n      iVar6 += 2;\n      iVar1 += 1;\n    } while (iVar6 < *param_3);\n  }\n  return *param_3;\n}", "int* func0(uint param_1, int* param_2, uint* param_3) {\n  int iVar2;\n  int* piVar3;\n  long lVar4;\n  int* piVar5;\n  int iVar8;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n  int iVar98;\n  int iVar99;\n  int iVar100;\n  int iVar101;\n  int iVar102;\n  int iVar103;\n", "int* func0(uint param_1, int* param_2, uint* param_3) {\n  int iVar2;\n  int* piVar3;\n  long lVar4;\n  int* piVar5;\n  int iVar8;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n  int iVar98;\n  int iVar99;\n  int iVar100;\n  int iVar101;\n  int iVar102;\n  int iVar103;\n", "int check_string(const char *str) {\n  if (strlen(str)!= 10) return 0;\n  for (int i = 0; i < 10; i++) {\n    if ((i == 2 || i == 5) && str[i]!= '-') return 0;\n    if (str[i] < '0' || str[i] > '9') return 0;\n  }\n  int a = atoi(str[0]);\n  int b = atoi(str[3]);\n  int c = atoi(str[6]);\n  if (a < 1 || a > 0xb) return 0;\n  if (b < 1 || b > 0x1f) return 0;\n  if ((a == 4 || a == 6 || a == 9) && b == 0x1f) return 0;\n  if (a == 2 && b > 0x1d) return 0;\n  return 1;\n}", "bool func0(char *param_1) {\n  int year, month, day;\n  bool isValid;\n\n  year = strtol(param_1, NULL, 10);\n  month = strtol(param_1 + 3, NULL, 10);\n  day = strtol(param_1 + 6, NULL, 10);\n\n  isValid = (year - 1 < 12 && month - 1 < 31 && day < 32) &&\n             (year!= 2 || month!= 2 || day!= 29) &&\n             ((year % 4 == 0 && year % 100!= 0) || year % 400 == 0);\n\n  return isValid;\n}", "bool func0(undefined2 *param_1) {\n  uint uVar1;\n  int iVar2;\n  bool bVar3;\n  size_t sVar4;\n  long lVar5;\n  long lVar6;\n  long in_FS_OFFSET;\n  undefined2 local_2b;\n  undefined local_29;\n  undefined2 local_28;\n  undefined local_26;\n  undefined4 local_25;\n  undefined local_21;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar4 = strlen((char *)param_1);\n  bVar3 = false;\n  if (sVar4 == 10) {\n    lVar5 = 0;\n    while (lVar5!= 10) {\n      if (((int)lVar5!= 2) && ((int)lVar5!= 5)) {\n        if ((byte)(*(char *)((long)param_1 + lVar5) - 0x30U) < 10) break;\n        bVar3 = false;\n        break;\n      }\n      if (*(char *)((long)param_1 + lVar5)!= '-') break;\n      lVar5 = lVar5 + 1;\n    }\n    if (lVar5 == 10) {\n      local_2b = *param_1;\n      local_29 = 0;\n      local_28 = *(undefined2 *)((long)param_1 + 3);\n      local_26 = 0;\n      local_25 = *(undefined4 *)(param_1 + 3);\n      local_21 = 0;\n      lVar5 = strtol((char *)&local_2b,(char **)0x0,10);\n      lVar6 = strtol((char *)&local_28,(char **)0x0,10);\n      uVar1 = (uint)lVar5;\n      bVar3 = false;\n      if ((uVar1 - 1 < 0xc) && (iVar2 = (int)lVar6, iVar2 - 1U < 0x1f)) {\n        if ((((uVar1 & 0xfffffffd)!= 4) && ((uVar1 & 0xfffffffd)!= 9)) ||\n           (bVar3 = false, iVar2!= 0x1f)) {\n          bVar3 = uVar1!= 2 || iVar", "bool func0(undefined2 *param_1) {\n  uint uVar1;\n  int iVar2;\n  bool bVar3;\n  bool bVar4;\n  size_t sVar5;\n  long lVar6;\n  long lVar7;\n  char *str = (char *)param_1;\n  int len = strlen(str);\n  bVar4 = false;\n  bVar3 = false;\n\n  if (len == 10 && isdigit(str[0]) && isdigit(str[1]) && str[2] == '-' && isdigit(str[3]) && isdigit(str[4]) && str[5] == '-' && isdigit(str[6]) && isdigit(str[7])) {\n    lVar6 = strtol(str, NULL, 10);\n    lVar7 = strtol(str + 3, NULL, 10);\n    uVar1 = (uint)lVar6;\n    if (uVar1 - 1 < 0xc && lVar7 - 1 < 0x1f) {\n      if ((uVar1 & 0xfffffffd)!= 4 && (uVar1 & 0xfffffffd)!= 9 || lVar7!= 0x1f) {\n        bVar4 = uVar1!= 2 || lVar7 < 0x1e;\n      }\n    }\n  }\n\n  return bVar4;\n}", "char ** func0(char *param_1,int *param_2) {\n  int iVar1;\n  size_t sVar2;\n  char *pcVar3;\n  ushort **ppuVar4;\n  long in_FS_OFFSET;\n  int local_a4;\n  int local_a0;\n  uint local_9c;\n  int local_98;\n  char **local_90;\n  char *local_88;\n  char *local_80;\n  char *local_78;\n  char *local_70;\n  char *local_68;\n  char *local_60;\n  char *local_58;\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  char *local_38;\n  char *local_30;\n  char local_28;\n  char local_24;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_a0 = 0;\n  local_9c = 0;\n  local_98 = 0;\n  sVar2 = strlen(param_1);\n  iVar1 = (int)sVar2;\n  local_88 = malloc(1);\n  local_80 = malloc(1);\n  local_78 = malloc(1);\n  local_70 = malloc(1);\n  local_68 = malloc(1);\n  local_60 = malloc(1);\n  local_58 = malloc(1);\n  local_50 = malloc(1);\n  local_48 = malloc(1);\n  local_40 = malloc(1);\n  local_38 = malloc(1);\n  local_30 = malloc(1);\n  local_28 = '\\0';\n  local_24 = '\\0';\n  pcVar3 = strchr(param_1,0x20);\n  if ((pcVar3 == (char *)0x0) && (pcVar3 = strchr(param_1,0x2c), pcVar3 == (char *)0x0)) {\n    for (local_a4 = 0; local_a4 < iVar1; local_a4 = local_a4 + 1) {\n      if (((param_1[local_a4] >= 'a' && param_1[local_a4] <= 'z') && (param_1[local_a4] + -0x61) % 2 == 1) || (param_1[", "char *func0(char *param_1, int *param_2) {\n  int i;\n  int count = 0;\n  char *str = param_1;\n  char *space_pos = strchr(param_1,'');\n  char *comma_pos = strchr(param_1, ',');\n  if (space_pos == NULL) {\n    space_pos = comma_pos;\n  }\n  if (space_pos == NULL) {\n    for (i = 0; i < strlen(param_1); i++) {\n      if (isalnum(param_1[i])) {\n        count++;\n      }\n    }\n    char *result = malloc((count + 1) * sizeof(char));\n    int j = 0;\n    for (i = 0; i < strlen(param_1); i++) {\n      if (isalnum(param_1[i])) {\n        result[j++] = param_1[i];\n      }\n    }\n    result[j] = '\\0';\n    *param_2 = count;\n    return result;\n  }\n  char *result = malloc((space_pos - param_1 + 1) * sizeof(char));\n  strncpy(result, param_1, space_pos - param_1);\n  result[space_pos - param_1] = '\\0';\n  *param_2 = space_pos - param_1;\n  return result;\n}", "int func0(char *param_1, int *param_2) {\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n  int iVar98;\n  int iVar99;\n ", "int func0(char *param_1, int *param_2) {\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n  int iVar98;\n  int iVar99;\n ", "int check_array(int* arr, int size) {\n  for (int i = 1; i < size; i++) {\n    if (arr[i] < arr[i - 1]) {\n      return 0;\n    }\n    if (i > 1 && arr[i] == arr[i - 1] && arr[i] == arr[i - 2]) {\n      return 0;\n    }\n  }\n  return 1;\n}", "int func0(long param_1, int param_2) {\n  int iVar1;\n  int iVar2;\n  long lVar3 = 1;\n  \n  if (param_2 < 2) {\n    return 1;\n  }\n  while (true) {\n    iVar1 = *(int *)(param_1 + lVar3 * 4);\n    iVar2 = *(int *)(param_1 + -4 + lVar3 * 4);\n    if (iVar1 < iVar2) {\n      return 0;\n    }\n    if ((iVar1 == iVar2) && (lVar3 > 1) && (iVar1 == *(int *)(param_1 + -8 + lVar3 * 4))) {\n      break;\n    }\n    lVar3++;\n    if (lVar3 == param_2 - 1) {\n      return 1;\n    }\n  }\n  return 0;\n}", "int compareArrays(long* arr, int size) {\n  int i;\n  for (i = 1; i < size; i++) {\n    if (arr[i] < arr[i - 1] || (i!= 1 && arr[i] == arr[i - 1] && arr[i] == arr[i - 2])) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\nint func0(int size) {\n  if (size > 1) {\n    return compareArrays((long*)0, size);\n  }\n  return 1;\n}", "int func0(long param_1, int param_2) {\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  if (param_2 < 2) {\n    return 1;\n  }\n  lVar3 = 1;\n  do {\n    iVar1 = *(int *)(param_1 + lVar3 * 4);\n    iVar2 = *(int *)(param_1 + -4 + lVar3 * 4);\n    if (iVar1 < iVar2 || (lVar3!= 1 && iVar1 == iVar2 && iVar1 == *(int *)(param_1 + -8 + lVar3 * 4))) {\n      return 0;\n    }\n    lVar3++;\n  } while (lVar3!= param_2);\n  return 1;\n}", "int func0(int param_1,int param_2,int param_3,int param_4)\n{\n  if (param_1 > param_3) param_1 = param_3;\n  if (param_4 > param_2) param_2 = param_4;\n  int diff = param_2 - param_1;\n  if (diff < 2) return 0x2008;\n  for (int i = 2; i * i <= diff; i++) {\n    if (diff % i == 0) return 0x2008;\n  }\n  return 0x200b;\n}", "int func0(int param_1,int param_2,int param_3,int param_4)\n{\n  if (param_2 > param_4) param_4 = param_2;\n  if (param_3 > param_1) param_3 = param_1;\n  int uVar2 = param_4 - param_3;\n  int* puVar1 = (uVar2 > 1 && uVar2 > 3)? (uVar2 & 1)? &DAT_00102007 : &DAT_00102004 : &DAT_00102004;\n  int iVar3 = 2;\n  while (iVar3 * iVar3 <= uVar2) {\n    if (uVar2 % iVar3 == 0) return &DAT_00102007;\n    iVar3++;\n  }\n  return puVar1;\n}", "int func0(int param_1,int param_2,int param_3,int param_4)\n{\n  int *puVar1 = (param_4 < param_2)? (param_2) : (param_4);\n  int iVar3 = (param_3 < param_1)? (param_1) : (param_3);\n  int uVar2 = puVar1 - iVar3;\n  if ((uVar2 > 1) && (uVar2 > 3) && (uVar2 & 1))\n  {\n    for (iVar3 = 2; iVar3 * iVar3 <= uVar2; iVar3++)\n    {\n      if (uVar2 % iVar3 == 0)\n      {\n        return 0x7; // equivalent to &DAT_00102007\n      }\n    }\n  }\n  return puVar1 == &DAT_00102004? 0x4 : 0; // equivalent to &DAT_00102004\n}", "int func0(int param_1,int param_2,int param_3,int param_4)\n{\n  int *puVar1 = (param_4 < param_2)? (param_2) : (param_4);\n  int iVar3 = (param_3 < param_1)? (param_1) : (param_3);\n  int uVar2 = puVar1 - iVar3;\n  if ((uVar2 > 1) && (uVar2 > 3) && (uVar2 & 1))\n  {\n    for (iVar3 = 2; iVar3 * iVar3 <= uVar2; iVar3++)\n    {\n      if (uVar2 % iVar3 == 0)\n      {\n        return 0x7; // equivalent to &DAT_00102007\n      }\n    }\n  }\n  return puVar1 == &DAT_00102004? 0x4 : 0; // equivalent to &DAT_00102004\n}", "int func0(long param_1,int param_2)\n{\n  uint uVar1;\n  uint uVar2;\n  int local_14 = 0;\n  int local_10 = 1;\n  int local_c;\n  \n  if (param_2 == 0) {\n    local_14 = -0x8000;\n  }\n  else {\n    for (local_c = 0; local_c < param_2; local_c++) {\n      uVar1 = *(uint *)(param_1 + local_c * 4);\n      uVar2 = uVar1 >> 0x1f;\n      local_14 += (uVar1 ^ uVar2) - uVar2;\n      if (uVar1 == 0) {\n        local_10 = 0;\n      }\n      else if (uVar1 < 0) {\n        local_10 = -local_10;\n      }\n    }\n    local_14 *= local_10;\n  }\n  return local_14;\n}", "int func0(uint *param_1,int param_2)\n{\n  if (param_2 == 0) return -0x8000;\n  if (param_2 < 1) return 0;\n  uint *puVar1 = param_1 + (param_2 - 1);\n  int iVar3 = 0, iVar4 = 1;\n  while (param_1 <= puVar1) {\n    uint uVar2 = *param_1;\n    iVar3 += ((int)uVar2 >> 0x1f ^ uVar2) - ((int)uVar2 >> 0x1f);\n    if (uVar2 == 0) iVar4 = 0;\n    else if (uVar2 < 0) iVar4 = -iVar4;\n    param_1++;\n  }\n  return iVar3 * iVar4;\n}", "int func0_part_0(uint *param_1,int param_2)\n{\n  if (param_2 < 1) {\n    return 0;\n  }\n  int sum = 0;\n  uint *end = param_1 + (param_2 - 1) + 1;\n  int sign = 1;\n  for (; param_1!= end; param_1++) {\n    uint value = *param_1;\n    if (value!= 0) {\n      break;\n    }\n  }\n  if (param_1 == end) {\n    return 0;\n  }\n  for (; param_1!= end; param_1++) {\n    uint value = *param_1;\n    if (value < 0) {\n      sign = -sign;\n    }\n    sum += (value >> 31 ^ value) & 1;\n  }\n  return sum * sign;\n}\n\nint func0(undefined8 param_1,int param_2)\n{\n  if (param_2!= 0) {\n    return func0_part_0();\n  }\n  return 0xffff8000;\n}", "int func0(uint *param_1,int param_2) {\n  if (param_2 == 0) return -0x8000;\n  if (param_2 < 1) return 0;\n  int iVar5 = 0;\n  uint *puVar1 = param_1 + (param_2 - 1) + 1;\n  int iVar3 = 1;\n  while (param_1!= puVar1) {\n    uint uVar2 = *param_1;\n    iVar5 += ((int)uVar2 >> 0x1f ^ uVar2) - ((int)uVar2 >> 0x1f);\n    if (uVar2!= 0) break;\n    param_1++;\n    iVar3 = 0;\n    int iVar4 = 0;\n    if (param_1 == puVar1) return iVar4 * iVar5;\n    if ((int)uVar2 < 0) iVar3 = -iVar3;\n    param_1++;\n    iVar4 = iVar3;\n  }\n  return iVar4 * iVar5;\n}", "int find_min(int *arr, int rows, int cols, int *min_val) {\n  int i, j, min_idx_row, min_idx_col, min_val_idx;\n  int min_val_temp = rows * rows;\n  for (i = 0; i < rows; i++) {\n    for (j = 0; j < rows; j++) {\n      if (*(int *)(arr + (i * cols) + j) == 1) {\n        min_idx_row = i;\n        min_idx_col = j;\n      }\n    }\n  }\n  min_val_idx = rows * rows;\n  if (min_idx_row > 0 && *(int *)(arr + (min_idx_row * cols - cols) + min_idx_col) < min_val_idx) {\n    min_val_idx = *(int *)(arr + (min_idx_row * cols - cols) + min_idx_col);\n  }\n  if (min_idx_row < rows - 1 && *(int *)(arr + ((min_idx_row + 1) * cols) + min_idx_col) < min_val_idx) {\n    min_val_idx = *(int *)(arr + ((min_idx_row + 1) * cols) + min_idx_col);\n  }\n  if (min_idx_col > 0 && *(int *)(arr + (min_idx_row * cols) + min_idx_col - 1) < min_val_idx) {\n    min_val_idx = *(int *)(arr + (min_idx_row * cols) + min_idx_col - 1);\n  }\n  if (min_idx_col < rows - 1 && *(int *)(arr + (min_idx_row * cols) + min_idx_col + 1) < min_val_idx) {\n    min_val_idx = *(int *)(arr + (min_idx_row * cols) + min_idx_col + 1);\n  }\n  *min_val = min_val_idx;\n  int *result = (int *)malloc(rows * sizeof(int));\n  for (i = 0; i < rows; i++) {\n    if (i % 2 == 0) {\n      result[i] = 1;\n    } else {\n      result[i] = min_val_idx;\n    }\n  }\n  return result;\n}", "int func0(int param_1, int param_2, int param_3, int *param_4, int param_5, int param_6) {\n  int i, j, k, min;\n  int *arr = malloc((param_3 << 2) + 1);\n  if (param_2 > 0) {\n    for (i = 0; i < param_2; i++) {\n      for (j = 0; j < param_2; j++) {\n        if (*(int *)(*(int *)(param_1 + i * 8) + j * 4) == 1) {\n          param_5 = j;\n          param_6 = i;\n        }\n      }\n    }\n  }\n  min = param_2 * param_2;\n  if (param_6 > 0 && *(int *)(*(int *)(param_1 - 8 + param_6 * 8) + param_5 * 4) < min) {\n    min = *(int *)(*(int *)(param_1 - 8 + param_6 * 8) + param_5 * 4);\n  }\n  if (param_6 < param_2 - 1 && *(int *)(*(int *)(param_1 + 8 + param_6 * 8) + param_5 * 4) < min) {\n    min = *(int *)(*(int *)(param_1 + 8 + param_6 * 8) + param_5 * 4);\n  }\n  if (param_5 > 0 && *(int *)(*(int *)(param_1 + param_6 * 8) - 4 + param_5 * 4) < min) {\n    min = *(int *)(*(int *)(param_1 + param_6 * 8) - 4 + param_5 * 4);\n  }\n  if (param_5 < param_2 - 1 && *(int *)(*(int *)(param_1 + param_6 * 8) + 4 + param_5 * 4) < min) {\n    min = *(int *)(*(int *)(param_1 + param_6 * 8) + 4 + param_5 * 4);\n  }\n  *param_4 = param_3;\n  for (i = 0; i < param_3; i++) {\n    if (i & 1)", "int func0(long param_1,int param_2,int param_3,int *param_4,undefined8 param_5,int param_6) {\n  int iVar1;\n  int iVar5;\n  int iVar6;\n  long in_R10;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n  int iVar98", "uint *func0(uint **param_1,uint param_2,uint param_3,uint *param_4,uint param_5) {\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  uint *puVar7;\n  uint *puVar8;\n  ulong uVar9;\n  uint *puVar10;\n  int iVar11;\n  uint uVar12;\n  ulong unaff_RBP;\n  uint uVar13;\n  ulong uVar15;\n  uint uVar16;\n  uint uVar17;\n  uint uVar18;\n  uint uVar19;\n  uint uVar20;\n  uint uVar21;\n  uint uVar22;\n  uint uVar23;\n  uint uVar24;\n  uint uVar25;\n  uint uVar26;\n  uint uVar27;\n  uint uVar28;\n  uint uVar29;\n  uint uVar30;\n  uint uVar31;\n  uint uVar32;\n  uint uVar33;\n  uint uVar34;\n  uint uVar35;\n  uint uVar36;\n  uint uVar37;\n  uint uVar38;\n  uint uVar39;\n  uint uVar40;\n  uint uVar41;\n  uint uVar42;\n  ulong uVar14;\n  \n  iVar11 = (int)unaff_RBP;\n  if ((int)param_2 < 1) {\n    uVar6 = param_2 * param_2;\n    if ((0 < iVar11) && ((int)param_1[(long)iVar11 + -1][(int)param_5] < (int)uVar6)) {\n      uVar6 = param_1[(long)iVar11 + -1][(int)param_5];\n    }\n    if ((iVar11 < (int)(param_2 - 1)) && ((int)param_1[(long)iVar11 + 1][(int)param_5] < (int)uVar6)\n       ) {\n      uVar6 = param_1[(long)iVar11 + 1][(int)param_5];\n    }\n    if ((0 < (int)param_5) && ((int)param_1[iVar11][(long)(int)param_5 + -1] < (int)uVar6)) {\n      uVar6 =", "int* func0(int param_1) {\n  int* puVar1 = (int*)malloc((param_1 + 1) * sizeof(int));\n  puVar1[0] = 1;\n  if (param_1!= 0) {\n    puVar1[1] = 3;\n    for (int local_14 = 2; local_14 <= param_1; local_14++) {\n      if (local_14 % 2 == 0) {\n        puVar1[local_14] = (local_14 / 2) + 1;\n      } else {\n        puVar1[local_14] = puVar1[local_14 - 2] + puVar1[local_14 - 1] + 1 + (local_14 + 1) / 2;\n      }\n    }\n  }\n  return puVar1;\n}", "int func0(int param_1) {\n  int* arr = (int*)malloc((param_1 + 1) * sizeof(int));\n  arr[0] = 1;\n  if (param_1!= 0) {\n    int i = 2;\n    while (i < param_1 + 2) {\n      if (i % 2 == 0) {\n        arr[i] = (i >> 31 & 1) + i >> 1 + 1;\n      } else {\n        arr[i] = arr[i - 2] + arr[i - 1] + 1 + (i + 1) / 2;\n      }\n      i++;\n    }\n  }\n  free(arr);\n  return 0;\n}", "int func0(int param_1) {\n  int* arr = (int*)malloc((param_1 + 1) * sizeof(int));\n  arr[0] = 1;\n  if (param_1!= 0 && arr[1] = 3, param_1 > 1) {\n    int i = 2;\n    int n = param_1 - 2 + 3;\n    while (i < n) {\n      if (i & 1) {\n        arr[i] = arr[i - 2] + arr[i - 1] + 1 + (i + 1) / 2;\n      } else {\n        arr[i] = (i + 1) / 2 + 1;\n      }\n      i++;\n    }\n  }\n  free(arr);\n  return 0;\n}", "int func0(int param_1) {\n  int* arr = (int*)malloc((param_1 + 1) * sizeof(int));\n  arr[0] = 1;\n  if (param_1!= 0 && arr[1] = 3, param_1 > 1) {\n    int i = 2;\n    int j = param_1 - 2 + 3;\n    while (i <= j) {\n      if (i % 2 == 0) {\n        arr[i] = arr[i - 2] + arr[i - 1] + 1 + (i + 1) / 2;\n      }\n      arr[i] = (i / 2) + 1;\n      i++;\n    }\n  }\n  free(arr);\n  return 0;\n}", "int func0(int param_1) {\n  bool bVar1 = false;\n  int local_14 = 1;\n  int local_1c = param_1;\n  \n  while (local_1c > 0) {\n    if (local_1c % 10 % 2 == 1) {\n      bVar1 = true;\n      local_14 *= local_1c % 10;\n    }\n    local_1c /= 10;\n  }\n  \n  return bVar1? local_14 : 0;\n}", "int func0(int param_1) {\n  int iVar3 = 0;\n  bool bVar2 = false;\n  bool bVar1 = param_1 >= 10;\n  \n  while (bVar1) {\n    if ((param_1 % 10) % 2 == 1) {\n      iVar3 = iVar3 * (param_1 % 10);\n      bVar2 = true;\n    }\n    param_1 = param_1 / 10;\n    bVar1 = param_1 >= 10;\n  }\n  \n  if (!bVar2) {\n    iVar3 = 0;\n  }\n  return iVar3;\n}", "uint func0(uint param_1) {\n  uint uVar1 = 1;\n  uint uVar2 = 0;\n  \n  if (param_1 < 10) {\n    uVar2 = param_1 % 10;\n  } else {\n    while (param_1 > 0) {\n      uVar1 *= (param_1 % 10);\n      uVar2 = (param_1 % 10);\n      param_1 /= 10;\n    }\n  }\n  return uVar2;\n}", "uint func0(uint param_1) {\n  uint uVar1 = 1;\n  uint uVar2 = 0;\n  if (param_1 < 10) {\n    uVar2 = param_1 % 10;\n  } else {\n    while (param_1 > 0) {\n      uVar1 *= (param_1 % 10);\n      uVar2 = (param_1 % 10);\n      param_1 /= 10;\n    }\n  }\n  return uVar2;\n}", "int check_brackets(char *str) {\n  int bracket_count = 0;\n  int max_brackets = 0;\n  int current_bracket = 0;\n  int i = 0;\n  \n  while (true) {\n    int str_len = strlen(str);\n    if (i >= str_len) break;\n    if (str[i] == '[') {\n      bracket_count++;\n    } else if (str[i] == ']') {\n      bracket_count--;\n      if (bracket_count < 0) bracket_count = 0;\n    }\n    if (max_brackets < bracket_count) {\n      max_brackets = bracket_count;\n    }\n    if (bracket_count < max_brackets - 1) break;\n    i++;\n  }\n  return bracket_count == max_brackets;\n}", "int count_brackets(char *str) {\n  int count = 0;\n  int max_count = 0;\n  int i = 0;\n  int str_len = strlen(str);\n  \n  for (i = 0; i < str_len; i++) {\n    if (str[i] == '[') {\n      count++;\n    } else if (str[i] == ']') {\n      count--;\n      if (count < 0) {\n        count = 0;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n    }\n  }\n  return max_count;\n}", "int balanceBrackets(const char *str) {\n  int maxCount = 0;\n  int currentCount = 0;\n  while (*str) {\n    if (*str == '[') {\n      currentCount++;\n    } else if (*str == ']') {\n      currentCount--;\n      if (currentCount < 0) {\n        currentCount = 0;\n      }\n    }\n    maxCount = std::max(maxCount, currentCount);\n    str++;\n  }\n  return maxCount == 0? 1 : 0;\n}", "int func0(char *str) {\n  int maxDepth = 0;\n  int currentDepth = 0;\n  int i = 0;\n  int len = strlen(str);\n  while (i <= len) {\n    if (i == len || str[i] == '[') {\n      currentDepth++;\n    } else if (str[i] == ']') {\n      currentDepth--;\n      if (currentDepth < 0) currentDepth = 0;\n    }\n    if (currentDepth > maxDepth) maxDepth = currentDepth;\n    if (currentDepth == 0) return 1;\n    i++;\n  }\n  return 0;\n}", "int func0(long param_1,int param_2)\n{\n  double dVar1;\n  double dVar2;\n  int local_20 = 0;\n  int local_1c;\n  \n  for (local_1c = 0; local_1c < param_2; local_1c++)\n  {\n    dVar1 = ceil(*(float *)(param_1 + local_1c * 4));\n    dVar2 = dVar1;\n    local_20 += (int)dVar2 * (int)dVar1;\n  }\n  return local_20;\n}", "int func0(float *param_1,int param_2)\n{\n  if (param_2 < 1) return 0;\n  float *end = param_1 + (param_2 - 1) + 1;\n  int sum = 0;\n  for (; param_1!= end; param_1++)\n  {\n    float val = *param_1;\n    if ((uint)val & 0x7f800000 < 0x7f800000 - 0x00800000)\n    {\n      val = (float)(~0x7f800000 & (uint)val | (uint)((float)(int)val + (float)(-(uint)((float)(int)val < val) & 0x007fffff)));\n    }\n    sum += (int)val * (int)val;\n  }\n  return sum;\n}", "int func0(float *param_1,int param_2)\n{\n  if (param_2 > 0) {\n    int sum = 0;\n    float *end = param_1 + param_2 - 1;\n    for (; param_1 <= end; param_1++) {\n      float value = *param_1;\n      if ((value & 0x7f800000) < 0x7f800000 - 0x00800000) {\n        value = (float)(~0x7f800000 & (uint)value |\n                       (uint)((float)(int)value +\n                             (float)(-(uint)((float)(int)value < value) & 0x007fffff)));\n      }\n      sum += (int)value * (int)value;\n    }\n    return sum;\n  }\n  return 0;\n}", "int func0(float *param_1,int param_2)\n{\n  if (param_2 > 0) {\n    int sum = 0;\n    float *end = param_1 + param_2 - 1;\n    for (float *p = param_1; p <= end; p++) {\n      float f = *p;\n      if ((uint)f & 0x7f800000) < 0x7f800000 - 0x00800000) {\n        f = (float)(~0x7f800000 & (uint)f | (uint)((float)(int)f + (float)(-(uint)((float)(int)f < f) & 0x007fffff)));\n      }\n      sum += (int)f * (int)f;\n    }\n    return sum;\n  }\n  return 0;\n}", "int is_valid_string(const char *str) {\n  size_t len = strlen(str);\n  if (len == 0) return 0;\n  char last_char = str[len - 1];\n  const unsigned short *ctype = __ctype_b_loc();\n  if ((*ctype)[last_char] & 0x400) {\n    if (len == 1) return 1;\n    char second_last_char = str[len - 2];\n    if ((*ctype)[second_last_char] & 0x400) return 1;\n  }\n  return 0;\n}", "ulong func0(char *param_1) {\n  int i;\n  for (i = strlen(param_1) - 1; i >= 0; i--) {\n    if (!isalnum(param_1[i])) {\n      return 0;\n    }\n  }\n  return 1;\n}", "ulong func0(char *param_1) {\n  int len = strlen(param_1);\n  if (len == 0) return 0;\n  ushort *ctype = __ctype_b_loc();\n  if ((ctype[len - 1] & 4) == 0) return 0;\n  if (len > 1) {\n    return (ulong)((ctype[len - 2] >> 10 ^ 1) & 1);\n  }\n  return (ulong)len;\n}", "ulong func0(char *param_1) {\n  int len = strlen(param_1);\n  if (len == 0) return 0;\n  ushort *ctype = __ctype_b_loc();\n  if ((ctype[len - 1] & 4) == 0) return 0;\n  if (len > 1) {\n    return (ulong)((ctype[len - 2] >> 10 ^ 1) & 1);\n  }\n  return (ulong)len;\n}", "int find_min_diff_index(long arr, int size) {\n  int min_diff_index = -1;\n  for (int i = 1; i < size; i++) {\n    if (arr[i] < arr[i - 1]) {\n      min_diff_index = i;\n    }\n  }\n  return min_diff_index;\n}", "ulong func0(long param_1,int param_2) {\n  ulong uVar1 = 2;\n  ulong uVar2 = 0xffffffff;\n  \n  if (param_2 < 2) {\n    uVar2 = 0xffffffff;\n  }\n  else {\n    do {\n      if (*(int *)(param_1 + (uVar1 - 1) * 4) < *(int *)(param_1 + (uVar1 - 3) * 4)) {\n        uVar2 = uVar1 & 0xffffffff;\n      }\n      uVar1 = uVar1 + 1;\n    } while (uVar1!= (ulong)(param_2 - 1) + 2);\n  }\n  return uVar2;\n}", "ulong func0(long param_1,int param_2)\n{\n  ulong uVar1;\n  ulong uVar2;\n  \n  if (param_2 > 1) {\n    uVar1 = 1;\n    uVar2 = 0xffffffff;\n    while (uVar1 < param_2) {\n      if (*(int *)(param_1 + uVar1 * 4) < *(int *)(param_1 + -4 + uVar1 * 4)) {\n        uVar2 = uVar1 & 0xffffffff;\n      }\n      uVar1 = uVar1 + 1;\n    }\n    return uVar2;\n  }\n  return 0xffffffff;\n}", "uint func0(int *param_1,int param_2) {\n  if (param_2 < 2) {\n    return 0xffffffff;\n  }\n  int i;\n  for (i = 0; i < (param_2 - 1) / 4; i++) {\n    int a = param_1[i * 4];\n    int b = param_1[i * 4 + 1];\n    int c = param_1[i * 4 + 2];\n    int d = param_1[i * 4 + 3];\n    int e = a < b? 1 : 0;\n    int f = b < c? 1 : 0;\n    int g = c < d? 1 : 0;\n    int h = d < a? 1 : 0;\n    int j = e + f + g + h;\n    int k = j & 0x1;\n    int l = j & 0x2;\n    int m = j & 0x4;\n    int n = j & 0x8;\n    int o = k + l + m + n;\n    int p = o & 0x1;\n    int q = o & 0x2;\n    int r = o & 0x4;\n    int s = o & 0x8;\n    int t = p + q + r + s;\n    int u = t & 0x1;\n    int v = t & 0x2;\n    int w = t & 0x4;\n    int x = t & 0x8;\n    int y = u + v + w + x;\n    int z = y & 0x1;\n    int aa = y & 0x2;\n    int bb = y & 0x4;\n    int cc = y & 0x8;\n    int dd = z + aa + bb + cc;\n    int ee = dd & 0x1;\n    int ff = dd & 0x2;\n    int gg = dd & 0x4;\n    int hh = dd & 0x8;\n    int ii = ee + ff + gg + hh;\n    int jj = ii & 0x1;\n    int kk = ii & 0x2;\n    int ll = ii & 0x4;\n    int mm = ii & 0x8;\n   ", "int find_min_max(int* arr, int size, int* result) {\n  int min = 0;\n  int max = 0;\n  for (int i = 0; i < size; i++) {\n    int val = arr[i];\n    if (val < 0 && (min == 0 || val < min)) {\n      min = val;\n    }\n    if (val > 0 && (max == 0 || val > max)) {\n      max = val;\n    }\n  }\n  result[0] = min;\n  result[1] = max;\n  return 0;\n}", "int process_array(int *array, int size, int *min, int *max) {\n  if (size < 1) {\n    *min = 0;\n    *max = 0;\n  }\n  else {\n    int *end = array + (size - 1) + 1;\n    int current_min = 0;\n    int current_max = 0;\n    for (int *ptr = array; ptr!= end; ptr++) {\n      int value = *ptr;\n      if (value < 0) {\n        if ((current_min < value) || (current_min == 0)) {\n          current_min = value;\n        }\n      }\n      else if (((0 < value) && (current_max = value, current_max >= value)) && (current_max!= 0)) {\n        current_max = current_max;\n      }\n      else {\n        current_max = value;\n      }\n    }\n    *min = current_min;\n    *max = current_max;\n  }\n  return 0;\n}", "int func0(int *param_1,int param_2,int *param_3)\n{\n  int max = 0, min = 0;\n  int *piVar1 = param_1 + (param_2 - 1) + 1;\n  \n  if (param_2 > 0) {\n    for (; param_1!= piVar1; param_1++) {\n      int iVar2 = *param_1;\n      if (iVar2 < 0) {\n        if (iVar2 > min || min == 0) {\n          min = iVar2;\n        }\n      }\n      else if (iVar2 > 0 && (iVar2 < max || max == 0)) {\n        max = iVar2;\n      }\n    }\n    *param_3 = min;\n    param_3[1] = max;\n    return 0;\n  }\n  *param_3 = 0;\n  param_3[1] = 0;\n  return 0;\n}", "int findMaxMin(int *arr, int size, int *max, int *min) {\n  if (size > 0) {\n    int maxVal = 0;\n    int minVal = 0;\n    for (int i = 0; i < size; i++) {\n      int val = arr[i];\n      if (val < 0) {\n        if (minVal < val || minVal == 0) {\n          minVal = val;\n        }\n      } else if (val!= 0 && (maxVal == 0 || val < maxVal)) {\n        maxVal = val;\n      }\n    }\n    *max = maxVal;\n    *min = minVal;\n    return 0;\n  }\n  *max = 0;\n  *min = 0;\n  return 0;\n}", "char *func0(char *param_1, char *param_2) {\n  char *temp1 = strdup(param_1);\n  char *temp2 = strdup(param_2);\n  for (int i = 0; temp1[i]!= '\\0'; i++) {\n    if (temp1[i] == ',') temp1[i] = '.';\n  }\n  for (int i = 0; temp2[i]!= '\\0'; i++) {\n    if (temp2[i] == ',') temp2[i] = '.';\n  }\n  double num1 = strtod(temp1, NULL);\n  double num2 = strtod(temp2, NULL);\n  free(temp1);\n  free(temp2);\n  if (num1 == num2) return \"None\";\n  else if (num2 < num1) return param_1;\n  else return \"Invalid input\";\n}", "char *func0(char *param_1, char *param_2) {\n  char *str1 = strdup(param_1);\n  char *str2 = strdup(param_2);\n  char *ptr1 = str1;\n  char *ptr2 = str2;\n  while (*ptr1!= '\\0') {\n    if (*ptr1 == ',') {\n      *ptr1 = '.';\n    }\n    ptr1++;\n  }\n  while (*ptr2!= '\\0') {\n    if (*ptr2 == ',') {\n      *ptr2 = '.';\n    }\n    ptr2++;\n  }\n  double num1 = strtod(str1, NULL);\n  double num2 = strtod(str2, NULL);\n  free(str1);\n  free(str2);\n  if (num2 < num1) {\n    return param_1;\n  } else {\n    return \"Invalid input\";\n  }\n}", "char *func0(char *param_1, char *param_2) {\n  char *str1 = strdup(param_1);\n  char *str2 = strdup(param_2);\n  char *ptr1 = str1;\n  char *ptr2 = str2;\n  while (*ptr1!= '\\0') {\n    if (*ptr1 == ',') {\n      *ptr1 = '.';\n    }\n    ptr1++;\n  }\n  while (*ptr2!= '\\0') {\n    if (*ptr2 == ',') {\n      *ptr2 = '.';\n    }\n    ptr2++;\n  }\n  double num1 = strtod(str1, NULL);\n  double num2 = strtod(str2, NULL);\n  free(str1);\n  free(str2);\n  if (num1 >= 0 && num2 >= 0 && num1 <= num2) {\n    return param_2;\n  } else {\n    return \"Invalid input\";\n  }\n}", "char *func0(char *param_1, char *param_2) {\n  char *pcVar1;\n  char *nptr = strdup(param_1);\n  char *nptr_00 = strdup(param_2);\n  char cVar3 = *nptr;\n  char *pcVar2 = nptr;\n  while (cVar3!= '\\0') {\n    while (cVar3!= ',') {\n      cVar3 = pcVar2[1];\n      pcVar2 = pcVar2 + 1;\n      if (cVar3 == '\\0') break;\n    }\n    *pcVar2 = '.';\n    pcVar1 = pcVar2 + 1;\n    pcVar2 = pcVar2 + 1;\n    cVar3 = *pcVar1;\n  }\n  cVar3 = *nptr_00;\n  pcVar2 = nptr_00;\n  while (cVar3!= '\\0') {\n    while (cVar3!= ',') {\n      cVar3 = pcVar2[1];\n      pcVar2 = pcVar2 + 1;\n      if (cVar3 == '\\0') break;\n    }\n    *pcVar2 = '.';\n    pcVar1 = pcVar2 + 1;\n    pcVar2 = pcVar2 + 1;\n    cVar3 = *pcVar1;\n  }\n  double dVar4 = strtod(nptr, NULL);\n  double dVar5 = strtod(nptr_00, NULL);\n  free(nptr);\n  free(nptr_00);\n  if (dVar5 < dVar4) {\n    return param_1;\n  } else {\n    return \"Invalid input\";\n  }\n}", "int func0(int param_1) {\n  int uVar1;\n  \n  if ((param_1 & 1) == 0 && param_1 > 7) {\n    uVar1 = 1;\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}", "uint func0(uint param_1) {\n  return (param_1 > 7) & (param_1 ^ 1);\n}", "uint func0(uint param_1) {\n  return (param_1 < 7)? 0 : ~param_1;\n}", "uint func0(uint param_1) {\n  return (param_1 < 7)? 0 : ~param_1;\n}", "long func0(int param_1) {\n  long local_18 = 1;\n  long local_10 = 1;\n  for (int local_1c = 1; local_1c <= param_1; local_1c++) {\n    local_18 = local_1c * local_18;\n    local_10 = local_10 * local_18;\n  }\n  return local_10;\n}", "long func0(int param_1) {\n  long lVar1 = 1;\n  long lVar2 = 1;\n  long lVar3 = 1;\n  \n  if (param_1 < 1) {\n    lVar2 = 1;\n  }\n  else {\n    do {\n      lVar3 = lVar3 * lVar1;\n      lVar2 = lVar2 * lVar3;\n      lVar1 = lVar1 + 1;\n    } while (lVar1!= param_1 + 1);\n  }\n  return lVar2;\n}", "long func0(int param_1) {\n  if (param_1 > 0) {\n    long lVar1 = 1, lVar2 = 1, lVar3 = 1;\n    while (lVar1 < param_1 + 1) {\n      lVar2 = lVar2 * lVar1;\n      lVar1++;\n      lVar3 = lVar3 * lVar2;\n    }\n    return lVar3;\n  }\n  return 1;\n}", "long func0(int param_1) {\n  if (param_1 > 0) {\n    long lVar1 = 1, lVar2 = 1, lVar3 = 1;\n    while (lVar1 < param_1 + 1) {\n      lVar2 = lVar2 * lVar1;\n      lVar1 = lVar1 + 1;\n      lVar3 = lVar3 * lVar2;\n    }\n    return lVar3;\n  }\n  return 1;\n}", "char* func0(char *param_1, long param_2) {\n  int count = 0;\n  int word_count = 0;\n  int char_count = 0;\n  int i = 0;\n  while (true) {\n    int len = strlen(param_1);\n    if (len <= char_count) break;\n    if (param_1[char_count] =='') {\n      word_count++;\n    } else {\n      if (word_count == 1) {\n        param_2[i] = '_';\n        i++;\n      }\n      if (word_count == 2) {\n        i++;\n        param_2[i] = '_';\n        i++;\n        param_2[i] = '_';\n      }\n      if (2 < word_count) {\n        param_2[i] = '-';\n        i++;\n      }\n      word_count = 0;\n      param_2[i] = param_1[char_count];\n      i++;\n    }\n    char_count++;\n  }\n  if (word_count == 1) {\n    param_2[i] = '_';\n    i++;\n  }\n  if (word_count == 2) {\n    i++;\n    param_2[i] = '_';\n    i++;\n    param_2[i] = '_';\n  }\n  if (2 < word_count) {\n    param_2[i] = '-';\n    i++;\n  }\n  param_2[i] = '\\0';\n  return param_2;\n}", "int process_string(char *str, long buffer) {\n  int i = 0;\n  int count = 0;\n  int prev_count = 0;\n  int char_index = 0;\n  int char_type = 0;\n  int buffer_index = 0;\n\n  while (1) {\n    int i = 0xffffffff;\n    char *ptr = str;\n    while (i!= 0) {\n      i = i - 1;\n      char c = *ptr;\n      ptr = ptr + 1;\n    }\n    if (~i - 1 <= char_index) {\n      if (char_type == 1) {\n        *(char *)(buffer + i) = 0x5f;\n        i = i + 1;\n      }\n      else if (char_type == 2) {\n        *(char *)(buffer + i) = 0x5f;\n        *(char *)(buffer + (i + 1)) = 0x5f;\n        i = i + 2;\n      }\n      else if (2 < char_type) {\n        *(char *)(buffer + i) = 0x2d;\n        i = i + 1;\n      }\n      *(char *)(buffer + i) = 0;\n      return 0;\n    }\n    if (str[char_index] =='') {\n      char_type = char_type + 1;\n    }\n    else {\n      if (char_type == 1) {\n        *(char *)(buffer + i) = 0x5f;\n        i = i + 1;\n      }\n      else if (char_type == 2) {\n        *(char *)(buffer + i) = 0x5f;\n        *(char *)(buffer + (i + 1)) = 0x5f;\n        i = i + 2;\n      }\n      else if (2 < char_type) {\n        *(char *)(buffer + i) = 0x2d;\n        i = i + 1;\n      }\n      *(char *)(buffer + i) = str[char_index];\n      char_type = 0;\n      i = i + 1;\n    }\n    char_index = char_index + 1;\n  }\n}", "char *func0(char *param_1,long param_2) {\n  int count = 0;\n  int space_count = 0;\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  char *p = param_2;\n  char *q = param_2;\n  char *r = param_2;\n  int len = strlen(param_1);\n  for (int u = 0; u < len; u++) {\n    if (param_1[u] =='') {\n      space_count++;\n    } else {\n      if (space_count == 1) {\n        *q = '_';\n        q++;\n        space_count = 0;\n      } else if (space_count == 2) {\n        *q = '_';\n        *r = '_';\n        q++;\n        r++;\n        space_count = 0;\n      } else if (space_count > 2) {\n        *q = '-';\n        q++;\n        space_count = 0;\n      }\n      *q = param_1[u];\n      q++;\n      i++;\n      if (i == len) {\n        break;\n      }\n    }\n  }\n  if (space_count == 1) {\n    *q = '_';\n  } else if (space_count == 2) {\n    *q = '_';\n    *r = '_';\n    *(p + i) = 0;\n  } else if (space_count > 2) {\n    *q = '-';\n  }\n  *(p + i) = 0;\n  return param_2;\n}", "int func0(char *param_1, char *param_2) {\n  int count = strlen(param_1);\n  if (count == 0) {\n    return 0;\n  }\n  int i = 0, j = 0, k = 0;\n  char *p = param_2;\n  for (int u = 0; u < count; u++) {\n    if (param_1[u] =='') {\n      k++;\n    } else {\n      i++;\n      p = param_2 + i;\n      if (k == 1) {\n        *p = '_';\n        i++;\n        j = i;\n      } else if (k == 2) {\n        *p = '_';\n        *(p - 1) = '_';\n        i += 2;\n        j = i;\n      } else if (k > 2) {\n        *p = '-';\n        i++;\n        j = i;\n      }\n      i++;\n      *p = param_1[u];\n      k = 0;\n    }\n  }\n  if (k == 1) {\n    *p = '_';\n    j++;\n  } else if (k == 2) {\n    *p = '_';\n    *(p - 1) = '_';\n    j += 2;\n  } else if (k > 2) {\n    *p = '-';\n    j++;\n  }\n  *p = '\\0';\n  return j;\n}", "undefined * func0(char *param_1)\n{\n  int len = strlen(param_1);\n  if (len < 5) {\n    return &DAT_00102008;\n  }\n  char c = *param_1;\n  if (!(c >= 'A' && c <= 'Z') &&!(c >= 'a' && c <= 'z')) {\n    return &DAT_00102008;\n  }\n  char *ext = param_1 + len - 4;\n  if (strcmp(ext, \".txt\")!= 0 && strcmp(ext, \".exe\")!= 0 && strcmp(ext, \".dll\")!= 0) {\n    return &DAT_00102008;\n  }\n  int slash_count = 0;\n  int dot_count = 0;\n  for (int i = 0; i < len; i++) {\n    if (param_1[i] >= '/' && param_1[i] <= ':') {\n      slash_count++;\n    }\n    if (param_1[i] == '.') {\n      dot_count++;\n    }\n  }\n  if (slash_count < 4 && dot_count == 1) {\n    return &DAT_0010201a;\n  }\n  return &DAT_00102008;\n}", "int func0(char *param_1) {\n  int len = strlen(param_1);\n  if (len >= 4 && (param_1[0] + 0xbf) < 0x3a) {\n    int i;\n    for (i = len - 4; i >= 0; i--) {\n      if (param_1[i] < 0x39) {\n        break;\n      }\n    }\n    if (i >= 0) {\n      int j;\n      for (j = i; j >= 0; j--) {\n        if (param_1[j] < 0x30) {\n          break;\n        }\n      }\n      if (j >= 0 && param_1[i] == '.' && j == 0) {\n        return 0x10207;\n      }\n    }\n  }\n  return 0x10204;\n}", "int func0(char *param_1) {\n  int iVar3;\n  size_t sVar4;\n  int iVar5;\n  long lVar6;\n  int iVar8;\n  int iVar9;\n  bool bVar10;\n  bool bVar11;\n  bool bVar12;\n  char cVar2;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n  int iVar98;\n  int iVar99;\n  int iVar100;\n  int iVar101;\n", "char *func0(char *param_1) {\n  char cVar51 = *param_1;\n  if ((byte)(cVar51 + 0xa5U) < 6) {\n    return &DAT_00102004;\n  }\n  byte bVar40 = cVar51 + 0xbf;\n  bool bVar47 = bVar40 < 0x39;\n  bool bVar49 = bVar40 == 0x39;\n  if (0x39 < bVar40) {\n    return &DAT_00102004;\n  }\n  byte *pbVar45 = (byte *)(param_1 + (long)(int)strlen(param_1) + -4);\n  long lVar41 = 5;\n  byte *pbVar44 = pbVar45;\n  byte *pbVar46 = (byte *)0x10216d;\n  while (lVar41!= 0) {\n    lVar41 = lVar41 + -1;\n    bVar47 = *pbVar44 < *pbVar46;\n    bVar49 = *pbVar44 == *pbVar46;\n    pbVar44 = pbVar44 + (ulong)bVar40 * -2 + 1;\n    pbVar46 = pbVar46 + (ulong)bVar40 * -2 + 1;\n  }\n  bool bVar48 = false;\n  bVar47 = (!bVar47 &&!bVar49) == bVar47;\n  if (!bVar47) {\n    lVar41 = 5;\n    pbVar44 = pbVar45;\n    pbVar46 = (byte *)0x102058;\n    while (lVar41!= 0) {\n      lVar41 = lVar41 + -1;\n      bVar48 = *pbVar44 < *pbVar46;\n      bVar47 = *pbVar44 == *pbVar46;\n      pbVar44 = pbVar44 + (ulong)bVar40 * -2 + 1;\n      pbVar46 = pbVar46 + (ulong)bVar40 * -2 + 1;\n    }\n    bVar49 = false;\n    bVar47 = (!bVar48 &&!bVar47) == bVar48;\n    if (!bVar47) {\n      lVar41 = 5;\n      pbVar44 = &DAT_0010204a;\n      while (lVar41!= 0) {\n       ", "int func0(long param_1,int param_2)\n{\n  int local_10 = 0;\n  for (int i = 0; i < param_2; i++) {\n    int* ptr = (int*)(param_1 + i * 4);\n    if (i % 3 == 0) {\n      local_10 += (*ptr) * (*ptr);\n    }\n    else if (i & 3 == 0) {\n      local_10 += (*ptr) * (*ptr) * (*ptr);\n    }\n    else {\n      local_10 += *ptr;\n    }\n  }\n  return local_10;\n}", "int func0(long param_1, int param_2) {\n  int iVar1;\n  int iVar2 = 0;\n  ulong uVar3 = 0;\n  bool bVar4 = true;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  \n  do {\n    if ((uVar3 & 3) == 0) {\n      iVar1 = *(int *)(param_1 + uVar3 * 4);\n      iVar2 += iVar1 * iVar1 * iVar1;\n    }\n    else if ((uVar3 & 3) == 3) {\n      iVar1 = *(int *)(param_1 + uVar3 * 4);\n      iVar2 += iVar1;\n    }\n    else {\n      iVar1 = *(int *)(param_1 + uVar3 * 4);\n      if (((int)uVar3 / 3) * 3 == (int)uVar3) {\n        iVar2 += iVar1 * iVar1;\n      }\n      else {\n        iVar2 += iVar1;\n      }\n    }\n    bVar4 = uVar3!= param_2 - 1;\n    uVar3++;\n  } while (bVar4);\n  \n  return iVar2;\n}", "int func0(long param_1,int param_2)\n{\n  int iVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  if (param_2 > 0) {\n    uVar2 = 0;\n    iVar3 = 0;\n    while(uVar2 < param_2) {\n      iVar1 = *(int *)(param_1 + uVar2 * 4);\n      if (uVar2 % 2 == 0) {\n        iVar1 = iVar1 * iVar1;\n      }\n      else if (uVar2 % 4 == 0) {\n        iVar1 = iVar1 * iVar1 * iVar1;\n      }\n      iVar3 = iVar3 + iVar1;\n      uVar2 = uVar2 + 1;\n    }\n    return iVar3;\n  }\n  return 0;\n}", "int func0(long param_1,int param_2)\n{\n  int iVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  if (param_2 > 0) {\n    uVar2 = 0;\n    iVar3 = 0;\n    while(uVar2 < param_2) {\n      iVar1 = *(int *)(param_1 + uVar2 * 4);\n      if (uVar2 % 2 == 0) {\n        iVar1 = iVar1 * iVar1;\n      }\n      else if (uVar2 % 4 == 0) {\n        iVar1 = iVar1 * iVar1 * iVar1;\n      }\n      iVar3 = iVar3 + iVar1;\n      uVar2 = uVar2 + 1;\n    }\n    return iVar3;\n  }\n  return 0;\n}", "int func0(char *str, char *dest) {\n  int count = 0;\n  int index = 0;\n  int len = 0;\n  int i;\n  bool isPrime = false;\n  int primeIndex = 0;\n  \n  for (i = 0; str[i]!= '\\0'; i++) {\n    if (str[i] =='') {\n      if (count < 2) {\n        isPrime = false;\n      }\n      else {\n        isPrime = true;\n        for (int j = 2; j * j <= count; j++) {\n          if (count % j == 0) {\n            isPrime = false;\n            break;\n          }\n        }\n      }\n      if (isPrime) {\n        if (primeIndex > 0) {\n          dest[primeIndex] ='';\n          primeIndex++;\n        }\n        memcpy(dest + primeIndex, str + i - count, count);\n        primeIndex += count;\n      }\n      count = 0;\n    }\n    else {\n      count++;\n    }\n  }\n  if (count < 2) {\n    isPrime = false;\n  }\n  else {\n    isPrime = true;\n    for (int j = 2; j * j <= count; j++) {\n      if (count % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  if (isPrime) {\n    if (primeIndex > 0) {\n      dest[primeIndex] ='';\n      primeIndex++;\n    }\n    memcpy(dest + primeIndex, str + i - count, count);\n    primeIndex += count;\n  }\n  dest[primeIndex] = '\\0';\n  return primeIndex;\n}", "void *func0(byte *param_1,long param_2) {\n  void *pvVar1;\n  int iVar2;\n  uint uVar3;\n  long lVar4;\n  int iVar5;\n  \n  pvVar1 = (void *)(ulong)*param_1;\n  if (*param_1 == 0) {\n    iVar5 = 0;\n  }\n  else {\n    iVar5 = 0;\n    uVar3 = 0;\n    lVar4 = 0;\n    do {\n      if ((char)pvVar1 =='') {\n        if (uVar3 < 2) {\n          uVar3 = 0;\n        }\n        else if (uVar3 < 4) {\n          while (iVar5 < 0) {\n            *(undefined *)(param_2 + iVar5) = 0x20;\n            iVar5++;\n          }\n          memcpy((void *)(iVar5 + param_2),param_1 + (lVar4 - (int)uVar3),(long)(int)uVar3);\n          iVar5 += uVar3;\n          uVar3 = 0;\n        }\n        else if ((uVar3 & 1) == 0) {\n          uVar3 = 0;\n        }\n        else {\n          for (iVar2 = 2; iVar2 * iVar2 > uVar3; iVar2++) {\n            if (uVar3 % iVar2 == 0) {\n              uVar3 = 0;\n              break;\n            }\n          }\n        }\n      }\n      else {\n        uVar3++;\n      }\n      lVar4++;\n      pvVar1 = (void *)(ulong)param_1[lVar4];\n    } while (param_1[lVar4]!= 0);\n    if (uVar3 > 1) {\n      if (uVar3 < 4) {\n        while (iVar5 < 0) {\n          *(undefined *)(param_2 + iVar5) = 0x20;\n          iVar5++;\n        }\n        pvVar1 = memcpy((void *)(iVar5 + param_2),param_1 + (lVar4 - (int)uVar3),(long)(int)uVar3);\n        iVar5 += uVar3;\n      }\n      else if ((uVar3 & 1)!= 0) {\n        for (iVar2 = 2; iVar2 * iVar2 <= uVar3;", "char* func0(char* str, void* data) {\n  char* ptr = (char*)str;\n  int len = 0;\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int count = 0;\n  int step = 0;\n  int flag = 0;\n  char* temp = (char*)data;\n  char* temp_ptr = temp;\n  char* temp_end = temp;\n\n  if (*str!= 0) {\n    while (*ptr!= 0) {\n      while (*ptr =='') {\n        if (count > 0) {\n          if (count < 4) {\n            temp_ptr = temp;\n            if (flag!= 0) {\n              temp_ptr[flag] = 0x20;\n              temp_ptr = temp_ptr + 1;\n              flag = flag + 1 + count;\n            }\n            flag = flag + 1 + count;\n            memcpy(temp_ptr, str, count);\n            count = 0;\n            goto next_char;\n          }\n          if (count & 1!= 0) {\n            int step_size = 2;\n            while (count < step_size * step_size) goto next_char;\n          }\n        }\n        count = 0;\n        ptr = (char*)str + i + 1;\n        i = i + 1;\n        if (str[i + 1] == 0) goto end_loop;\n      }\n      count = count + 1;\n    next_char:\n      ptr = (char*)str + i + 1;\n      i = i + 1;\n    }\n    if (count > 0) {\n      if (count < 4) {\n        temp_ptr = temp;\n        if (flag!= 0) {\n          temp_ptr[flag] = 0x20;\n          temp_ptr = temp_ptr + 1;\n          flag = flag + 1 + count;\n        }\n        flag = flag + 1 + count;\n        memcpy(temp_ptr, str, count);\n      }\n      else {\n        int step_size = 2;\n        int remainder = count & 1;\n        while (remainder!= 0) {\n          step_size = step_size + 1;\n          if (count < step_size * step_size) goto next_char;\n          int step = count / step_size;\n          ptr = (char*)str + (i + 1 - step);\n          i", "char* func0(char* str, void* param2) {\n  char* p = (char*)str;\n  int len = 0;\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int count = 0;\n  int space_count = 0;\n  char* result = (char*)param2;\n\n  while (*p!= '\\0') {\n    if (*p =='') {\n      if (space_count > 0) {\n        result[count] = '\\0';\n        count += space_count + 1;\n        space_count = 0;\n      }\n      while (i < space_count && (i & 1)!= 0) {\n        i++;\n      }\n      space_count = i;\n      i = 0;\n    } else {\n      if (space_count > 0) {\n        result[count] ='';\n        count++;\n        space_count--;\n      }\n      result[count] = *p;\n      count++;\n      i++;\n      j = i;\n      while (i < j && (i & 1) == 0) {\n        i++;\n      }\n      while (i < j && (j & 1) == 0) {\n        j++;\n      }\n      if (i < j) {\n        i = j;\n      }\n    }\n    p++;\n  }\n  if (space_count > 0) {\n    result[count] = '\\0';\n  }\n  return result;\n}", "bool func0(long param_1,long param_2)\n{\n  char str1[112];\n  char str2[104];\n  int num1, num2, num3, num4;\n  \n  strcpy(str1, param_1);\n  num1 = atoi(str1);\n  num2 = 0;\n  while (str1[num2]!= '\\0') {\n    str2[num2] = str1[num2];\n    num2++;\n  }\n  str2[num2] = '\\0';\n  num2 = atoi(str2);\n  strcpy(str1, param_2);\n  num3 = atoi(str1);\n  num4 = 0;\n  while (str1[num4]!= '\\0') {\n    str2[num4] = str1[num4];\n    num4++;\n  }\n  str2[num4] = '\\0';\n  num4 = atoi(str2);\n  return (num1 * num3) % (num2 * num4) == 0;\n}", "int func0(char *param_1, char *param_2) {\n  int lVar1, lVar2, lVar3, lVar4, iVar6, iVar7;\n  char cVar5;\n  char local_108[111];\n  char local_99[105];\n\n  cVar5 = *param_1;\n  if (cVar5 == '/') {\n    iVar7 = 0;\n  } else {\n    lVar1 = 1;\n    do {\n      local_108[lVar1 + -1] = cVar5;\n      iVar7 = lVar1;\n      cVar5 = param_1[lVar1];\n      lVar1++;\n    } while (cVar5!= '/');\n  }\n  local_108[iVar7] = '\\0';\n  lVar1 = atoi(local_108);\n\n  cVar5 = param_1[iVar7 + 1];\n  if (cVar5 == '\\0') {\n    iVar6 = 0;\n  } else {\n    lVar3 = 1;\n    do {\n      local_99[lVar3] = cVar5;\n      iVar6 = lVar3;\n      lVar3++;\n      cVar5 = param_1[lVar3 + iVar7];\n    } while (cVar5!= '\\0');\n  }\n  local_99[iVar6 + 1] = '\\0';\n  lVar3 = atoi(local_99 + 1);\n\n  cVar5 = *param_2;\n  if (cVar5 == '/') {\n    iVar7 = 0;\n  } else {\n    lVar2 = 1;\n    do {\n      local_108[lVar2 + -1] = cVar5;\n      iVar7 = lVar2;\n      cVar5 = param_2[lVar2];\n      lVar2++;\n    } while (cVar5!= '/');\n  }\n  local_108[iVar7] = '\\0';\n  lVar2 = atoi(local_108);\n\n  cVar5 = param_2[iVar7 + 1];\n  if (cVar5 == '\\0') {\n    iVar6 = 0;\n  } else {\n    lVar4 = 1;\n    do {\n      local_99[lVar4] = cVar5;\n      iVar6 = lVar4;\n      lVar4++;\n      cVar5 = param_2[lVar4 + iVar7];\n    } while (cVar", "int func0(char *param_1, char *param_2) {\n  int lVar1, lVar4, iVar5, lVar6;\n  char cVar3;\n  char local_118[111];\n  char local_a9[105];\n  long local_40;\n  \n  cVar3 = *param_1;\n  local_40 = *(long *)(0x28);\n  if (cVar3 == '/') {\n    lVar4 = 1;\n    iVar5 = 1;\n    lVar1 = 0;\n  }\n  else {\n    for (lVar4 = 1; cVar3!= '/'; lVar4++) {\n      local_118[lVar4 - 1] = cVar3;\n      iVar5 = lVar4;\n      lVar1 = iVar5;\n      cVar3 = param_1[lVar4];\n    }\n    iVar5++;\n    lVar4 = iVar5;\n  }\n  local_118[lVar1] = '\\0';\n  lVar1 = atoi(local_118);\n  cVar3 = param_1[lVar4];\n  if (cVar3 == '\\0') {\n    lVar6 = 0;\n  }\n  else {\n    for (lVar6 = 1; cVar3!= '\\0'; lVar6++) {\n      local_a9[lVar6 - 1] = cVar3;\n      lVar6 = lVar6;\n      cVar3 = param_1[lVar6 + iVar5 - 1];\n    }\n  }\n  local_a9[lVar6 - 1] = '\\0';\n  lVar6 = atoi(local_a9);\n  cVar3 = *param_2;\n  if (cVar3 == '/') {\n    lVar4 = 1;\n    iVar5 = 1;\n    lVar1 = 0;\n  }\n  else {\n    for (lVar4 = 1; cVar3!= '/'; lVar4++) {\n      local_118[lVar4 - 1] = cVar3;\n      iVar5 = lVar4;\n      lVar1 = iVar5;\n      cVar3 = param_2[lVar4];\n    }\n    iVar5++;\n    lVar4 = iVar5;\n  }\n  local_118[lVar1] = '\\0';\n  lVar1 = atoi(local_118);\n  cVar3 = param_2", "int func0(char *param_1, char *param_2) {\n  int lVar1, lVar4, iVar5, lVar6;\n  char cVar3;\n  long local_40;\n  char local_118[111];\n  char local_a9[105];\n\n  cVar3 = *param_1;\n  local_40 = *(long *)(0x28);\n  if (cVar3 == '/') {\n    lVar4 = 1;\n    iVar5 = 1;\n    lVar1 = 0;\n  } else {\n    for (lVar4 = 1; cVar3!= '/'; lVar4++) {\n      local_118[lVar4 - 1] = cVar3;\n      cVar3 = param_1[lVar4];\n    }\n    iVar5 = lVar4;\n    lVar1 = lVar4;\n  }\n  local_118[lVar1] = '\\0';\n  lVar1 = strtol(local_118, NULL, 10);\n  cVar3 = param_1[iVar5];\n  if (cVar3 == '\\0') {\n    lVar6 = 0;\n  } else {\n    for (lVar6 = 1; cVar3!= '\\0'; lVar6++) {\n      local_a9[lVar6] = cVar3;\n      cVar3 = param_1[iVar5 + lVar6];\n    }\n  }\n  local_a9[lVar6] = '\\0';\n  lVar6 = strtol(local_a9 + 1, NULL, 10);\n  cVar3 = *param_2;\n  if (cVar3 == '/') {\n    lVar4 = 1;\n    iVar5 = 1;\n    lVar1 = 0;\n  } else {\n    for (lVar4 = 1; cVar3!= '/'; lVar4++) {\n      local_118[lVar4 - 1] = cVar3;\n      cVar3 = param_2[lVar4];\n    }\n    iVar5 = lVar4;\n    lVar1 = lVar4;\n  }\n  local_118[lVar1] = '\\0';\n  lVar1 = strtol(local_118, NULL, 10);\n  cVar3 = param_2[iVar5];\n  if (cVar3 == '\\0') {\n    lVar6 = 0;\n  } else {\n   ", "int func0(int param_1, int param_2) {\n  int i;\n  int* arr = (int*)malloc(param_2 * sizeof(int));\n  int* temp = (int*)malloc(param_2 * sizeof(int));\n  int sum = 0;\n  int num;\n  char str[12];\n  int j;\n  int len;\n  int temp_sum;\n  int temp_num;\n  int temp_len;\n  int temp_temp_sum;\n  int temp_temp_num;\n  int temp_temp_len;\n  int temp_temp_temp_sum;\n  int temp_temp_temp_num;\n  int temp_temp_temp_len;\n  int temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_sum;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_num;\n  int temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_len;\n  int temp_temp_temp_temp_temp_temp", "uint *func0(uint *param_1, int param_2) {\n    uint *array = malloc(param_2 * sizeof(uint));\n    if (param_2 > 0) {\n        for (int i = 0; i < param_2; i++) {\n            uint value = param_1[i];\n            char buffer[11];\n            sprintf(buffer, \"%d\", (value >> 31) ^ value);\n            int sum = 0;\n            for (int j = 0; j < strlen(buffer); j++) {\n                sum += buffer[j];\n            }\n            if (value < 1) {\n                sum -= buffer[0] - 48;\n            } else {\n                sum += buffer[0] - 48;\n            }\n            array[i] = sum;\n        }\n        for (int i = 1; i < param_2; i++) {\n            for (int j = 0; j < i; j++) {\n                if (array[i] < array[j]) {\n                    uint temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                    uint temp2 = param_1[i];\n                    param_1[i] = param_1[j];\n                    param_1[j] = temp2;\n                }\n            }\n        }\n    }\n    free(array);\n    return param_1;\n}", "int* func0(int* param_1, int param_2) {\n    int* ptr = (int*)malloc(param_2 * sizeof(int));\n    if (param_2 > 0) {\n        int* piVar10 = ptr;\n        int* puVar11 = param_1;\n        for (; param_1!= puVar11 + param_2; param_1++) {\n            int uVar3 = *param_1 ^ (*param_1 >> 31) - (*param_1 >> 31);\n            int uVar4 = uVar3 & 0x80808080;\n            while (uVar4 == 0) {\n                uVar3 += 0xfefefeff & ~uVar3;\n                uVar4 = uVar3 & 0x8080;\n                uVar3 >>= 1;\n            }\n            int uVar8 = (uVar3 & 0x8080) == 0? uVar3 >> 8 : 0;\n            int iVar9 = 0;\n            for (int i = 0; i < uVar8; i++) {\n                iVar9 += param_1[i] + 0x30;\n            }\n            *piVar10 = iVar9;\n            piVar10++;\n        }\n        for (int i = 0; i < param_2 - 1; i++) {\n            for (int j = 0; j < param_2 - i - 1; j++) {\n                if (param_1[j] > param_1[j + 1]) {\n                    int temp = param_1[j];\n                    param_1[j] = param_1[j + 1];\n                    param_1[j + 1] = temp;\n                }\n            }\n        }\n    }\n    free(ptr);\n    return param_1;\n}", "uint *func0(uint *param_1, int param_2) {\n    uint *ptr = (uint *)malloc(param_2 * sizeof(uint));\n    if (param_2 > 0) {\n        uint *current = param_1;\n        uint *ptr_end = ptr + param_2;\n        while (current!= param_1 + param_2) {\n            uint value = *current ^ (*current >> 31) - (*current >> 31);\n            uint mask = value & 0x80808080;\n            if (mask == 0) {\n                value >>= 24;\n            }\n            uint offset = (uint)(value + 0xfefefeff & ~value);\n            uint *next = current + 1;\n            uint *ptr_next = ptr + (offset & 0x3f);\n            if (offset < 2) {\n                *ptr_next = 0;\n            } else {\n                *ptr_next = *ptr + (offset - 2) * 4;\n            }\n            ptr = ptr_next + 1;\n            current = current + 1;\n        }\n        if (param_2 > 1) {\n            for (int i = 0; i < param_2 - 1; i++) {\n                if (ptr[i] < ptr[i + 1]) {\n                    uint temp = ptr[i];\n                    ptr[i] = ptr[i + 1];\n                    ptr[i + 1] = temp;\n                    uint *temp_ptr = param_1 + i;\n                    param_1[i] = ptr[i + 1];\n                    param_1[i + 1] = *temp_ptr;\n                }\n            }\n        }\n    }\n    free(ptr);\n    return param_1;\n}", "int func0(long param_1,int param_2) {\n  int local_1c = 0;\n  for (int local_18 = 0; local_18 < param_2; local_18++) {\n    int local_14 = *(int *)(param_1 + local_18 * 4);\n    if (10 < local_14) {\n      while (9 < local_14) {\n        local_14 /= 10;\n      }\n      if ((local_14 % 2 == 1) && (local_14 % 10 % 2 == 1)) {\n        local_1c++;\n      }\n    }\n  }\n  return local_1c;\n}", "int func0(int *param_1,int param_2)\n{\n  int *piVar1;\n  int iVar2;\n  bool bVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6 = 0;\n  \n  if (param_2 < 1) {\n    return 0;\n  }\n  piVar1 = param_1 + (param_2 - 1);\n  do {\n    iVar2 = *param_1;\n    if (iVar2 >= 10) {\n      iVar4 = iVar2 / 10;\n      do {\n        iVar5 = iVar4;\n        iVar4 = iVar4 / 10;\n      } while (iVar5 >= 10);\n      if (iVar4 % 2 == 1) {\n        iVar6 += (iVar2 % 10) % 2;\n      }\n    }\n    param_1++;\n  } while (param_1!= piVar1);\n  return iVar6;\n}", "int func0(uint *param_1,int param_2) {\n  int count = 0;\n  uint *end = param_1 + (param_2 - 1) + 1;\n  for (; param_1!= end; param_1++) {\n    uint value = *param_1;\n    if (value > 10) {\n      ulong num = value;\n      while (num > 99) {\n        num /= 10;\n      }\n      if (num & 1) {\n        count += (value & 1)? -1 : 1;\n      }\n    }\n  }\n  return count;\n}", "int func0(uint *param_1,int param_2) {\n  int count = 0;\n  uint *end = param_1 + (param_2 - 1) + 1;\n  for (; param_1!= end; param_1++) {\n    uint value = *param_1;\n    if (value > 10) {\n      ulong num = value;\n      while (num > 99) {\n        ulong quotient = num / 10;\n        num = quotient;\n      }\n      if (num & 1) {\n        count += (value & 1)? -1 : 1;\n      }\n    }\n  }\n  return count;\n}", "int func0(int param_1) {\n  int* ptr = (int*)malloc(param_1 * 8);\n  int** ptr_00 = (int**)malloc((param_1 + 1) * 12);\n  int** ptr_01 = (int**)malloc((param_1 + 1) * 12);\n  for (int i = 0; i <= param_1; i++) {\n    int* pvVar5 = (int*)calloc(3, 4);\n    ptr_00[i] = pvVar5;\n    pvVar5 = (int*)calloc(3, 4);\n    ptr_01[i] = pvVar5;\n  }\n  int* lVar2 = ptr_00[0];\n  *(int*)(lVar2 + 8) = 0;\n  int* lVar3 = ptr_00[0];\n  *(int*)(lVar3 + 4) = *(int*)(lVar2 + 8);\n  *(int*)lVar2 = *(int*)(lVar3 + 4);\n  lVar2 = ptr_01[0];\n  *(int*)(lVar2 + 8) = 0;\n  lVar3 = ptr_01[0];\n  *(int*)(lVar3 + 4) = *(int*)(lVar2 + 8);\n  *(int*)lVar2 = *(int*)(lVar3 + 4);\n  for (int j = 1; j <= param_1; j++) {\n    *(int*)((j * 4) - 4 + (long)ptr) = ((j * j - j) + 1) % 3;\n    for (int k = 0; k < 3; k++) {\n      *(int*)(ptr_00[j] + k * 4) = *(int*)(ptr_00[j - 1] + k * 4);\n    }\n    *(int*)(ptr_00[j] + (*(int*)((long)ptr + (long)j * 4 - 4) * 4)) = (*(int*)(ptr_00[j] + (*(int*)((long)ptr + (long)j * 4 - 4) * 4)) + 1);\n  }\n  for (int l = 1; l < 3; l++) {\n    for (int m = 1; m <= param_1; m++) {\n", "int func0(int param_1) {\n  int iVar1;\n  int iVar7;\n  int lVar9;\n  int lVar8;\n  int i;\n  int* ptr = (int*)malloc((param_1 + 1) * 4);\n  int* ptr_00 = (int*)malloc((param_1 + 1) * 4);\n  int* ptr_01 = (int*)malloc((param_1 + 1) * 4);\n  if (param_1 > 0) {\n    for (lVar9 = 0; lVar9 < (param_1 + 1) * 4; lVar9 += 8) {\n      int* pvVar6 = (int*)calloc(3, 4);\n      *(int**)(ptr_00 + lVar9) = pvVar6;\n      pvVar6 = (int*)calloc(3, 4);\n      *(int**)(ptr_01 + lVar9) = pvVar6;\n    }\n  }\n  int* puVar3 = (int*)(*ptr_00);\n  puVar3[2] = 0;\n  puVar3[1] = 0;\n  *puVar3 = 0;\n  puVar3 = (int*)(*ptr_01);\n  puVar3[2] = 0;\n  puVar3[1] = 0;\n  *puVar3 = 0;\n  if (param_1 > 0) {\n    for (lVar9 = 1; lVar9 <= param_1; lVar9++) {\n      iVar7 = lVar9;\n      iVar7 = (iVar7 * iVar7 - iVar7 + 1) % 3;\n      *(int*)(ptr + (lVar9 - 1) * 4) = iVar7;\n      int* puVar4 = (int*)(*ptr_00)[lVar9 - 1];\n      int* puVar3 = (int*)(*ptr_00)[lVar9];\n      *puVar3 = *puVar4;\n      puVar3[1] = puVar4[1];\n      puVar3[2] = puVar4[2];\n      puVar3[iVar7] = puVar3[iVar7] + 1;\n    }\n  }\n  for (iVar7 = 2; iVar7 > 0; iVar", "int func0(int param_1) {\n  int* ptr = (int*)malloc(param_1 * 4);\n  int** arr1 = (int**)malloc((param_1 + 1) * 8);\n  int** arr2 = (int**)malloc((param_1 + 1) * 8);\n  int i;\n  if (param_1 < 0) {\n    arr1[0] = arr2[0] = NULL;\n  } else {\n    for (i = 0; i < param_1; i++) {\n      arr1[i] = (int*)calloc(3, 4);\n      arr2[i] = (int*)calloc(3, 4);\n    }\n    arr1[0] = arr2[0] = NULL;\n    for (i = 0; i < param_1; i++) {\n      int j;\n      for (j = 0; j < 3; j++) {\n        int* p = (int*)((long)arr1[i] + j * 4);\n        *p = i + 1;\n      }\n      int* p = (int*)((long)arr2[i] + 4);\n      *p = *(int*)((long)arr1[i] + 4);\n      p = (int*)((long)arr2[i] + 1);\n      *p = *(int*)((long)arr1[i] + 1);\n      int* p2 = (int*)((long)ptr + i * 4 - 4);\n      *p2 = (i + 1) % 3;\n      p = (int*)((long)arr1[i + 1]);\n      *(int*)((long)arr1[i + 1] + (i + 1) % 3 * 4) = i + 1;\n    }\n    if (param_1 > 0) {\n      int j;\n      for (i = 1; i <= param_1; i++) {\n        int* p = (int*)((long)arr1[i]);\n        int* p2 = (int*)((long)ptr + i * 4 - 4);\n        int* p3 = (int*)((long)arr2[i]);\n        int* p4 = (int*)((long)arr1[i - 1]);\n        for (j = 0; j < 3; j++) {\n          *p = *(", "int func0(int param_1) {\n  int *piVar1;\n  void **ppvVar2;\n  int iVar3;\n  int *puVar4;\n  int *puVar5;\n  int *piVar6;\n  int uVar7;\n  void *__ptr;\n  long *__ptr_00;\n  int *__ptr_01;\n  void *pvVar8;\n  int uVar9;\n  int uVar10;\n  int *puVar11;\n  int __size;\n  int *puVar12;\n  long lVar13;\n  long lVar14;\n  int iVar15;\n  int uVar16;\n  bool bVar17;\n  \n  lVar13 = (long)param_1;\n  __size = (long)(param_1 + 1) * 8;\n  __ptr = malloc(lVar13 * 4);\n  __ptr_00 = (long *)malloc(__size);\n  lVar14 = 0;\n  __ptr_01 = (int *)malloc(__size);\n  if (param_1 < 0) {\n    puVar11 = (int *)__ptr_00;\n    puVar12 = (int *)__ptr_01;\n    *puVar11 = 0;\n    *(int *)(puVar11 + 1) = 0;\n    *puVar12 = 0;\n    *(int *)(puVar12 + 1) = 0;\n  }\n  else {\n    do {\n      pvVar8 = calloc(3,4);\n      *(void **)((long)__ptr_00 + lVar14) = pvVar8;\n      pvVar8 = calloc(3,4);\n      *(void **)((long)__ptr_01 + lVar14) = pvVar8;\n      lVar14 = lVar14 + 8;\n    } while (lVar14!= lVar13 * 8 + 8);\n    puVar11 = (int *)__ptr_00;\n    puVar12 = (int *)__ptr_01;\n    *puVar11 = 0;\n    *(int *)(puVar11 + 1) = 0;\n    *puVar12 = 0;\n    *(int *)(puVar12 + 1) = 0;\n    if (0 < param_1) {\n      uVar16 = 0;\n      uVar9 = 0;\n      while( true ) {\n        lVar14 = __ptr", "int func0(char *param_1, char *param_2, int *param_3) {\n  char *planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  int index1 = -1, index2 = -1;\n  for (int i = 0; i < 7; i++) {\n    if (strcmp(planets[i], param_1) == 0) {\n      index1 = i;\n    }\n    if (strcmp(planets[i], param_2) == 0) {\n      index2 = i;\n    }\n  }\n  if (index1 == -1 || index2 == -1 || index1 == index2) {\n    *param_3 = 0;\n    return NULL;\n  }\n  if (index2 < index1) {\n    int temp = index1;\n    index1 = index2;\n    index2 = temp;\n  }\n  *param_3 = index2 - index1 + 1;\n  if (*param_3 < 1) {\n    *param_3 = 0;\n    return NULL;\n  }\n  char **array = malloc((*param_3) * sizeof(char *));\n  for (int i = index1; i < index2; i++) {\n    array[i - index1] = planets[i];\n  }\n  return array;\n}", "int func0(char *planet1, char *planet2, int *distance) {\n  char *planets[] = {\"Mercury\", \"Venus\", \"Earth\", (char *)0x1002018, \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  int i;\n  int index1 = -1, index2 = -1;\n  for (i = 0; i < 8; i++) {\n    if (strcmp(planets[i], planet1) == 0) {\n      index1 = i;\n    }\n    if (strcmp(planets[i], planet2) == 0) {\n      index2 = i;\n    }\n  }\n  if (index1 == -1 || index2 == -1 || index1 == index2) {\n    *distance = 0;\n    return NULL;\n  }\n  int min_index = (index1 < index2)? index1 : index2;\n  int max_index = (index1 > index2)? index1 : index2;\n  int distance_between = max_index - min_index - 1;\n  if (distance_between < 1) {\n    *distance = 0;\n    return NULL;\n  }\n  char **planets_between = malloc(distance_between * sizeof(char *));\n  for (i = 0; i < distance_between; i++) {\n    planets_between[i] = planets[min_index + i + 1];\n  }\n  return planets_between;\n}", "int func0(char *param_1, char *param_2, int *param_3) {\n  int iVar1;\n  int iVar2;\n  void *pvVar3;\n  long lVar4;\n  ulong uVar5;\n  int iVar6;\n  ulong uVar7;\n  char *__s1;\n  ulong uVar8;\n  long in_FS_OFFSET;\n  char *local_88[9];\n  long local_40;\n  \n  uVar8 = 0xffffffff;\n  __s1 = \"Mercury\";\n  uVar7 = 0xffffffff;\n  uVar5 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_88[0] = \"Mercury\";\n  local_88[1] = \"Venus\";\n  local_88[2] = \"Earth\";\n  local_88[3] = &DAT_00102018;\n  local_88[4] = \"Jupiter\";\n  local_88[5] = \"Saturn\";\n  local_88[6] = \"Uranus\";\n  local_88[7] = \"Neptune\";\n  while (uVar5 < 8) {\n    iVar1 = strcmp(__s1, param_1);\n    if (iVar1 == 0) {\n      uVar7 = uVar5 & 0xffffffff;\n    }\n    iVar2 = (int)uVar7;\n    iVar1 = strcmp(__s1, param_2);\n    if (iVar1 == 0) {\n      uVar8 = uVar5 & 0xffffffff;\n    }\n    iVar1 = (int)uVar8;\n    uVar5++;\n  }\n  if ((iVar2!= -1 && iVar1!= -1) && (iVar2!= iVar1)) {\n    iVar6 = iVar2;\n    if (iVar1 < iVar2) {\n      iVar6 = iVar1;\n      iVar1 = iVar2;\n    }\n    iVar2 = (iVar1 - iVar6) + -1;\n    *param_3 = iVar2;\n    if (0 < iVar2) {\n      pvVar3 = malloc(iVar2 * 8);\n      if (iVar6 + 1 < iVar1) {\n        lVar4 = (long)(iVar6 + 1);\n        for (; lVar4 < iVar1; lVar4++) {\n          *(char **", "int compare_strings(char *str1, char *str2, char **planets, int *result) {\n  int i;\n  for (i = 0; i < 7; i++) {\n    if (strcmp(planets[i], str1) == 0) {\n      *result = i + 1;\n      return 0;\n    }\n  }\n  return -1;\n}\n\nint calculate_distance(int index1, int index2) {\n  if (index1 == -1 || index1 == index2 || index2 == -1) {\n    return 0;\n  }\n  if (index1 <= index2) {\n    return index2 - index1 + 1;\n  }\n  return index1 - index2 + 1;\n}\n\nvoid *func0(char *param_1, char *param_2, int *param_3) {\n  char *planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  int result1, result2;\n  int i;\n  void *dest;\n\n  result1 = compare_strings(param_1, param_2, planets, &result2);\n  if (result1 == 0) {\n    *param_3 = result2;\n    return NULL;\n  }\n\n  for (i = 0; i < 7; i++) {\n    if (strcmp(planets[i], param_1) == 0) {\n      result1 = i + 1;\n    }\n    if (strcmp(planets[i], param_2) == 0) {\n      result2 = i + 1;\n    }\n  }\n\n  if (result1 == 0) {\n    *param_3 = 7;\n  }\n  if (result2 == 0) {\n    *param_3 = 7;\n  }\n\n  int distance = calculate_distance(result1, result2);\n  if (distance > 0) {\n    dest = malloc(distance * 8);\n    if (result1 + 1 < result2) {\n      memcpy(dest, planets + result1 + 1, (result2 + 1 - result1 - 1) * 8 + 8);\n    }\n  } else {\n    dest = NULL;\n  }\n\n  if (result1 == result2) {\n    *param_3 = 0;\n  }\n\n  return dest;\n", "int* func0(char** param_1, int param_2, int* param_3) {\n  int i;\n  int* result = malloc((param_2 + 1) * sizeof(int));\n  *param_3 = 0;\n  for (i = 0; i < param_2; i++) {\n    if (strlen(param_1[i]) % 2 == 0) {\n      result[*param_3] = i;\n      (*param_3)++;\n    }\n  }\n  qsort(result, *param_3, sizeof(int), (int (*)(const void*, const void*))strcmp);\n  for (i = 0; i < *param_3; i++) {\n    result[i] = param_1[result[i]];\n  }\n  return result;\n}", "int func0(char **param_1,int param_2,int *param_3) {\n  int iVar2;\n  int i;\n  char **ppcVar6;\n  char *pcVar8;\n  char *pcVar9;\n  char *pcVar10;\n  bool bVar11;\n  byte bVar12;\n  uint local_3c;\n  void *pvVar3;\n  ulong uVar4;\n  ulong uVar5;\n\n  bVar12 = 0;\n  *param_3 = 0;\n  if (param_2 < 1) {\n    iVar2 = 0;\n  }\n  else {\n    ppcVar6 = param_1;\n    for (i = 0; i < param_2 - 1; i++) {\n      pcVar8 = *ppcVar6;\n      uVar4 = 0xffffffffffffffff;\n      while (uVar4!= 0) {\n        uVar4 = uVar4 - 1;\n        pcVar8 = pcVar8 + 1;\n        if (*pcVar8 == '\\0') break;\n      }\n      if ((uVar4 & 1) == 0) {\n        param_1[*param_3] = *ppcVar6;\n        *param_3 = *param_3 + 1;\n      }\n      ppcVar6 = ppcVar6 + 1;\n    }\n    iVar2 = *param_3;\n    if (iVar2 > 1) {\n      local_3c = 0;\n      while (local_3c < iVar2) {\n        pcVar8 = param_1[local_3c];\n        pcVar9 = param_1[local_3c + 1];\n        uVar4 = 0xffffffffffffffff;\n        uVar5 = 0xffffffffffffffff;\n        while (uVar4!= 0) {\n          uVar4 = uVar4 - 1;\n          pcVar8 = pcVar8 + 1;\n          if (*pcVar8 == '\\0') break;\n        }\n        while (uVar5!= 0) {\n          uVar5 = uVar5 - 1;\n          pcVar9 = pcVar9 + 1;\n          if (*pcVar9 == '\\0') break;\n        }\n        if ((~uVar5 - 1 < ~uVar4 - 1) ||\n           ((~uVar", "void func0(char **param_1,int param_2,int *param_3)\n{\n  char *pcVar1;\n  char *__s;\n  uint uVar2;\n  size_t sVar3;\n  size_t sVar4;\n  void *pvVar5;\n  ulong uVar6;\n  int iVar7;\n  char **ppcVar8;\n  bool bVar9;\n  size_t local_50;\n  \n  *param_3 = 0;\n  if (param_2 < 1) {\n    local_50 = 0;\n  }\n  else {\n    iVar7 = 0;\n    ppcVar8 = param_1;\n    do {\n      pcVar1 = *ppcVar8;\n      sVar3 = strlen(pcVar1);\n      local_50 = (long)iVar7 * 8;\n      if ((sVar3 & 1) == 0) {\n        param_1[iVar7] = pcVar1;\n        iVar7 = iVar7 + 1;\n        local_50 = local_50 + 8;\n        *param_3 = iVar7;\n      }\n      ppcVar8 = ppcVar8 + 1;\n    } while (param_1 + (ulong)(param_2 - 1) + 1!= ppcVar8);\n    uVar2 = iVar7 - 1;\n    if (0 < (int)uVar2) {\n      do {\n        uVar2 = uVar2 - 1;\n        ppcVar8 = param_1;\n        do {\n          while( true ) {\n            pcVar1 = *ppcVar8;\n            sVar3 = strlen(pcVar1);\n            __s = ppcVar8[1];\n            sVar4 = strlen(__s);\n            if (sVar3 <= sVar4) break;\n            *ppcVar8 = __s;\n            ppcVar8[1] = pcVar1;\n            ppcVar8 = ppcVar8 + 1;\n            if (param_1 + (ulong)uVar2 + 1 == ppcVar8) goto LAB_001017f6;\n          }\n          if ((sVar3 == sVar4) && (iVar7 = strcmp(pcVar1,__s), 0 < iVar7)) {\n            *ppcVar8 = __s;\n            ppcVar8[1] = pcVar", "void* func0(char** param_1, int param_2, int* param_3) {\n    int i;\n    int j;\n    int count = 0;\n    int* sorted = NULL;\n    int* temp = NULL;\n    int* ptr = NULL;\n    int* ptr2 = NULL;\n    int* ptr3 = NULL;\n    int* ptr4 = NULL;\n    int* ptr5 = NULL;\n    int* ptr6 = NULL;\n    int* ptr7 = NULL;\n    int* ptr8 = NULL;\n    int* ptr9 = NULL;\n    int* ptr10 = NULL;\n    int* ptr11 = NULL;\n    int* ptr12 = NULL;\n    int* ptr13 = NULL;\n    int* ptr14 = NULL;\n    int* ptr15 = NULL;\n    int* ptr16 = NULL;\n    int* ptr17 = NULL;\n    int* ptr18 = NULL;\n    int* ptr19 = NULL;\n    int* ptr20 = NULL;\n    int* ptr21 = NULL;\n    int* ptr22 = NULL;\n    int* ptr23 = NULL;\n    int* ptr24 = NULL;\n    int* ptr25 = NULL;\n    int* ptr26 = NULL;\n    int* ptr27 = NULL;\n    int* ptr28 = NULL;\n    int* ptr29 = NULL;\n    int* ptr30 = NULL;\n    int* ptr31 = NULL;\n    int* ptr32 = NULL;\n    int* ptr33 = NULL;\n    int* ptr34 = NULL;\n    int* ptr35 = NULL;\n    int* ptr36 = NULL;\n    int* ptr37 = NULL;\n    int* ptr38 = NULL;\n    int* ptr39 = NULL;\n    int* ptr40 = NULL;\n    int* ptr41 = NULL;\n    int* ptr42 = NULL;\n    int* ptr43 = NULL;\n    int* ptr44 = NULL;\n    int* ptr45 = NULL;\n    int* ptr46 = NULL;\n    int* ptr47 = NULL;\n    int* ptr48 = NULL;\n    int* ptr49 = NULL;\n    int* ptr50 = NULL;\n    int* ptr51 = NULL;\n    int* ptr52 = NULL;\n    int* ptr53 = NULL;\n    int* ptr54 = NULL;\n    int* ptr55 = NULL;\n    int* ptr56 = NULL;\n    int* ptr57 = NULL;\n    int* ptr58 =", "int is_prime(int num, int result, int flag) {\n  bool is_prime_var;\n  int i;\n  \n  is_prime_var = num > 1;\n  for (i = 2; i * i <= num; i++) {\n    if (num % i == 0) {\n      is_prime_var = false;\n    }\n  }\n  return is_prime_var? result : flag;\n}", "int func0(int param_1, int param_2, int param_3) {\n  int iVar1 = 2;\n  int uVar2 = param_1 > 1;\n  while (iVar1 * iVar1 <= param_1) {\n    if (param_1 % iVar1 == 0) {\n      uVar2 = param_1 % iVar1;\n    }\n    iVar1++;\n  }\n  return uVar2!= 0? param_2 : param_3;\n}", "int func0(int param_1, int param_2, int param_3) {\n  bool bVar1 = param_1 > 1;\n  if (param_1 >= 3) {\n    int iVar2 = 2;\n    while (iVar2 * iVar2 <= param_1) {\n      if (param_1 % iVar2 == 0) {\n        bVar1 = false;\n        break;\n      }\n      iVar2++;\n    }\n  }\n  return bVar1? param_2 : param_3;\n}", "int func0(int param_1, int param_2, int param_3) {\n  bool bVar1 = param_1 > 1;\n  if (param_1 >= 3) {\n    int iVar2 = 2;\n    while (iVar2 * iVar2 <= param_1) {\n      if (param_1 % iVar2 == 0) {\n        bVar1 = false;\n        break;\n      }\n      iVar2++;\n    }\n  }\n  return bVar1? param_2 : param_3;\n}", "long func0(long param_1,int param_2)\n{\n  float fVar1;\n  double dVar2;\n  double dVar3;\n  int local_24;\n  long local_20 = 0;\n  \n  for (local_24 = 0; local_24 < param_2; local_24++) {\n    fVar1 = *(float *)(param_1 + local_24 * 4);\n    dVar2 = round(fVar1);\n    if ((abs(fVar1 - dVar2) < 0.0000001) && (fVar1 > 0.0)) {\n      if (dVar2 % 2 == 1) {\n        dVar3 = round(fVar1);\n        local_20 += (int)dVar3 * (int)dVar2;\n      }\n    }\n  }\n  return local_20;\n}", "long func0(float *param_1,int param_2)\n{\n  if (param_2 < 1) return 0;\n  float *end = param_1 + (param_2 - 1) + 1;\n  long sum = 0;\n  for (float *p = param_1; p < end; p++) {\n    float x = *p;\n    float rounded = roundf(x);\n    if ((double)(x - rounded) < 0.0000001 && rounded < x && (int)rounded % 2 == 1) {\n      sum += (int)rounded * (int)rounded;\n    }\n  }\n  return sum;\n}", "long func0(float *param_1,int param_2)\n{\n  if (param_2 > 0) {\n    long sum = 0;\n    for (float *p = param_1; p!= param_1 + param_2; p++) {\n      float x = *p;\n      float rounded = roundf(x);\n      if ((x - rounded) < 0.0000001 && x > 0 && (int)rounded % 2 == 1) {\n        sum += (int)rounded * (int)rounded;\n      }\n    }\n    return sum;\n  }\n  return 0;\n}", "long func0(float *param_1,int param_2)\n{\n  if (param_2 > 0) {\n    long sum = 0;\n    for (float *p = param_1; p!= param_1 + param_2; p++) {\n      float x = *p;\n      float rounded = roundf(x);\n      if ((x - rounded) < 0.0000001 && x > 0 && (int)rounded % 2 == 1) {\n        sum += (int)rounded * (int)rounded;\n      }\n    }\n    return sum;\n  }\n  return 0;\n}", "int func0(int param_1, int param_2, int param_3, int param_4) {\n  int local_c;\n  for (local_c = 0; local_c < param_4; local_c++) {\n    int uVar1 = param_1 + local_c * 4 - param_2 - local_c * 4;\n    int uVar2 = uVar1 >> 31;\n    *(int *)((long)param_3 + local_c * 4) = (uVar1 ^ uVar2) - uVar2;\n  }\n  return 0;\n}", "void func0(long param_1,long param_2,long param_3,int param_4)\n{\n  int *piVar1;\n  ulong uVar2;\n  uint uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (param_4 > 0) {\n    uVar2 = 0;\n    while (uVar2 < param_4) {\n      uVar3 = *(int *)(param_1 + uVar2 * 4) - *(int *)(param_2 + uVar2 * 4);\n      uVar4 = (int)uVar3 >> 0x1f;\n      *(uint *)(param_3 + uVar2 * 4) = uVar3 ^ uVar4;\n      piVar1 = (int *)(param_3 + uVar2 * 4);\n      *piVar1 = *piVar1 - uVar4;\n      uVar2++;\n    }\n  }\n  return param_4;\n}", "void func0(long param_1,long param_2,long param_3,int param_4)\n{\n  int *piVar1;\n  ulong uVar2;\n  uint uVar3;\n  uint uVar4;\n  bool bVar5;\n  \n  if (param_4 > 0) {\n    for (uVar2 = 0; uVar2 < param_4; uVar2++) {\n      uVar3 = *(int *)(param_1 + uVar2 * 4) - *(int *)(param_2 + uVar2 * 4);\n      uVar4 = (int)uVar3 >> 0x1f;\n      *(uint *)(param_3 + uVar2 * 4) = uVar3 ^ uVar4;\n      piVar1 = (int *)(param_3 + uVar2 * 4);\n      *piVar1 = *piVar1 - uVar4;\n    }\n  }\n  return;\n}", "void func0(long param_1,long param_2,long param_3,uint param_4)\n{\n  int *piVar1;\n  int *piVar2;\n  int *piVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  long lVar10;\n  ulong uVar11;\n  bool bVar12;\n  uint uVar13;\n  uint uVar14;\n  uint uVar15;\n  uint uVar16;\n  \n  if (param_4 > 0) {\n    if (((param_1 + 0xf) - param_3 < 0x1f || param_4 - 1 < 3) ||\n       ((param_2 + 0xf) - param_3 < 0x1f)) {\n      uVar11 = 0;\n      do {\n        uVar13 = *(int *)(param_1 + uVar11 * 4) - *(int *)(param_2 + uVar11 * 4);\n        uVar14 = uVar13 >> 0x1f;\n        *(uint *)(param_3 + uVar11 * 4) = uVar13 ^ uVar14;\n        piVar1 = (int *)(param_3 + uVar11 * 4);\n        *piVar1 = *piVar1 - uVar14;\n        bVar12 = uVar11!= param_4 - 1;\n        uVar11++;\n      } while (bVar12);\n    }\n    else {\n      lVar10 = 0;\n      do {\n        piVar1 = (int *)(param_1 + lVar10);\n        iVar4 = piVar1[1];\n        iVar5 = piVar1[2];\n        iVar6 = piVar1[3];\n        piVar2 = (int *)(param_2 + lVar10);\n        iVar7 = piVar2[1];\n        iVar8 = piVar2[2];\n        iVar9 = piVar2[3];\n        uVar13 = *piVar1 - *piVar2 >> 0x1f;\n        uVar14 = iVar4 - iVar7 >> 0x1f;\n        uVar15 = iVar5 - iVar8 >> 0x1f;\n        uVar16 = iVar6 - iVar9 >> 0x1f;\n        piVar3", "int func0(char *param_1,long param_2,int param_3,char *param_4)\n{\n  int max = -1000;\n  long max_addr = 0;\n  for (int i = 0; i < param_3; i++) {\n    long addr = param_2 + i * 8;\n    int score = 0;\n    for (int j = 0; *(char *)(addr + j)!= '\\0'; j++) {\n      char c = *(char *)(addr + j);\n      if ('@' < c && c < '[') score++;\n      else if ('`' < c && c < '{') score--;\n    }\n    if (max < score) {\n      max = score;\n      max_addr = addr;\n    }\n  }\n  sprintf(param_4,\"%s.%s\",param_1,(char *)max_addr);\n  return 0;\n}", "char* func0(char* param_1, char** param_2, int param_3, char* param_4) {\n  char* max_str = NULL;\n  int max_len = 0;\n  int i;\n  char* str;\n  char c;\n\n  if (param_3 < 1) {\n    return NULL;\n  }\n  else {\n    for (i = 0; i < param_3; i++) {\n      str = param_2[i];\n      c = *str;\n      int len = 0;\n      while (c!= '\\0') {\n        if ((byte)(c + 0xbfU) < 0x1a) {\n          len++;\n        }\n        else {\n          len--;\n        }\n        c = *++str;\n      }\n      if (max_len < len) {\n        max_str = str;\n        max_len = len;\n      }\n    }\n  }\n  sprintf(param_4, \"%s.%s\", param_1, max_str);\n  return max_str;\n}", "char *func0(char *param_1, char **param_2, int param_3, char *param_4) {\n  char *longest_str = NULL;\n  int max_len = -1000;\n  char **end = param_2 + (param_3 - 1) + 1;\n  for (char **i = param_2; i!= end; i++) {\n    char *str = *i;\n    if (*str == '\\0') {\n      continue;\n    }\n    int len = 0;\n    char *p = str + 1;\n    while (0x19 < (byte)(*str + 0xbfU)) {\n      len -= (*str + 0x9fU < 0x1a);\n      str = p;\n      p = p + 1;\n      if (*str == '\\0') break;\n    }\n    while (*str!= '\\0') {\n      str = str + 1;\n      len++;\n    }\n    if (max_len < len) {\n      longest_str = str;\n      max_len = len;\n    }\n  }\n  sprintf(param_4, \"%s.%s\", param_1, longest_str);\n  return longest_str;\n}", "char* func0(char *param_1, char **param_2, int param_3, char *param_4) {\n  char *longest_str = NULL;\n  int max_len = -1000;\n  for (int i = 0; i < param_3; i++) {\n    char *str = param_2[i];\n    int len = 0;\n    while (*str!= '\\0') {\n      if (*str < 0x19) {\n        len++;\n      }\n      str++;\n    }\n    if (len > max_len) {\n      longest_str = str - len;\n      max_len = len;\n    }\n  }\n  sprintf(param_4, \"%s.%s\", param_1, longest_str);\n  return longest_str;\n}", "int func0(char *str1, char *str2) {\n  int len2 = strlen(str2);\n  int len1 = strlen(str1);\n  char *dest = (char *)malloc((len2 * 2 + 1) * sizeof(char));\n  int pos = 0;\n  \n  while (pos <= len2) {\n    if (pos > len1) {\n      free(dest);\n      return 0;\n    }\n    strncpy(dest, str2 + pos, len1 - pos);\n    strncpy(dest + (len1 - pos), str2, pos);\n    dest[len1] = '\\0';\n    char *found = strstr(str1, dest);\n    if (found!= NULL) break;\n    pos++;\n  }\n  free(dest);\n  return 1;\n}", "int search_string(char *str1, char *str2) {\n  int len = strlen(str2);\n  int i;\n  char *buf = malloc(len * 2 + 1);\n  for (i = 0; i < len; i++) {\n    strncpy(buf, str2, len - i);\n    strncpy(buf + (len - i), str2, i);\n    buf[len + i] = '\\0';\n    if (strstr(str1, buf)!= NULL) {\n      free(buf);\n      return 1;\n    }\n  }\n  free(buf);\n  return 0;\n}", "int func0(char *param_1, char *param_2) {\n  int len = strlen(param_2);\n  char *dest = malloc((len * 2 + 1) * sizeof(char));\n  if (len > 0) {\n    for (int i = 0; i < len; i++) {\n      strncpy(dest, param_2 + i, len - i);\n      strncpy(dest + len - i, param_2, i);\n      dest[len] = '\\0';\n      if (strstr(param_1, dest)!= NULL) {\n        free(dest);\n        return 1;\n      }\n    }\n  }\n  free(dest);\n  return 0;\n}", "int func0(char *param_1, char *param_2) {\n  int len = strlen(param_2);\n  char *dest = malloc((len * 2 + 1) * sizeof(char));\n  if (len > 0) {\n    for (int i = 0; i < len; i++) {\n      strncpy(dest, param_2 + i, len - i);\n      strncpy(dest + len - i, param_2, i);\n      dest[len] = '\\0';\n      if (strstr(param_1, dest)!= NULL) {\n        free(dest);\n        return 1;\n      }\n    }\n  }\n  free(dest);\n  return 0;\n}", "int func0(uint param_1, int *param_2) {\n  int local_14 = 0;\n  int local_10 = 0;\n  int local_1c = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  while (local_1c > 0) {\n    if ((local_1c % 10 & 1U) == 0) {\n      local_14++;\n    } else {\n      local_10++;\n    }\n    local_1c /= 10;\n  }\n  param_2[0] = local_14;\n  param_2[1] = local_10;\n  return local_14 + local_10;\n}", "int func0(uint param_1, int *param_2) {\n  int iVar2 = 0;\n  int iVar4 = 0;\n  uint uVar3 = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  while (9 < (int)uVar3) {\n    if ((uVar3 & 1) == 0) {\n      iVar4++;\n    } else {\n      iVar2++;\n    }\n    uVar3 /= 10;\n  }\n  param_2[0] = iVar4;\n  param_2[1] = iVar2;\n  return iVar4 + iVar2;\n}", "int func0(uint param_1, int *param_2) {\n  int iVar1 = 0;\n  int iVar2 = 0;\n  uint uVar3 = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  while (uVar3 >= 10) {\n    uVar3 /= 10;\n  }\n  while (uVar3!= 0) {\n    if ((uVar3 & 1) == 0) {\n      iVar1++;\n    } else {\n      iVar2++;\n    }\n    uVar3 /= 10;\n  }\n  param_2[0] = iVar1;\n  param_2[1] = iVar2;\n  return iVar1 + iVar2;\n}", "int func0(uint param_1, int *param_2) {\n  int iVar1 = 0;\n  int iVar2 = 0;\n  uint uVar3 = (param_1 ^ (int)param_1 >> 0x1f) - ((int)param_1 >> 0x1f);\n  while (uVar3 >= 10) {\n    uVar3 /= 10;\n  }\n  while (uVar3!= 0) {\n    if ((uVar3 & 1) == 0) {\n      iVar1++;\n    } else {\n      iVar2++;\n    }\n    uVar3 /= 10;\n  }\n  param_2[0] = iVar1;\n  param_2[1] = iVar2;\n  return iVar1 + iVar2;\n}", "int func0(int param_1, char *param_2) {\n  int local_cc = param_1;\n  int local_bc = 0;\n  int local_b8[] = {1000, 900, 500, 400};\n  char *local_78[] = {\"m\", &DAT_00102006, &DAT_00102009, &DAT_0010200b};\n  char *str = param_2;\n  *str = '\\0';\n  while (local_cc > 0) {\n    for (int i = 0; i < 4 && local_b8[i] <= local_cc; i++) {\n      strcat(str, local_78[i]);\n      local_cc -= local_b8[i];\n    }\n    local_bc++;\n  }\n  return 0;\n}", "int func0(int param_1, char *param_2) {\n  int iVar1;\n  char *ppcVar2;\n  int *piVar3;\n  int local_d8[4];\n  int local_c8;\n  int local_c4;\n  int local_c0;\n  int local_bc;\n  int local_b8;\n  int local_b4;\n  int local_b0;\n  int local_ac;\n  int local_a8;\n  char *local_98[4];\n  char *local_78;\n  char *local_70;\n  char *local_68;\n  char *local_60;\n  char *local_58;\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  char *local_38;\n  int local_30;\n  \n  local_30 = 0;\n  local_98[0] = \"m\";\n  local_98[1] = \"DAT_00102004\";\n  local_98[2] = \"DAT_00102008\";\n  local_98[3] = \"DAT_00102007\";\n  local_78 = \"DAT_0010202c\";\n  local_70 = \"DAT_0010200a\";\n  local_68 = \"DAT_0010200e\";\n  local_60 = \"DAT_0010200d\";\n  local_58 = \"DAT_00102012\";\n  local_50 = \"DAT_00102011\";\n  local_48 = \"DAT_00102199\";\n  local_40 = \"DAT_00102198\";\n  local_38 = \"DAT_00102100\";\n  local_d8[0] = 1000;\n  local_d8[1] = 900;\n  local_d8[2] = 500;\n  local_d8[3] = 400;\n  local_c8 = 100;\n  local_c4 = 0x5a;\n  local_c0 = 0x32;\n  local_bc = 0x28;\n  local_b8 = 10;\n  local_b4 = 9;\n  local_b0 = 5;\n  local_ac = 4;\n  local_a8 = 1;\n  *param_2 = '\\0';\n  if (param_1 > 0) {\n    for (piVar3 = local_d8; piVar3 < local_d8 + ", "int func0(int param_1, char *param_2) {\n  int iVar1;\n  long lVar2;\n  long lVar3;\n  long in_FS_OFFSET;\n  char *__src;\n  char *local_98[4];\n  local_98[0] = \"m\";\n  local_98[1] = \"abc\";\n  local_98[2] = \"def\";\n  local_98[3] = \"ghi\";\n  if (param_1 > 0) {\n    iVar1 = 1000;\n    lVar2 = 0;\n    while (param_1 >= iVar1) {\n      __src = local_98[lVar2];\n      param_2 = strcat(param_2, __src);\n      param_1 -= iVar1;\n      lVar2 += 4;\n      iVar1 = 1000;\n    }\n  }\n  return strlen(param_2);\n}", "int func0(int param_1, char *param_2) {\n  int iVar1;\n  char *src;\n  long lVar2;\n  long fs_offset;\n  int e8[4];\n  char *a8[4];\n  char *str = \"m\";\n  char *str1 = \"DAT_00102004\";\n  char *str2 = \"DAT_00102008\";\n  char *str3 = \"DAT_00102007\";\n  char *str4 = \"DAT_0010202c\";\n  char *str5 = \"DAT_0010200a\";\n  char *str6 = \"DAT_0010200e\";\n  char *str7 = \"DAT_0010200d\";\n  char *str8 = \"DAT_00102012\";\n  char *str9 = \"DAT_00102100\";\n  char *str10 = \"DAT_00102199\";\n  char *str11 = \"DAT_001021e0\";\n  char *str12 = \"UNK_001021e4\";\n  char *str13 = \"UNK_001021e8\";\n  char *str14 = \"UNK_001021ec\";\n  char *str15 = \"DAT_001021f0\";\n  char *str16 = \"UNK_001021f4\";\n  char *str17 = \"UNK_001021f8\";\n  char *str18 = \"UNK_001021fc\";\n  char *str19 = \"DAT_00102200\";\n  char *str20 = \"UNK_00102204\";\n  char *str21 = \"UNK_00102208\";\n  char *str22 = \"UNK_0010220c\";\n  char fs_data[4];\n\n  fs_offset = 0;\n  strcpy(param_2, \"\");\n  e8[0] = _DAT_001021e0;\n  e8[1] = _UNK_001021e4;\n  e8[2] = _UNK_001021e8;\n  e8[3] = _UNK_001021ec;\n  a8[0] = str;\n  a8[1] = str1;\n  a8[2] = str2;\n  a8[3] = str3;\n  if (param_1 > 0) {\n    for (iVar1 = 0; iVar1 < 4; iVar1++) {\n      if (param_1 >=", "int func0(float a, float b, float c) {\n  int result = 0;\n  float sum1 = a * a + b * b;\n  float sum2 = a * a + c * c;\n  float sum3 = b * b + c * c;\n  if ((sum1 - c * c) < 0.00000001f && (sum1 - c * c) % 1 == 0 ||\n      (sum2 - b * b) < 0.00000001f && (sum2 - b * b) % 1 == 0 ||\n      (sum3 - a * a) < 0.00000001f && (sum3 - a * a) % 1 == 0) {\n    result = 1;\n  }\n  return result;\n}", "bool func0(float a, float b, float c) {\n  float squared_a = a * a;\n  float squared_b = b * b;\n  float squared_c = c * c;\n  bool result = true;\n  if ((DAT_00102020 <= (double)(float)((uint)((squared_a + squared_b) - squared_c) & _DAT_00102010)) &&\n     (DAT_00102020 <= (double)(float)((uint)((squared_a + squared_c) - squared_b) & _DAT_00102010))) {\n    result = (double)(float)((uint)((squared_b + squared_c) - squared_a) & _DAT_00102010) < DAT_00102020;\n  }\n  return result;\n}", "bool func0(float a, float b, float c) {\n  float d = a * a;\n  float e = b * b;\n  float f = c * c;\n  bool g = (DAT_00102020 <= (double)(float)((uint)((d + e) - f) & DAT_00102010)) &&\n           (DAT_00102020 <= (double)(float)((uint)((d + f) - e) & DAT_00102010));\n  return g? (double)(float)((uint)((e + f) - d) & DAT_00102010) < DAT_00102020 : false;\n}", "bool func0(float a, float b, float c) {\n  float d = a * a;\n  float e = b * b;\n  float f = c * c;\n  bool g = (DAT_00102020 <= (double)(float)((uint)((d + e) - f) & DAT_00102010)) &&\n           (DAT_00102020 <= (double)(float)((uint)((d + f) - e) & DAT_00102010));\n  return g? (double)(float)((uint)((e + f) - d) & DAT_00102010) < DAT_00102020 : false;\n}", "char *func0(long param_1,int param_2) {\n  char *result = \"\";\n  int i = 0;\n  int max = 0;\n  char *current = \"\";\n  char *buffer = \"\";\n  int count = 0;\n  int j = 0;\n  int len = 0;\n  int index = 0;\n  int found = 0;\n  int max_count = 0;\n  int max_index = 0;\n  int temp = 0;\n  int temp2 = 0;\n  int temp3 = 0;\n  int temp4 = 0;\n  int temp5 = 0;\n  int temp6 = 0;\n  int temp7 = 0;\n  int temp8 = 0;\n  int temp9 = 0;\n  int temp10 = 0;\n  int temp11 = 0;\n  int temp12 = 0;\n  int temp13 = 0;\n  int temp14 = 0;\n  int temp15 = 0;\n  int temp16 = 0;\n  int temp17 = 0;\n  int temp18 = 0;\n  int temp19 = 0;\n  int temp20 = 0;\n  int temp21 = 0;\n  int temp22 = 0;\n  int temp23 = 0;\n  int temp24 = 0;\n  int temp25 = 0;\n  int temp26 = 0;\n  int temp27 = 0;\n  int temp28 = 0;\n  int temp29 = 0;\n  int temp30 = 0;\n  int temp31 = 0;\n  int temp32 = 0;\n  int temp33 = 0;\n  int temp34 = 0;\n  int temp35 = 0;\n  int temp36 = 0;\n  int temp37 = 0;\n  int temp38 = 0;\n  int temp39 = 0;\n  int temp40 = 0;\n  int temp41 = 0;\n  int temp42 = 0;\n  int temp43 = 0;\n  int temp44 = 0;\n  int temp45 = 0;\n  int temp46 = 0;\n  int temp47 = 0;\n  int temp48 = 0;\n  int temp49 = 0;\n  int temp50 = 0;\n  int temp51 = 0;\n  int temp52 = 0;\n", "char *func0(char **param_1, int param_2) {\n    char *best_match = \"\";\n    int best_match_len = 0;\n    for (int i = 0; i < param_2; i++) {\n        char *str = param_1[i];\n        int len = 0;\n        while (*str!= '\\0') {\n            str++;\n            len++;\n        }\n        if (len > best_match_len) {\n            best_match = str;\n            best_match_len = len;\n        }\n    }\n    return best_match;\n}", "```c\n#include <string.h>\n#include <stdio.h>\n\nchar *func0(char **param_1, int param_2) {\n    char *local_150 = \"\";\n    int local_15c = 0;\n    while (param_2-- > 0) {\n        char *s1 = *param_1;\n        char *s2 = local_150;\n        int i = 0;\n        while (*s1!= '\\0') {\n            if (*s1 == '\\0') break;\n            int found = 0;\n            while (*s2!= '\\0') {\n                if (*s1 == *s2) {\n                    found = 1;\n                    break;\n                }\n                s2++;\n            }\n            if (found) {\n                s1++;\n                s2 = local_150;\n                i++;\n                continue;\n            }\n            int j = 0;\n            while (j < 16) {\n                if (s2[j] == '\\0') break;\n                j++;\n            }\n            if (j == 16) break;\n            s2[j] = *s1;\n            s2[j + 1] = '\\0';\n            s1++;\n            i++;\n        }\n        if (strcmp(s1, local_150) < 0) {\n            local_150 = s1;\n        }\n        param_1++;\n    }\n    return local_150;\n}\n```\n\nThis code is a simplified version of the given pseudo code. It achieves the same functionality but with less complexity and more readable code. The main changes made were:\n\n- Removed unnecessary variables and loops.\n- Simplified the string comparison and copying logic.\n- Removed the use of undefined variables and arrays.\n- Improved the code structure and readability.\n- Removed the stack check and error handling code, as it is not necessary in this simplified version.", "```c\n#include <string.h>\n#include <stdio.h>\n\nchar *func0(char **param_1, int param_2) {\n    char *local_150 = \"\";\n    int local_15c = 0;\n    while (param_2--) {\n        char *str = *param_1;\n        char *local_148 = malloc(16);\n        char cVar10 = *str;\n        if (cVar10 == '\\0') {\n            local_15c = 0;\n        } else {\n            int iVar2 = 0;\n            char *pcVar9 = str + 1;\n            while (cVar10!= '\\0') {\n                char *pcVar4 = strchr(local_148, cVar10);\n                if (pcVar4!= NULL) {\n                    cVar10 = *pcVar9;\n                    pcVar9 = pcVar9 + 1;\n                    if (cVar10 == '\\0') break;\n                    uint uVar7 = *pcVar4 + 0xfefefeff & ~*pcVar4;\n                    uint uVar8 = uVar7 & 0x80808080;\n                    if (uVar8 == 0) continue;\n                    bool bVar11 = (uVar7 & 0x8080) == 0;\n                    if (bVar11) {\n                        uVar8 = uVar8 >> 0x10;\n                    }\n                    if (bVar11) {\n                        pcVar4 = (char *)((long)pcVar4 + 6);\n                    }\n                    iVar2++;\n                    int iVar3 = (((int)pcVar4 + -3) - (uint)CARRY1((byte)uVar8, (byte)uVar8)) - (int)local_148;\n                    local_148[iVar3] = cVar10;\n                    local_148[iVar3 + 1] = 0;\n                    cVar10 = *pcVar9;\n                    pcVar9 = pcVar9 + 1;\n                }\n            }\n            if (iVar2 <= local_15c && strcmp(str, local_150) < 0) {\n                local_150 = str;\n            }\n            local_15c = iVar2;\n        }\n        param_1++;\n    }\n    free(local_148);\n    return local_150;\n}\n```\n\nNote: The code above assumes that the `CARRY1` function is defined elsewhere in the codebase.", "int func0(int param_1,int param_2,int param_3,int *param_4) {\n  if (param_3 < param_2) {\n    *param_4 = param_1 + param_3;\n    param_4[1] = 0;\n  }\n  else {\n    *param_4 = param_1 + param_2;\n    param_4[1] = param_3 - param_2;\n  }\n  return *param_4;\n}", "int func0(int param_1,int param_2,int param_3,int *param_4) {\n  if (param_3 < param_2) {\n    *param_4 = param_3 + param_1;\n    param_4[1] = 0;\n  } else {\n    *param_4 = param_1 + param_2;\n    param_4[1] = param_3 - param_2;\n  }\n  return 0;\n}", "int func0(int param_1,int param_2,int param_3,int *param_4) {\n  if (param_3 < param_2) {\n    param_4[1] = 0;\n    *param_4 = param_3 + param_1;\n  } else {\n    *param_4 = param_1 + param_2;\n    param_4[1] = param_3 - param_2;\n  }\n  return 0;\n}", "int func0(int param_1,int param_2,int param_3,int *param_4) {\n  if (param_3 < param_2) {\n    param_4[1] = 0;\n    *param_4 = param_1 + param_3;\n  } else {\n    param_4[1] = param_3 - param_2;\n    *param_4 = param_1 + param_2;\n  }\n  return 0;\n}", "int func0(char **param_1, int param_2, int param_3, int param_4) {\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int a;\n  int b;\n  int c;\n  int d;\n  int e;\n  int f;\n  int g;\n  int h;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  int o;\n  int p;\n  int q;\n  int r;\n  int s;\n  int t;\n  int u;\n  int v;\n  int w;\n  int x;\n  int y;\n  int z;\n  int aa;\n  int ab;\n  int ac;\n  int ad;\n  int ae;\n  int af;\n  int ag;\n  int ah;\n  int ai;\n  int aj;\n  int ak;\n  int al;\n  int am;\n  int an;\n  int ao;\n  int ap;\n  int aq;\n  int ar;\n  int as;\n  int at;\n  int au;\n  int av;\n  int aw;\n  int ax;\n  int ay;\n  int az;\n  int ba;\n  int bb;\n  int bc;\n  int bd;\n  int be;\n  int bf;\n  int bg;\n  int bh;\n  int bi;\n  int bj;\n  int bk;\n  int bl;\n  int bm;\n  int bn;\n  int bo;\n  int bp;\n  int bq;\n  int br;\n  int bs;\n  int bt;\n  int bu;\n  int bv;\n  int bw;\n  int bx;\n  int by;\n  int bz;\n  int ca;\n  int cb;\n  int cc;\n  int cd;\n  int ce;\n  int cf;\n  int cg;\n  int ch;\n  int ci;\n  int cj;\n  int ck;\n  int cl;\n  int cm;\n  int cn;\n  int co;\n  int cp;\n  int cq;\n  int cr;\n  int cs;\n  int ct;\n  int cu;\n  int cv;\n  int cw;\n  int cx;\n  int cy;\n  int", "int func0(byte **param_1,long param_2,int param_3,int param_4) {\n  int *piVar4;\n  int iVar5;\n  int *piVar13;\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n ", "int func0(char **param_1, int param_2, int param_3, int param_4) {\n  int *ptr_00;\n  int *ptr_01;\n  int *ptr_02;\n  int *ptr_03;\n  int *ptr_04;\n  int *ptr_05;\n  int *ptr_06;\n  int *ptr_07;\n  int *ptr_08;\n  int *ptr_09;\n  int *ptr_10;\n  int *ptr_11;\n  int *ptr_12;\n  int *ptr_13;\n  int *ptr_14;\n  int *ptr_15;\n  int *ptr_16;\n  int *ptr_17;\n  int *ptr_18;\n  int *ptr_19;\n  int *ptr_20;\n  int *ptr_21;\n  int *ptr_22;\n  int *ptr_23;\n  int *ptr_24;\n  int *ptr_25;\n  int *ptr_26;\n  int *ptr_27;\n  int *ptr_28;\n  int *ptr_29;\n  int *ptr_30;\n  int *ptr_31;\n  int *ptr_32;\n  int *ptr_33;\n  int *ptr_34;\n  int *ptr_35;\n  int *ptr_36;\n  int *ptr_37;\n  int *ptr_38;\n  int *ptr_39;\n  int *ptr_40;\n  int *ptr_41;\n  int *ptr_42;\n  int *ptr_43;\n  int *ptr_44;\n  int *ptr_45;\n  int *ptr_46;\n  int *ptr_47;\n  int *ptr_48;\n  int *ptr_49;\n  int *ptr_50;\n  int *ptr_51;\n  int *ptr_52;\n  int *ptr_53;\n  int *ptr_54;\n  int *ptr_55;\n  int *ptr_56;\n  int *ptr_57;\n  int *ptr_58;\n  int *ptr_59;\n  int *ptr_60;\n  int *ptr_61;\n  int *ptr_62;\n  int *ptr_63;\n  int *ptr_64;\n  int *ptr_65;\n  int *ptr_66;\n  int *ptr_67;\n  int *ptr_68;\n  int *ptr", "int func0(char **param_1, void *param_2, int param_3, uint param_4) {\n  int iVar2;\n  int iVar5;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  int iVar18;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  int iVar24;\n  int iVar25;\n  int iVar26;\n  int iVar27;\n  int iVar28;\n  int iVar29;\n  int iVar30;\n  int iVar31;\n  int iVar32;\n  int iVar33;\n  int iVar34;\n  int iVar35;\n  int iVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  int iVar40;\n  int iVar41;\n  int iVar42;\n  int iVar43;\n  int iVar44;\n  int iVar45;\n  int iVar46;\n  int iVar47;\n  int iVar48;\n  int iVar49;\n  int iVar50;\n  int iVar51;\n  int iVar52;\n  int iVar53;\n  int iVar54;\n  int iVar55;\n  int iVar56;\n  int iVar57;\n  int iVar58;\n  int iVar59;\n  int iVar60;\n  int iVar61;\n  int iVar62;\n  int iVar63;\n  int iVar64;\n  int iVar65;\n  int iVar66;\n  int iVar67;\n  int iVar68;\n  int iVar69;\n  int iVar70;\n  int iVar71;\n  int iVar72;\n  int iVar73;\n  int iVar74;\n  int iVar75;\n  int iVar76;\n  int iVar77;\n  int iVar78;\n  int iVar79;\n  int iVar80;\n  int iVar81;\n  int iVar82;\n  int iVar83;\n  int iVar84;\n  int iVar85;\n  int iVar86;\n  int iVar87;\n  int iVar88;\n  int iVar89;\n  int iVar90;\n  int iVar91;\n  int iVar92;\n  int iVar93;\n  int iVar94;\n  int iVar95;\n  int iVar96;\n  int iVar97;\n  int iVar98;\n  int iVar99;\n  int iVar100;\n  int iVar101;\n ", "char *func0(char *param_1) {\n  int i;\n  int len = strlen(param_1);\n  for (i = 0; i < len; i++) {\n    if (!isblank(param_1[i])) {\n      continue;\n    }\n    if (isalpha(param_1[i])) {\n      param_1[i] = isupper(param_1[i])? tolower(param_1[i]) : toupper(param_1[i]);\n    }\n  }\n  if (isblank(param_1[0])) {\n    int j;\n    for (j = 0; j < len / 2; j++) {\n      char temp = param_1[j];\n      param_1[j] = param_1[len - j - 1];\n      param_1[len - j - 1] = temp;\n    }\n  }\n  return param_1;\n}", "int func0(char *str) {\n  int i, j, count = 0;\n  int len = strlen(str);\n  int *ctype = __ctype_b_loc();\n  int *ctype_toupper = __ctype_toupper_loc();\n  int *ctype_tolower = __ctype_tolower_loc();\n\n  for (i = len - 1; i >= 0; i--) {\n    if (ctype[str[i]] & 0x400) {\n      if (ctype[str[i]] & 0x100) {\n        if (ctype[str[i]] & 0x200) {\n          str[i] = ctype_toupper[str[i]];\n        }\n      } else {\n        str[i] = ctype_tolower[str[i]];\n      }\n      count++;\n    }\n  }\n\n  if (count == len && len > 0) {\n    for (i = 0, j = len - 1; i < j; i++, j--) {\n      char temp = str[i];\n      str[i] = str[j];\n      str[j] = temp;\n    }\n  }\n\n  return str;\n}", "char * func0(char *str) {\n  int len = strlen(str);\n  if (len < 1) return str;\n  int count = 0;\n  for (char *p = str; p!= str + len; p++) {\n    if (isctype(*p, _ISASCII) &&!isctype(*p, _ISUP)) {\n      if (isctype(*p, _ISLOWER)) {\n        *p = toupper(*p);\n      } else {\n        *p = tolower(*p);\n      }\n      count++;\n    }\n  }\n  if (len == count && len % 2 == 0) {\n    char *end = str + len - 1;\n    for (char *p = str; p!= end; p++, end--) {\n      char temp = *p;\n      *p = *end;\n      *end = temp;\n    }\n  }\n  return str;\n}", "char * tolower_or_toupper(char *str) {\n  if (strlen(str) < 1) {\n    return str;\n  }\n\n  const ushort *ctype = __ctype_b_loc();\n  char *p = str;\n  int count = 0;\n  while (p!= str + strlen(str)) {\n    char c = *p;\n    if ((ctype[c] & 0x400) == 0) {\n      if ((ctype[c] & 0x100) == 0) {\n        if ((ctype[c] & 0x200)!= 0) {\n          const ushort *toupper = __ctype_toupper_loc();\n          *p = toupper[c];\n        }\n      } else {\n        const ushort *tolower = __ctype_tolower_loc();\n        *p = tolower[c];\n      }\n      count++;\n    }\n    p++;\n  }\n\n  if (strlen(str) == count && count > 1) {\n    char *end = str + strlen(str) - 1;\n    char *start = str;\n    while (start!= end) {\n      char temp = *start;\n      *start = *end;\n      *end = temp;\n      start++;\n      end--;\n    }\n  }\n\n  return str;\n}", "char *func0(char *param_1) {\n  char *s;\n  uint crc;\n  uint i;\n  uint j;\n  \n  if (*param_1 == '\\0') {\n    s = strdup(\"None\");\n  }\n  else {\n    crc = 0xffffffff;\n    for (i = 0; param_1[i]!= '\\0'; i++) {\n      crc = crc ^ (byte)param_1[i];\n      for (j = 0; j < 8; j++) {\n        if ((crc & 1) == 0) {\n          crc = crc >> 1;\n        }\n        else {\n          crc = crc >> 1 ^ 0xedb88320;\n        }\n      }\n    }\n    s = malloc(9);\n    if (s!= NULL) {\n      sprintf(s, \"%08X\", ~crc);\n    }\n  }\n  return s;\n}", "char *func0(byte *param_1) {\n  uint crc = 0;\n  byte b = *param_1;\n  char *str = NULL;\n  uint crc_table[256] = {0};\n  uint crc_table_init = 0xedb88320;\n  \n  if (b == 0) {\n    str = strdup(\"None\");\n  }\n  else {\n    crc = crc_table_init;\n    do {\n      crc = crc ^ b;\n      crc = (crc >> 1) ^ crc_table[crc & 1];\n      b = param_1[++crc];\n    } while (b!= 0);\n    str = (char *)malloc(9);\n    if (str!= NULL) {\n      sprintf(str, \"%08x\", ~crc);\n    }\n  }\n  return str;\n}", "char *func0(byte *param_1) {\n  byte bVar1 = *param_1;\n  if (bVar1!= 0) {\n    ulong uVar3 = 0;\n    uint uVar6 = 0xffffffff;\n    do {\n      uVar6 ^= bVar1;\n      for (int iVar2 = 8; iVar2 > 0; iVar2--) {\n        uint uVar7 = uVar6 >> 1;\n        uint uVar5 = uVar6 & 1;\n        uVar6 = uVar7;\n        if (uVar5!= 0) {\n          uVar6 ^= 0xedb88320;\n        }\n      }\n      uVar3++;\n      bVar1 = param_1[uVar3];\n    } while (bVar1!= 0);\n    char *pcVar4 = malloc(9);\n    if (pcVar4!= NULL) {\n      sprintf(pcVar4, \"%08x\", ~uVar6);\n    }\n    return pcVar4;\n  }\n  return strdup(\"None\");\n}", "char *func0(byte *param_1) {\n  byte bVar1;\n  ulong uVar2;\n  char *pcVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  bVar1 = *param_1;\n  if (bVar1!= 0) {\n    uVar2 = 0;\n    uVar5 = 0xffffffff;\n    do {\n      uVar4 = (bVar1 ^ uVar5) >> 1;\n      if (((bVar1 ^ uVar5) & 1)!= 0) {\n        uVar4 ^= 0xedb88320;\n      }\n      uVar5 = (uVar4 >> 1);\n      if ((uVar4 & 1)!= 0) {\n        uVar5 ^= 0xedb88320;\n      }\n      uVar4 >>= 1;\n      uVar2++;\n      bVar1 = param_1[uVar2];\n    } while (bVar1!= 0);\n    pcVar3 = malloc(9);\n    if (pcVar3!= NULL) {\n      sprintf(pcVar3, \"%08x\", ~uVar5);\n    }\n    return pcVar3;\n  }\n  pcVar3 = strdup(\"None\");\n  return pcVar3;\n}", "int func0(uint param_1,uint param_2,long param_3,int *param_4)\n{\n  int iVar1;\n  uint local_20;\n  uint local_1c;\n  uint local_10;\n  \n  *param_4 = 0;\n  local_20 = param_2;\n  local_1c = param_1;\n  if (param_2 < param_1) {\n    local_20 = param_1;\n    local_1c = param_2;\n  }\n  for (local_10 = local_1c; local_10 <= local_20; local_10++) {\n    if (local_10 < 10 && (local_10 & 1) == 0) {\n      iVar1 = *param_4;\n      *param_4 = iVar1 + 1;\n      *(uint *)((iVar1 * 4) + param_3) = local_10;\n    }\n  }\n  return *param_4;\n}", "int func0(uint param_1,uint param_2,long param_3,int *param_4) {\n  int iVar1;\n  uint uVar2;\n  \n  *param_4 = 0;\n  uVar2 = param_2;\n  if (param_2 < param_1) {\n    uVar2 = param_1;\n    param_1 = param_2;\n  }\n  for (; param_1 <= uVar2; param_1++) {\n    if (param_1 < 10 && param_1 % 2 == 0) {\n      iVar1 = *param_4;\n      *param_4 = iVar1 + 1;\n      *(uint *)(param_3 + iVar1 * 4) = param_1;\n    }\n  }\n  return *param_4;\n}", "int func0(uint param_1,uint param_2,long param_3,int *param_4) {\n  int iVar1;\n  uint uVar2;\n  \n  *param_4 = 0;\n  uVar2 = param_2;\n  if (param_2 < param_1) {\n    uVar2 = param_1;\n    param_1 = param_2;\n  }\n  for (; param_1 <= uVar2; param_1++) {\n    if (param_1 < 10 && param_1 % 2 == 0) {\n      iVar1 = *param_4;\n      *param_4 = iVar1 + 1;\n      *(uint *)(param_3 + iVar1 * 4) = param_1;\n    }\n  }\n  return *param_4;\n}", "int func0(uint param_1,uint param_2,long param_3,int *param_4)\n{\n  int iVar1;\n  uint uVar2;\n  \n  *param_4 = 0;\n  uVar2 = param_2;\n  if (param_2 < param_1) {\n    uVar2 = param_1;\n    param_1 = param_2;\n  }\n  if (param_1 < 10) {\n    if (9 < uVar2) {\n      uVar2 = 9;\n    }\n    for (; param_1 <= uVar2; param_1++) {\n      if (param_1 & 1) {\n        *(uint *)(param_3 + (long)(iVar1 = *param_4) * 4) = param_1;\n        *param_4 = iVar1 + 1;\n      }\n    }\n  }\n  return *param_4;\n}"]